<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TrBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-01T12:26:06.641Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WRF+WPS配置</title>
    <link href="http://example.com/2025/03/01/WRF-WPS%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2025/03/01/WRF-WPS%E9%85%8D%E7%BD%AE/</id>
    <published>2025-03-01T12:19:36.000Z</published>
    <updated>2025-03-01T12:26:06.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WRF"><a href="#WRF" class="headerlink" title="WRF"></a>WRF</h1><h1 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h1><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WRF&quot;&gt;&lt;a href=&quot;#WRF&quot; class=&quot;headerlink&quot; title=&quot;WRF&quot;&gt;&lt;/a&gt;WRF&lt;/h1&gt;&lt;h1 id=&quot;WPS&quot;&gt;&lt;a href=&quot;#WPS&quot; class=&quot;headerlink&quot; title=&quot;WPS&quot;&gt;&lt;/a&gt;WPS&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Yolo+Deepsort 动态追踪</title>
    <link href="http://example.com/2023/02/03/Yolo-Deepsort-%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/2023/02/03/Yolo-Deepsort-%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</id>
    <published>2023-02-03T06:12:04.000Z</published>
    <updated>2025-03-01T12:26:37.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态追踪算法"><a href="#动态追踪算法" class="headerlink" title="动态追踪算法"></a>动态追踪算法</h1><p>算法地址：<a href="https://github.com/mikel-brostrom/Yolov7_StrongSORT_OSNet%E3%80%82">https://github.com/mikel-brostrom/Yolov7_StrongSORT_OSNet。</a></p><p><code>pip install -r requirements.txt</code></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>项目下载好后，根据github的使用文档，可以在项目目录下执行：<code>python track.py --source test.mp4 --strong-sort-weights osnet_x0_25_market1501.pt</code> </p><p>如果执行 <code>python track.py --source test.mp4 </code> 项目会自动去google网盘下载osnet模型，所以可以提前下载StrongSort模型<a href="https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO">模型下载区</a>，然后用<code>--strong-sort-weights</code>指定即可</p><p>这里 source 可以是视频文件、摄像头 ID 或者网络视频(rtsp、http、https 都支持)</p></blockquote><h2 id="Yolo-模型"><a href="#Yolo-模型" class="headerlink" title="Yolo 模型"></a>Yolo 模型</h2><blockquote><p>这个项目使用的Yolo算法，所以在里面的Yolo目录中可以像往常一样使用yolo算法生成自己的训练模型，最后在追踪算法内指定YOLO模型即可<code>--yolo-weights yolov7.pt --img 640</code></p></blockquote><h2 id="StrongSort模型"><a href="#StrongSort模型" class="headerlink" title="StrongSort模型"></a>StrongSort模型</h2><p>模型可以到 <a href="https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO">https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO</a> 下载，这里的模型后缀是 pth，可以直接重命名为 pt</p><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><blockquote><p>打开track.py</p><p>从109行开始加载数据流，dataset为要识别的视频流</p><p>148行开始便利dataset视频流，将每一帧作为输入，im,im0s,im0都是视频的一帧，赋值给了curr_frames, prev_frames，当前帧和上一帧</p><p>162行pred = model(im)，pred为帧图片识别结果</p><p>198行将当前帧图片和上一帧图片作为入参输入到strongSort内</p></blockquote><h2 id="利用算法"><a href="#利用算法" class="headerlink" title="利用算法"></a>利用算法</h2><blockquote><p>算法在：track.py 中，算法执行可以选择<code> --show-vid</code> 从而开启一个识别视频流，同时后台会实时的打印识别到的物体</p><p>算法所有的入参可以在 track.py 第 287行中看到</p><p>算法在第248行打印识别结果，可以在这里将识别结果发送到kafka或者写入redis操作，从而配合其他系统使用</p><p>算法在171行开始处理图形识别</p></blockquote><p><img src="/images/pasted-197.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态追踪算法&quot;&gt;&lt;a href=&quot;#动态追踪算法&quot; class=&quot;headerlink&quot; title=&quot;动态追踪算法&quot;&gt;&lt;/a&gt;动态追踪算法&lt;/h1&gt;&lt;p&gt;算法地址：&lt;a href=&quot;https://github.com/mikel-brostrom/Yolov7</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Yolo视觉识别</title>
    <link href="http://example.com/2023/02/03/Yolo%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/2023/02/03/Yolo%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</id>
    <published>2023-02-03T05:24:00.000Z</published>
    <updated>2025-03-01T12:26:37.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yolo算法"><a href="#Yolo算法" class="headerlink" title="Yolo算法"></a>Yolo算法</h1><blockquote><p>Yolo是一个非常棒的视觉识别算法，项目地址：<a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a></p><p>个人地址：<code>/home/tr/Documents/JupyterNotebook/YOLOv5</code></p><p>在myTrain.ipynb中写了使用训练的demo</p></blockquote><p><img src="/images/pasted-191.png" alt="upload successful"></p><h2 id="文件目录介绍"><a href="#文件目录介绍" class="headerlink" title="文件目录介绍"></a>文件目录介绍</h2><p><img src="/images/pasted-192.png" alt="upload successful"></p><ol><li><p>data目录：存放训练数据集，数据标记，训练配置等（yaml文件）</p></li><li><p>model 模型算法核心（不用关注）</p></li><li><p>runs 每执行一次detect，或者训练都会在目录下生成新的结果目录</p></li><li><p>weights 存放模型结果</p></li></ol><h2 id="标记图片工具-生成训练工具"><a href="#标记图片工具-生成训练工具" class="headerlink" title="标记图片工具-生成训练工具"></a>标记图片工具-生成训练工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull heartexlabs/label-studio:latest\n</span><br><span class="line">docker run -it -p 6002:8080 -v ~/Documents/LabelStudio/mydata:/label-studio/data heartexlabs/label-studio:latest label-studio --log-level DEBUG</span><br></pre></td></tr></table></figure><p>docker 拉取完毕后访问6002端口即可，注册账户，上传图片进行标记，具体使用方法很简单，标记完毕后导出数据格式为yolo</p><p><img src="/images/pasted-193.png" alt="upload successful"></p><h2 id="编写训练配置"><a href="#编写训练配置" class="headerlink" title="编写训练配置"></a>编写训练配置</h2><blockquote><p>在label-studio中标记好导出的数据有两个目录，images和labels，labels内每个txt文件对应各自的图片文件，第一列为物品类别，后面分别是方框的xy坐标</p><p>需要注意的是，第一列的类别标签一会要作为配置文件内的类别，不能弄混</p><p>假设导出的数据目录为：tr03(内有images和labels目录)，放入YOLOV5/datasets内，创建文件：YOLOV5/yolov5/data/tr03.yaml，内容如下</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">../datasets/tr03</span>  <span class="comment"># dataset root dir</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">images/</span>  <span class="comment"># train images (relative to &#x27;path&#x27;) 128 images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">images/</span>  <span class="comment"># val images (relative to &#x27;path&#x27;) 128 images</span></span><br><span class="line"><span class="attr">test:</span>  <span class="comment"># test images (optional)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Classes</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">0:</span> <span class="string">TR</span></span><br><span class="line">  <span class="attr">1:</span> <span class="string">person</span></span><br><span class="line">  <span class="attr">2:</span> <span class="string">chair</span></span><br></pre></td></tr></table></figure><h2 id="Yolo算法的训练"><a href="#Yolo算法的训练" class="headerlink" title="Yolo算法的训练"></a>Yolo算法的训练</h2><blockquote><p>Yolo已经存在了一些训练好的模型，我们再次训练的时候，可以基于已有的模型，也可以自己从头训练</p><p><code>!python train.py --img 640 --batch 16 --epochs 600 --data tr03.yaml --weights ./weights/yolov5s.pt </code> 这个命令就是基于 weights目录下的yolov5s.pt模型训练，训练600次</p></blockquote><p><img src="/images/pasted-194.png" alt="upload successful"></p><blockquote><p>执行完毕以后，会在runs目录下生成最新结果，我们的模型文件也在其中</p></blockquote><p><img src="/images/pasted-195.png" alt="upload successful"></p><h2 id="Yolo算法的使用"><a href="#Yolo算法的使用" class="headerlink" title="Yolo算法的使用"></a>Yolo算法的使用</h2><blockquote><p>有了模型文件后可以利用模型识别各种图片</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YOLOv5 PyTorch HUB Inference (DetectionModels only)</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># model = torch.hub.load(&#x27;ultralytics/yolov5&#x27;, &#x27;yolov5s.pt&#x27;)  # yolov5n - yolov5x6 or custom</span></span><br><span class="line">model = torch.hub.load(<span class="string">&#x27;./&#x27;</span>,<span class="string">&#x27;custom&#x27;</span>, <span class="string">&#x27;./runs/train/exp8/weights/best.pt&#x27;</span>, source=<span class="string">&#x27;local&#x27;</span>)  <span class="comment"># yolov5n - yolov5x6 or custom</span></span><br><span class="line"><span class="comment"># model = torch.hub.load(&#x27;./&#x27;,&#x27;custom&#x27;, &#x27;./weights/yolov5s.pt&#x27;, source=&#x27;local&#x27;)  # yolov5n - yolov5x6 or custom</span></span><br><span class="line">im = <span class="string">&#x27;../datasets/tr03/images/test.jpg&#x27;</span>  <span class="comment"># file, Path, PIL.Image, OpenCV, nparray, list</span></span><br><span class="line">results = model(im)  <span class="comment"># inference</span></span><br><span class="line">results.<span class="built_in">print</span>()  <span class="comment"># or .show(), .save(), .crop(), .pandas(), etc.</span></span><br><span class="line"></span><br><span class="line">model(<span class="string">&#x27;../datasets/tr02/images/train01/01.jpg&#x27;</span>).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-196.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Yolo算法&quot;&gt;&lt;a href=&quot;#Yolo算法&quot; class=&quot;headerlink&quot; title=&quot;Yolo算法&quot;&gt;&lt;/a&gt;Yolo算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Yolo是一个非常棒的视觉识别算法，项目地址：&lt;a href=&quot;https://g</summary>
      
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Esp8266入门</title>
    <link href="http://example.com/2023/01/31/Esp8266%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/01/31/Esp8266%E5%85%A5%E9%97%A8/</id>
    <published>2023-01-31T07:54:00.000Z</published>
    <updated>2025-03-01T12:26:37.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP8266"><a href="#ESP8266" class="headerlink" title="ESP8266"></a>ESP8266</h1><blockquote><p>通常在购买完芯片后插上去看com口即可（linux下是/dev/ttyUSB0），如果链接电脑无设备识别，需要下载ch40的驱动：<code>https://www.wch.cn/download/CH341SER_LINUX_ZIP.html</code></p><p>有windows和linux版本，这里我下载了linux版本，解压进入目录后执行<code>make</code> 如果提示缺少<code>libguile-3.0.so</code>，需要执行<code>sudo pacman -S guile</code> 更新最新的<code>guile</code>库，最后执行<code>make load</code>加载</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ESP8266&quot;&gt;&lt;a href=&quot;#ESP8266&quot; class=&quot;headerlink&quot; title=&quot;ESP8266&quot;&gt;&lt;/a&gt;ESP8266&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;通常在购买完芯片后插上去看com口即可（linux下是/dev/ttyUS</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>orika使用</title>
    <link href="http://example.com/2023/01/31/orika%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/01/31/orika%E4%BD%BF%E7%94%A8/</id>
    <published>2023-01-31T07:03:02.000Z</published>
    <updated>2025-03-01T12:26:37.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="orika"><a href="#orika" class="headerlink" title="orika"></a>orika</h1><p> 一、Orika背景介绍 　　</p><p>　　Orika是java Bean映射框架，可以实现从一个对象递归拷贝数据至另一个对象。在开发多层应用程序中非常有用。在这些层之间交换数据时，通常为了适应不同API需要转换一个实例至另一个实例。</p><p>　　有很多方法可以实现：硬代码拷贝或Dozer实现bean映射等。总之，需要简化不同层对象之间映射过程。</p><p>　   Orika使用字节码生成器创建开销最小的快速映射，比其他基于反射方式实现（如，Dozer）更快。之前使用Bean Copy 性能非常慢，发现在这个领域业界还是有很多新秀的。 Orika 应该就算一个比较好的吧。</p><p> 二、优势</p><ol><li><p>性能<br>　　大概是Dozer的8-10 倍， 这个上面的已经做了描述</p></li><li><p>内存消耗<br>　　大概是Dozer内存消耗的一半多点。 为什么做到这点的还没想清楚， 估计是因为运行期不需要维护复杂的Mapping 关系。 不需要大量的Mapping 关系查找以及需要的对这些查找优化所消耗的空间。</p></li><li><p>简单<br>　　Orika的代码短小精悍， 而且可读性非常强， Dozer如果要加减一个功能， 不才完全没有信心， Orika 我还是可以偶尔在Orika里面打几个酱油的。</p></li></ol><p>三、基础使用</p><p>Maven项目依赖包：POM文件直接依赖进去即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ma.glasnost.orika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建两个Bean对象，用于复制使用。　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserVo对象</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//Set GET方法</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// User对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line">使用场景（如果对象中属性太多，普通逻辑处理代码太多）</span><br><span class="line">A对象复制到B对象（对象复制）</span><br><span class="line"><span class="comment">//业务场景，将A对象复制B对象中</span></span><br><span class="line"><span class="comment">//1.普通逻辑处理</span></span><br><span class="line">User A = <span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;1231&quot;</span>);</span><br><span class="line">UserVo B = <span class="keyword">new</span> UserVo().setId(A.getId()).setName(A.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;普通方式将A对象复制B对象中：&quot;</span>+B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A复制到B对象中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">UserVo map = mapperFactory.getMapperFacade().map(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika复制对象:&quot;</span>+map);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">普通方式将A对象复制B对象中：UserVo(id=<span class="number">123</span>, name=<span class="number">1231</span>)</span><br><span class="line"></span><br><span class="line">orika复制对象:UserVo(id=<span class="number">123</span>, name=<span class="number">1231</span>)</span><br></pre></td></tr></table></figure><p>2.A集合复制到B集合（集合复制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.普通逻辑处</span></span><br><span class="line"><span class="comment">//A对象</span></span><br><span class="line">List&lt;User&gt; A = Arrays.asList(<span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line"><span class="comment">//B对象</span></span><br><span class="line">List&lt;UserVo&gt; B = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//将A集合数据复制到B集合中</span></span><br><span class="line">A.forEach(x-&gt;&#123;</span><br><span class="line">B.add( <span class="keyword">new</span> UserVo().setId(x.getId()).setName(x.getName()));</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;将A集合中数据set到B集合中数据打印&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A集合复制到B集合中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">List&lt;UserVo&gt; userVo = mapperFactory.getMapperFacade().mapAsList</span><br><span class="line">mapperFactory.getMapperFacade().mapAsList(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika直接复制对象集合打印结果:&quot;</span>+userVo);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">`将A集合中数据set到B集合中数据打印：[UserVo(id=<span class="number">123</span>, name=张三)]`</span><br><span class="line"></span><br><span class="line">`orika直接复制对象集合打印结果:[UserVo(id=<span class="number">123</span>, name=张三)]`</span><br><span class="line">到此为止您已经算入门了，以上是Orika的基础使用，由此发现如果对象中属性如果<span class="number">20</span>个，那么用普通的逻辑处理需要<span class="number">20</span>个set过去，如果用Orika两行代码搞定。话不多说关键步骤总结一波（关键必须牢记）：</span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.getMapperFacade().map(操作对象)</span><br><span class="line">mapperFactory.getMapperFacade().mapAsList(操作集合对象)</span><br></pre></td></tr></table></figure><p>四、高级使用方法</p><p> 创建两个Bean对象，用于复制使用。<br>　　　UserVo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//Set GET方法</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ageOne;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景（对象A与对象B中属性不一致时，如果对象中属性太多，普通逻辑处理代码太多）<br>　　1.A对象复制到B对象，对象中属性不一样时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务场景，将A对象复制B对象中,A对象中的字段与B对象中的字段不一致</span></span><br><span class="line"><span class="comment">//1.普通逻辑处理</span></span><br><span class="line">User A = <span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;张三&quot;</span>).setAge(<span class="number">20</span>);</span><br><span class="line">UserVo B = <span class="keyword">new</span> UserVo().setId(A.getId()).setUserName(A.getName()).setAgeOne(A.getAge());</span><br><span class="line">System.out.println(<span class="string">&quot;普通方式将A对象处理B对象中：&quot;</span>+B);.</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A复制到B对象中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.classMap(User.class, UserVo.class)</span><br><span class="line">.field(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;userName&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;ageOne&quot;</span>)</span><br><span class="line">.byDefault().register();</span><br><span class="line">UserVo userVo = mapperFactory.getMapperFacade().map(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika复制对象:&quot;</span>+userVo);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">`普通方式将A对象处理B对象中：UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)`</span><br><span class="line"></span><br><span class="line">`orika复制对象:UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)`</span><br></pre></td></tr></table></figure><p>2.A集合对象复制到B集合对象，对象中属性不一样时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.普通逻辑处里A对象中与B对象字段不一致处理</span></span><br><span class="line"><span class="comment">//A对象</span></span><br><span class="line">List&lt;User&gt; A = Arrays.asList(<span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;张三&quot;</span>).setAge(<span class="number">20</span>));</span><br><span class="line"><span class="comment">//B对象</span></span><br><span class="line">List&lt;UserVo&gt; B = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//将A集合数据复制到B集合中</span></span><br><span class="line">A.forEach(x-&gt;&#123;</span><br><span class="line">B.add(<span class="keyword">new</span> UserVo().setId(x.getId()).setUserName(x.getName()).setAgeOne(x.getAge()));</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;将A集合中数据set到B集合中数据打印&quot;</span>+B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A集合复制到B集合中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.classMap(User.class, UserVo.class)</span><br><span class="line">.field(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;userName&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;ageOne&quot;</span>)</span><br><span class="line">.byDefault().register();</span><br><span class="line">List&lt;UserVo&gt; userVos = mapperFactory.getMapperFacade().mapAsList(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika复制对象:&quot;</span>+userVos);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">`将A集合中数据set到B集合中数据打印[UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)]`</span><br><span class="line"></span><br><span class="line">`orika复制对象:[UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)]`</span><br><span class="line">话不多说关键步骤总结一波（关键必须牢记）：</span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.classMap(User.class, UserVo.class)</span><br><span class="line">.field(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;userName&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;ageOne&quot;</span>)</span><br><span class="line">.byDefault().register();</span><br><span class="line"><span class="comment">//集合复制--使用mapAsList</span></span><br><span class="line">List&lt;UserVo&gt; userVos = mapperFactory.getMapperFacade().mapAsList(A, UserVo.class);</span><br><span class="line"><span class="comment">//对象复制--使用map</span></span><br><span class="line">UserVo userVos = mapperFactory.getMapperFacade().map(A, UserVo.class);</span><br></pre></td></tr></table></figure><p>五、总结工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MapperUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认字段工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFactory MAPPER_FACTORY = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认字段实例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFacade MAPPER_FACADE = MAPPER_FACTORY.getMapperFacade();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认字段实例集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MapperFacade&gt; CACHE_MAPPER_FACADE_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射实体（默认字段）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（对象）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E, T&gt; <span class="function">E <span class="title">map</span><span class="params">(Class&lt;E&gt; toClass, T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> MAPPER_FACADE.map(data, toClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射实体（自定义配置）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（对象）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E, T&gt; <span class="function">E <span class="title">map</span><span class="params">(Class&lt;E&gt; toClass, T data, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">MapperFacade mapperFacade = <span class="keyword">this</span>.getMapperFacade(toClass, data.getClass(), configMap);</span><br><span class="line"><span class="keyword">return</span> mapperFacade.map(data, toClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射集合（默认字段）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（集合）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E, T&gt; <span class="function">List&lt;E&gt; <span class="title">mapAsList</span><span class="params">(Class&lt;E&gt; toClass, Collection&lt;T&gt; data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> MAPPER_FACADE.mapAsList(data, toClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射集合（自定义配置）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（集合）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* public &lt;E, T&gt; List&lt;E&gt; mapAsList(Class&lt;E&gt; toClass, Collection&lt;T&gt; data, Map&lt;String, String&gt; configMap) &#123;</span></span><br><span class="line"><span class="comment">T t = data.stream().findFirst().orElseThrow(() -&gt; new ResourceNotExistException(&quot;映射集合，数据集合为空&quot;));</span></span><br><span class="line"><span class="comment">MapperFacade mapperFacade = this.getMapperFacade(toClass, t.getClass(), configMap);</span></span><br><span class="line"><span class="comment">return mapperFacade.mapAsList(data, toClass);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取自定义映射</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dataClass 数据映射类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> &lt;E, T&gt; <span class="function">MapperFacade <span class="title">getMapperFacade</span><span class="params">(Class&lt;E&gt; toClass, Class&lt;T&gt; dataClass, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">String mapKey = dataClass.getCanonicalName() + <span class="string">&quot;_&quot;</span> + toClass.getCanonicalName();</span><br><span class="line">MapperFacade mapperFacade = CACHE_MAPPER_FACADE_MAP.get(mapKey);</span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(mapperFacade)) &#123;</span><br><span class="line">MapperFactory factory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">ClassMapBuilder classMapBuilder = factory.classMap(dataClass, toClass);</span><br><span class="line">configMap.forEach(classMapBuilder::field);</span><br><span class="line">classMapBuilder.byDefault().register();</span><br><span class="line">mapperFacade = factory.getMapperFacade();</span><br><span class="line">CACHE_MAPPER_FACADE_MAP.put(mapKey, mapperFacade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mapperFacade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;orika&quot;&gt;&lt;a href=&quot;#orika&quot; class=&quot;headerlink&quot; title=&quot;orika&quot;&gt;&lt;/a&gt;orika&lt;/h1&gt;&lt;p&gt; 一、Orika背景介绍
 　　&lt;/p&gt;
&lt;p&gt;　　Orika是java Bean映射框架，可以实现从一个对象递归拷</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>迁移Archlinux系统</title>
    <link href="http://example.com/2022/10/17/%E8%BF%81%E7%A7%BBArchlinux%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/10/17/%E8%BF%81%E7%A7%BBArchlinux%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-10-17T07:54:00.000Z</published>
    <updated>2025-03-01T12:26:37.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迁移Archlinux系统到新电脑"><a href="#迁移Archlinux系统到新电脑" class="headerlink" title="迁移Archlinux系统到新电脑"></a>迁移Archlinux系统到新电脑</h1><span id="more"></span><h2 id="迁移前的准备"><a href="#迁移前的准备" class="headerlink" title="迁移前的准备"></a>迁移前的准备</h2><blockquote><p>下载<code>usbWriter</code>和<code>Archlinux</code>的系统镜像</p><p>烧录镜像到usb内</p><p>准备容量足够的硬盘或者U盘存储系统所有文件</p><p>在被备份的系统上安装多线程压缩工具<code>sudo pacman -S zstd</code></p></blockquote><h2 id="复制系统文件"><a href="#复制系统文件" class="headerlink" title="复制系统文件"></a>复制系统文件</h2><blockquote><p>linux将所有东西都视为文件，设备也是文件，但是不同电脑设备不同，这个需要后期修改</p><p>插上容量足够的U盘到现有的linux系统，将<code>/</code>下的所有文件压缩到一个压缩包到U盘下，执行<code>sudo tar --use-compress-program=zstd -cvpf /mnt/usb&lt;你的U盘挂载地址&gt;/arch-backup.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/run/media  --exclude=/media  /</code></p><p>这一步比较耗费时间，我的100G空间执行了1个小时左右</p></blockquote><h2 id="在新电脑划分分区"><a href="#在新电脑划分分区" class="headerlink" title="在新电脑划分分区"></a>在新电脑划分分区</h2><blockquote><p>注意：如果是双系统注意不要覆盖windows的分区</p><p>关闭<code>secureboot</code>,插入<code>archlinux</code>的系统盘，进入<code>liveCD</code>系统</p><p>这时候<code>lsblk</code>或者<code>fdisk -l</code>查看分区信息，对硬盘执行分区操作：<code>fdisk /dev/nvmen1</code>，具体如何分区可以参考安装篇</p><p>划分好分区后，开启缓存，挂载主分区到<code>/mnt</code>下，执行<code>mkdir /mnt/boot</code>再把boot分区挂载到<code>/mnt/boot</code>下</p></blockquote><h2 id="解压系统文件到新电脑"><a href="#解压系统文件到新电脑" class="headerlink" title="解压系统文件到新电脑"></a>解压系统文件到新电脑</h2><blockquote><p>这时电脑处在<code>liveCD</code>下，如果没有可用的U盘存储新系统，可以将两台电脑放在一个局域网下，通过<code>iwctl命令连接无线网络</code>，之后可以通过<code>sftp</code>命令，将旧电脑的<code>arch-backup.tgz</code>文件传输到新电脑</p><p>若有U盘则直接将<code>arch-backup.tgz</code>文件复制到<code>/</code>目录下，然后执行解压缩命令解压缩到<code>/mnt/</code>目录下：<code>sudo tar -z -c -T0 -18 -v -p -f - arch-backup.zstd -C /mnt</code></p><p>执行完毕后创建刚刚排除的文件夹：<code>sudo mkdir -pv /mnt/proc sudo mkdir -pv /mnt/sys sudo mkdir -pv /mnt/run sudo mkdir -pv /mnt/dev</code></p></blockquote><h2 id="配置新电脑的硬件信息"><a href="#配置新电脑的硬件信息" class="headerlink" title="配置新电脑的硬件信息"></a>配置新电脑的硬件信息</h2><blockquote><p>至此新的系统已经复制到了新电脑，但是还没有配置新系统使用的硬件信息（缓存所在分区，系统主分区信息等），执行<code>sudo genfstab -U /mnt/ &gt; /mnt/etc/fstab</code> 可以看到交换区信息等都已写入</p><p>配置系统新系统的引导程序使用的硬件地址，使用的引导软件现在还不知道启动的时候去哪个分区里面加载系统，所以要配置主分区的UUID到引导软件的配置里。</p><p>配置前首先切换到新系统：<code>arch-chroot /mnt</code></p><p>如果和我一样使用<code>reFind</code>，那么只需修改<code>/boot/EFI/refind/refind.conf</code>的配置文件的信息，使用<code>ls -l /dev/disk/by-uuid</code>查看所有分区的UUID信息。</p><p>如果是<code>grub</code>引导，执行`grub-install –target=x86_64-efi –efi-directory=/boot/efi –bootloader=ArchLinux –recheck</p></blockquote><p>update-grub`</p><blockquote></blockquote><h2 id="更新Initramfs配置双系统等"><a href="#更新Initramfs配置双系统等" class="headerlink" title="更新Initramfs配置双系统等"></a>更新Initramfs配置双系统等</h2><blockquote><p>执行<code>mkinitcpio -P</code></p><p>挂载windows的ESP分区（很小 只有100<br>，里面有个Microsoft目录），把目录的Microsoft目录拷贝到/boot/EFI/下，将<code>Microsoft</code>文件夹拷贝到<code>/boot/EFI</code>下</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;迁移Archlinux系统到新电脑&quot;&gt;&lt;a href=&quot;#迁移Archlinux系统到新电脑&quot; class=&quot;headerlink&quot; title=&quot;迁移Archlinux系统到新电脑&quot;&gt;&lt;/a&gt;迁移Archlinux系统到新电脑&lt;/h1&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>BOOKS</title>
    <link href="http://example.com/2022/04/21/BOOKS/"/>
    <id>http://example.com/2022/04/21/BOOKS/</id>
    <published>2022-04-21T15:07:24.000Z</published>
    <updated>2025-03-01T12:26:37.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Good-Good-study，Day-Day-up"><a href="#Good-Good-study，Day-Day-up" class="headerlink" title="Good Good study，Day Day up!"></a>Good Good study，Day Day up!</h2><p>git上找到的数据笔记大全</p><span id="more"></span><p>❗Books and materials are only for personal learning and use, and the copyright belongs to the original author. If there is any infringement, please contact me!（书籍和资料仅供个人学习使用，版权归原作者所有，如有侵权请联系我！）</p><ul><li><p><a href="/shell">[<strong>shell</strong>]</a>：shell learning</p><ul><li><p>Linux学习笔记 <a href="/shell/book/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.pdf">[Download]</a></p></li><li><p>The Linux Command Line中文版 <a href="/shell/book/The%20Linux%20Command%20Line%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></p></li><li><p>abs-guide <a href="/shell/book/abs-guide.pdf">[Download]</a></p></li><li><p>awk手册 <a href="/shell/book/awk%E6%89%8B%E5%86%8C.pdf">[Download]</a></p></li><li><p>The AWK Programming Language <a href="/shell/book/The.AWK.Programming.Language.pdf">[Download]</a></p></li><li><p>Sed-and-Awk-101-Hacks <a href="/shell/book/Sed-and-Awk-101-Hacks.pdf">[Download]</a></p></li><li><p>awk and sed修订第三版 <a href="/shell/book/awk%20and%20sed%E4%BF%AE%E8%AE%A2%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></p></li><li><p>AWK程序设计语言 <a href="/shell/book/AWK%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80.pdf">[Download]</a></p></li><li><p>shell脚本编程课件 <a href="/shell/book/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E8%AF%BE%E4%BB%B6.pdf">[Download]</a></p></li><li><p>LINUX SHELL脚本攻略 <a href="/shell/book/LINUX%20SHELL%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5(%E4%B8%AD%E6%96%87%E7%89%88%E5%B8%A6%E4%B9%A6%E7%AD%BE).pdf">[Download]</a></p></li><li><p>Linux命令行与shell脚本编程大全-第3版 <a href="/shell/book/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%A4%A7%E5%85%A8%20%20%E7%AC%AC3%E7%89%88.pdf">[Download]</a></p></li><li><p>跟老男孩学Linux运维：Shell编程实战 <a href="/shell/book/%E8%B7%9F%E8%80%81%E7%94%B7%E5%AD%A9%E5%AD%A6Linux%E8%BF%90%E7%BB%B4%EF%BC%9AShell%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98.pdf">[Download]</a></p></li><li><p>ECS运维指南之Linux系统诊断 <a href="/shell/book/ECS%E8%BF%90%E7%BB%B4%E6%8C%87%E5%8D%97%E4%B9%8BLinux%E7%B3%BB%E7%BB%9F%E8%AF%8A%E6%96%AD.pdf">[Download]</a></p></li><li><p>鸟哥的Linux私房菜基础篇-第三版 <a href="/shell/book/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></p></li><li><p>鸟哥的Linux私房菜服务器架设篇-第三版 <a href="/shell/book/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E8%AE%BE%E7%AF%87-%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></p><p>  ……</p></li></ul></li><li><p><a href="/python">[<strong>python</strong>]</a>：python learning</p><ul><li>Head First Python（中文版） <a href="/python/book/Head%20First%20Python%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89.pdf">[Download]</a></li><li>head first python <a href="/python/book/head%20first%20python.pdf">[Download]</a></li><li>Learn_Python_The_Hard_Way_zh-cn <a href="/python/book/Learn_Python_The_Hard_Way_zh-cn.pdf">[Download]</a></li><li>笨办法学Python-第3版 <a href="/python/book/%E7%AC%A8%E5%8A%9E%E6%B3%95%E5%AD%A6Python-%E7%AC%AC3%E7%89%88.pdf">[Download]</a></li><li>Python3学习笔记第三版上卷 <a href="/python/book/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%89%E7%89%88%E4%B8%8A%E5%8D%B7.pdf">[Download]</a></li><li>Python编程快速上手-让繁琐工作自动化 <a href="/python/book/Python%E7%BC%96%E7%A8%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E8%AE%A9%E7%B9%81%E7%90%90%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96.pdf">[Download]</a></li><li>Python知识手册 <a href="/python/book/Python%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C-V3.0.pdf">[Download]</a></li><li>Python核心编程第二版 <a href="/python/book/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%8C%E7%89%88.pdf">[Download]</a></li><li>Python核心编程第三版 <a href="/python/book/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></li><li>Python自动化运维技术与最佳实践 <a href="/python/book/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.pdf">[Download]</a></li><li>Python爬虫开发与项目实战 <a href="https://pan.baidu.com/s/1muu557bBjXj2kiIplqevwA">[Download]</a> 提取码：6dy9</li><li>Python.UNIX和Linux系统管理指南 <a href="/python/book/Python.UNIX%E5%92%8CLinux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%8C%87%E5%8D%97.pdf">[Download]</a></li><li>Python Cookbook(第2版)中文版 <a href="/python/book/Python%20Cookbook(%E7%AC%AC2%E7%89%88)%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li><li>编写高质量代码-改善Python程序的91个建议 <a href="/python/book/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81-%E6%94%B9%E5%96%84Python%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE.pdf">[Download]</a></li><li>Python编程参考 <a href="/python/book/Python%E7%BC%96%E7%A8%8B%E5%8F%82%E8%80%83%E5%8E%9F%E7%A8%BF.pdf">[Download]</a></li><li>Python源码剖析(完整版)  <a href="/python/book/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(%E5%AE%8C%E6%95%B4%E7%89%88).pdf">[Download]</a></li><li>流畅的Python <a href="/python/book/%E6%B5%81%E7%95%85%E7%9A%84Python.pdf">[Download]</a></li><li>110道Python面试题汇总 <a href="/python/book/110%E9%81%93Python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB.pdf">[Download]</a></li><li>Python面试大全 <a href="/python/book/Python%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8.pdf">[Download]</a></li><li>100道Python练手题目 <a href="/python/book/100%E9%81%93Python%E7%BB%83%E6%89%8B%E9%A2%98%E7%9B%AE.docx">[Download]</a></li><li>python操作excel、word、pdf <a href="/python/book/python%E6%93%8D%E4%BD%9Cexcel%E3%80%81word%E3%80%81pdf.zip">[Download]</a></li><li>python爬虫_小游戏教程&amp;源码 <a href="https://pan.baidu.com/s/1F6xJx_b4LLc8bbWrfZhaZw">[Download]</a>，百度网盘提取码：ka2l  ……</li></ul></li><li><p><a href="/golang">[<strong>golang</strong>]</a>：golang learning</p><ul><li><a href="/golang/book/Head%20First%20Go.pdf">Head First Go英文版</a></li><li><a href="/golang/book/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%EF%BC%88%E8%AF%A6%E7%BB%86%E4%B9%A6%E7%AD%BE%E3%80%81%E6%B8%85%E6%99%B0%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89.pdf">Go程序设计语言</a></li><li><a href="/golang/book/Go%20%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98.pdf">Go语言实战</a></li><li><a href="/golang/book/Go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%9F%A9%E9%A1%BA%E5%B9%B3.zip">Go语言核心编程笔记</a></li><li><a href="/golang/book/Go%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%E7%AC%AC%E5%9B%9B%E7%89%88.pdf">Go学习笔记 第四版</a></li><li><a href="/golang/book/Go%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%B9%A6%E7%AD%BE%E7%89%88%EF%BC%89.pdf">Go源码剖析（书签版）</a></li><li><a href="/golang/book/Go_web_%E7%BC%96%E7%A8%8B.pdf">Go_web_编程</a></li><li><a href="/golang/book/Go%20Web%20%E7%BC%96%E7%A8%8B.pdf">Go Web 编程</a></li><li><a href="/golang/book/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98_%E7%AC%AC1%E7%89%88.pdf">Go并发编程实战_第1版</a></li><li><a href="/golang/book/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98_%E7%AC%AC2%E7%89%88_Lite.pdf">Go并发编程实战_第2版_Lite</a></li><li><a href="https://drive.google.com/file/d/1_i-G4EQABtfhTsfgbPmXS5MOIjn6qd7M/view?usp=sharing">Go语言并发之道</a></li><li><a href="/golang/book/Go%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.pdf">Go网络编程</a></li><li><a href="/golang/book/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F(%E4%B8%AD%E6%96%87%E7%89%88).pdf">Go语言圣经(中文版)</a></li><li><a href="/golang/book/2020%E6%9C%80%E6%96%B0Gin%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-%E7%BF%BB%E8%AF%91-asong-%E6%97%A0%E6%B0%B4%E5%8D%B0%E7%89%88%E6%9C%ACV1.1.pdf">2020最新Gin框架中文文档</a></li><li><a href="/golang/book/%E5%A4%A7%E5%8E%82Go%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6.docx">大厂Go工程师面试题集锦</a></li><li><a href="/golang/book/Golang%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90.pdf">Golang常见面试题目解析</a>  ……</li></ul></li><li><p><a href="/program">[<strong>program</strong>]</a>：program learning</p><ul><li>程序是怎样跑起来的 <a href="/program/book/%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84_%E7%9F%A2%E6%B3%BD%E4%B9%85%E9%9B%84.pdf">[Download]</a></li><li>Head First Programming 中文版 <a href="/program/book/Head%20First%20Programming%20%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li><li>Head First Software 中文版 <a href="/program/book/Head%20First%20Software%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li><li>Head First ObjectOriented Analysis and Design(中文版) <a href="https://drive.google.com/file/d/1oM6dxlMu4oTb-SQfHMXrO5JlAqao_19i/view?usp=sharing">[Download]</a></li><li>Head First 设计模式(中文版) <a href="/program/book/Head%20First%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%AD%E6%96%87%E7%89%88).pdf">[Download]</a></li><li>大话设计模式 <a href="https://drive.google.com/file/d/1CEEBv2L9nhpsXYi3rSZnHc6IxEBfs9H3">[Download]</a></li><li>Head Fisrt PMP中文版 <a href="/program/book/Head%20Fisrt%20PMP%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li><li>代码简洁之道 <a href="/program/book/clean%20code-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93_%E4%B8%AD%E6%96%87%E5%AE%8C%E6%95%B4%E7%89%88-%E5%B8%A6%E4%B9%A6%E7%AD%BE.pdf">[Download]</a></li><li>架构整洁之道 <a href="https://drive.google.com/file/d/1uKLy8MdlLzC073OfH4zfF-bRwXQw04w-/oview?usp=sharing">[Download]</a></li><li>重构：改善既有代码的设计(第2版)  <a href="/program/book/%E9%87%8D%E6%9E%84%EF%BC%9A%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1(%E7%AC%AC2%E7%89%88).pdf">[Download]</a></li><li>《程序员修炼之道：从小工到专家》高清扫描版 <a href="https://pan.baidu.com/s/1rqECrAtQdBg3d_oQ7zYPGA">[Download]</a> 提取码：vjxt</li><li>程序员的自我修养–链接、装载与库(高清带完整书签版)  <a href="/program/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB--%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93(%E9%AB%98%E6%B8%85%E5%B8%A6%E5%AE%8C%E6%95%B4%E4%B9%A6%E7%AD%BE%E7%89%88).pdf">[Download]</a></li><li>程序之美系列套装（6册） <a href="/program/book/%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%BE%8E%E7%B3%BB%E5%88%97%E5%A5%97%E8%A3%85%EF%BC%886%E5%86%8C%EF%BC%89%E5%9B%A2%E9%98%9F%E4%B9%8B%E7%BE%8E%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B9%8B%E7%BE%8E%E3%80%81%E6%9E%B6%E6%9E%84%E4%B9%8B%E7%BE%8E%E3%80%81%E6%95%B0%E6%8D%AE%E4%B9%8B%E7%BE%8E%E3%80%81%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%BE%8E%E3%80%81%E5%AE%89%E5%85%A8%E4%B9%8B%E7%BE%8E.pdf">[Download]</a></li><li>计算机程序的构造和解释（SICP中文第2版) <a href="/program/book/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A%EF%BC%88SICP%E4%B8%AD%E6%96%87%E7%AC%AC2%E7%89%88%EF%BC%89.pdf">[Download]</a></li><li>SRE Google运维解密 <a href="/program/book/SRE%20Google%E8%BF%90%E7%BB%B4%E8%A7%A3%E5%AF%86.pdf">[Download]</a></li><li>凤凰项目：一个IT运维的传奇故事 <a href="/program/book/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%B8%80%E4%B8%AAIT%E8%BF%90%E7%BB%B4%E7%9A%84%E4%BC%A0%E5%A5%87%E6%95%85%E4%BA%8B.pdf">[Download]</a></li><li>BPF.Performance.Tools.2019.12 <a href="/program/book/BPF.Performance.Tools.2019.12.pdf">[Download]</a></li><li>Oreilly.Regular.Expressions.Cookbook.2nd.edition <a href="/program/book/Oreilly.Regular.Expressions.Cookbook.2nd.edition.pdf">[Download]</a></li><li>正则表达式必知必会(修订版) <a href="/program/book/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A(%E4%BF%AE%E8%AE%A2%E7%89%88).pdf">[Download]</a></li><li>精通正则表达式 <a href="/program/book/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.pdf">[Download]</a></li><li>正则表达式经典实例 <a href="/program/book/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B.pdf">[Download]</a></li><li>SQL基础知识第2版 <a href="/program/book/SQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%AC2%E7%89%88.zip">[Download]</a></li><li>MySQL经典50题 <a href="/program/book/MySQL%E7%BB%8F%E5%85%B850%E9%A2%98.pdf">[Download]</a></li><li>Head First SQL中文版 <a href="/program/book/Head%20First%20SQL%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li><li>SQL进阶教程 <a href="/program/book/SQL%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B.pdf">[Download]</a></li><li>MySQL资源合集 <a href="https://chegva.com/4181.html">[Download]</a></li><li>Head First PHP &amp; MySQL中文版 <a href="/program/book/Head%20First%20PHP%20&%20MySQL.pdf">[Download]</a></li><li>嗨翻C语言（Head_First_C_中文版) <a href="https://drive.google.com/file/d/18rcDg9sFCm2HB4ylWVJaW-f8qTLMaywf">[Download]</a></li><li>程序员内功修炼-V1.0 <a href="https://drive.google.com/file/d/1BWErWP1MBA-wEV_NT5VC0uKE-OjdAUdq/view?usp=sharing">[Download]</a></li><li>漫画算法：小灰的算法之旅 <a href="/program/book/%E6%BC%AB%E7%94%BB%E7%AE%97%E6%B3%95%EF%BC%9A%E5%B0%8F%E7%81%B0%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85.pdf">[Download]</a>·<a href="https://github.com/bjweimengshu">github</a></li><li>剑指Offer纪念版 <a href="/program/book/%E5%89%91%E6%8C%87Offer%E7%BA%AA%E5%BF%B5%E7%89%88.pdf.zip">[Download]</a></li><li>labuladong的算法小抄官方完整版 <a href="https://drive.google.com/file/d/17EJRjk5apM955tCpQyOcnh5i44PnSAvs/view?usp=sharing">[Download]</a></li><li>LeetCode刷题手册 <a href="/program/book/LeetCode%E5%88%B7%E9%A2%98%E6%89%8B%E5%86%8C.pdf">[Download]</a></li><li>LeetCode 101 - A LeetCode Grinding Guide (C++ Version) <a href="/program/book/LeetCode%20101%20-%20A%20LeetCode%20Grinding%20Guide%20(C++%20Version).pdf">[Download]</a></li><li>中文make(v3.80)手册 <a href="/program/book/%E4%B8%AD%E6%96%87make(v3.80)%E6%89%8B%E5%86%8C.pdf">[Download]</a></li><li>[GNU.Make.项目管理].Robert.Mecklenburg <a href="/program/book/%5BGNU.Make.%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%5D.Robert.Mecklenburg.pdf">[Download]</a></li><li><a href="https://chegva.com/5087.html">2017-2021美团技术年货合集</a>  ……</li></ul></li><li><p><a href="/network">[<strong>network</strong>]</a>：network learning</p><p>  Google drive：<a href="https://drive.google.com/drive/folders/1-eD8rG-EDj4qu4SNX5paa8OcgXB3Fp7c">https://drive.google.com/drive/folders/1-eD8rG-EDj4qu4SNX5paa8OcgXB3Fp7c</a></p><ul><li><p><strong>初级网络技术书籍</strong></p><ul><li>深入浅出Networking.pdf</li><li>网络是怎样连接的-[日]户根勤.pdf</li><li>B0050-图解网络-v2.0.pdf</li><li>计算机网络 自顶向下方法（第七版）中文版.pdf</li><li>TCP-IP详解卷一：协议.rar</li><li>CCNA学习指南第七版.zip</li><li>Cisco_ACL配置技术</li></ul></li><li><p><strong>中级网络技术书籍</strong></p><ul><li>CCNP路由交换教材</li><li>CISCO CATALYST局域网交换技术</li><li>局域网交换机安全.pdf</li><li>Cisco现场手册：Catalyst交换机配置（中文）.pdf</li><li>Cisco Press - CCIE Professional Development Routing TCP IP Volume 1 2nd Edition(2005).chm</li><li>CCNP Security Secure.pdf</li><li>Cisco.Press.LAN.Switch.Security.Sep.2007.eBook-BBL.rar</li></ul></li><li><p><strong>高级网络技术书籍</strong></p><ul><li>Cisco VPN 完全配置指南（中文）高清扫描版.pdf</li><li>MPLS技术架构 中文版 高清 带标签.7z</li><li>IP多播网络的设计与部署 第1卷.pdf</li><li>MPLS和VPN体系结构（第2卷）.pdf</li><li>MPLS和VPN体系结构CCIP版-卷一.pdf</li><li>TCP_IP路由技术第2卷中文版.rar</li><li>Cisco - IPSec VPN Design(2005).chm</li><li>Cisco OSPF命令与配置手册（中文）.pdf</li><li>Cisco.Press.CCIE.Professional.Development.Routing.TCP.IP.Volume.II.chm</li><li>ASA试验（一）.pdf</li><li>ASA试验（二）.pdf</li><li>ASA试验（三）.pdf</li><li>域间组播路由.chm</li><li>QoS技术白皮书.pdf</li><li>组播技术白皮书.pdf</li><li>QoS技术介绍.pdf</li></ul></li><li><p><strong>网络协议分析</strong></p><ul><li><a href="https://pan.baidu.com/s/1vdAJHYyzVnGQPQKvLgvI7g">网络数据包分析从入门到精通</a>，提取码: tlbi</li><li>网络协议报文格式大全(V1.0).chm</li><li>OSI七层网络协议详细图解.png</li><li>1.协议栈介绍图解.zip</li><li>2.Ethernet协议图解.zip</li><li>3.ARP协议图解.zip</li><li>4.IP协议图解.zip</li><li>5.ICMP协议图解.zip</li><li>6.UDP协议图解.zip</li><li>7.DHCP协议图解.zip</li><li>8.DNS协议图解.zip</li><li>9.TCP协议图解.zip</li></ul></li><li><p><strong>网络工程实战</strong></p><ul><li><p><a href="https://chegva.com/1128.html">CCNA完全配置宝典</a></p></li><li><p><a href="http://ccietea.com/">CCIE网络工程师成长之路</a>,朱sir网络教程视频全集(链接:<a href="https://pan.baidu.com/s/1qVfQPxJuxlB5xWS1yiPkcg">https://pan.baidu.com/s/1qVfQPxJuxlB5xWS1yiPkcg</a>  密码:2fh6)</p></li><li><p><a href="https://pan.baidu.com/s/1rOBzhQPLNPGU8ZMjGRSC5A">网络安全学习资料</a>，提取码：i2er</p></li><li><p>网络工程实战项目视频教程（含3个综合项目部署）</p><p>  ……</p></li></ul></li></ul></li><li><p><a href="/system">[<strong>system</strong>]</a>：system learning</p><p>  Google drive：<a href="https://drive.google.com/drive/folders/1w9w2vcRbGoJxHicTs4JafikA9j5SlIjP">https://drive.google.com/drive/folders/1w9w2vcRbGoJxHicTs4JafikA9j5SlIjP</a></p><p>  百度网盘：<a href="https://pan.baidu.com/s/1LKEwSfBjiqkIs87NCsZVPA">https://pan.baidu.com/s/1LKEwSfBjiqkIs87NCsZVPA</a></p><ul><li>《穿越计算机的迷雾》</li><li>《计算机的心智：操作系统之哲学原理》</li><li>编码：隐匿在计算机软硬件背后的语言（美.佩措尔德）</li><li>《码农翻身：用故事给技术加点料》</li><li>computer-basic</li><li>cxuan-os-修改</li><li>深入理解计算机系统（原书第三版3）</li><li>现代操作系统原书第4版</li><li>UNIX Systems for Modern Architecture</li><li>the_design_of_the_unix_operating_system</li><li>Linux内核设计的艺术_图解Linux操作系统架构设计与实现原理</li><li>Linux内核源代码情景分析上下册带目录</li><li>深入Linux设备驱动程序内核机制</li><li>Linux设备驱动程序(中文版第三版)</li><li>深入理解Linux内核第3版+英文版</li><li>深入理解linux内核中文第三版</li><li>CPU源代码分析与芯片设计及Linux移植</li><li>莱昂氏UNIX源代码分析（全本）</li><li>Linux-UNIX系统编程手册（上、下册）</li><li>UNIX环境高级编程 第3版</li><li>UNIX编程艺术（中文）</li><li>多处理器编程的艺术</li><li>Linux-Unix_Socket_Guide</li><li>Debug.Hacks中文版_深入调试的技术和工具</li><li>Understanding_the_linux_virtual_memory_manager</li><li>Linux_Kernel_Delay_Write</li><li>A_Directory_Index_for_Ext2</li><li>Linux网络编程</li><li>UNIX网络编程+第1卷：套接字API</li><li>Unix网络编程 第2卷：进程间的通信</li><li>[深入理解Linux网络技术内幕].(ChristianBenvenuti).夏安等.扫描版</li><li>《深入理解Linux网络技术内幕》英文版</li><li>Linux_performance</li><li>性能之巅(洞悉系统、企业与云计算)</li><li>BPF.Performance.Tools.2019.12</li><li>Site Reliability Engineering</li><li>AppleScript初学者(中文版)</li><li>AppleScriptLanguageGuide</li><li>AppleScript: A Beginner’s Guide</li><li>AppleScript权威指南</li><li>Mac OS X for Unix Geeks</li><li>《深入解析 MAC OS X &amp; IOS 操作系统》  ……</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Good-Good-study，Day-Day-up&quot;&gt;&lt;a href=&quot;#Good-Good-study，Day-Day-up&quot; class=&quot;headerlink&quot; title=&quot;Good Good study，Day Day up!&quot;&gt;&lt;/a&gt;Good Good study，Day Day up!&lt;/h2&gt;&lt;p&gt;git上找到的数据笔记大全&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Go Lang Pro</title>
    <link href="http://example.com/2022/04/19/Go-Lang-Pro/"/>
    <id>http://example.com/2022/04/19/Go-Lang-Pro/</id>
    <published>2022-04-19T16:59:00.000Z</published>
    <updated>2025-03-01T12:26:37.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-Lang-Pro"><a href="#GO-Lang-Pro" class="headerlink" title="GO Lang Pro"></a>GO Lang Pro</h1><span id="more"></span><h1 id="延迟执行-defer-虽迟但到"><a href="#延迟执行-defer-虽迟但到" class="headerlink" title="延迟执行 defer (虽迟但到)"></a>延迟执行 defer (虽迟但到)</h1><blockquote><p>之前的代码处理错误都是简单的打印<code>log.Fatal()</code>，但是有些情况是必须要处理错误问题的，比如读取文件出错需要关闭文件流等</p><p>这时候就需要我们延迟方法返回执行完错误处理再返回</p><p>go提供了<code>defer</code>关键字，在普通方法或者函数调用前加上go会推迟执行，但是必定执行，即使方法调用了return，被<code>defer</code>修饰的语句还是执行</p><p>如下代码，即使return了返回错误还是会执行defer修饰的语句，输出<code>GoodBye</code></p><p>注意！ <code>defer</code>只能修饰方法或者函数调用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Socialize()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Socialize</span><span class="params">()</span><span class="title">error</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;GoodBye&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;I don&#x27;t want to talk&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="错误恢复以及处理"><a href="#错误恢复以及处理" class="headerlink" title="错误恢复以及处理"></a>错误恢复以及处理</h1><blockquote><p>这里以递归为例</p><p>GO的递归没给什么特别的关键字或者语法糖，和其他语言一样用就行了</p></blockquote><h2 id="打印目录树"><a href="#打印目录树" class="headerlink" title="打印目录树"></a>打印目录树</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">PrintFireTree(<span class="string">&quot;/home/tr/go/src&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintFireTree</span><span class="params">(dirPath <span class="keyword">string</span>)</span><span class="title">error</span></span>&#123;</span><br><span class="line">files,err := ioutil.ReadDir(dirPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,file := <span class="keyword">range</span> files&#123;</span><br><span class="line"><span class="keyword">if</span> !file.IsDir()&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;  &quot;</span>+file.Name())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 可以直接用+拼接 也可以用path/filepath的join方法</span></span><br><span class="line">fmt.Println(<span class="string">&quot;printing dir:&quot;</span>,dirPath+<span class="string">&quot;/&quot;</span>+file.Name())</span><br><span class="line">err :=PrintFireTree(dirPath+<span class="string">&quot;/&quot;</span>+file.Name())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理和恢复"><a href="#错误处理和恢复" class="headerlink" title="错误处理和恢复"></a>错误处理和恢复</h2><blockquote><p>就如同上面那个递归一样，方法返回了error信息，每次调用都需要处理error信息，这样比较复杂，我们可以用更简洁的方式：<code>panic</code>和<code>recover</code></p><p>手动生成一个panic错误 <code>panic(&quot;program going down&quot;)</code></p><p>如同其他语言一样，go在出错的时候也提供了一个<code>stack trace</code>用于回溯出错的所有点</p><p><code>panic()</code> 只能用于程序bug的时候，不能因为用户输入错误数据终止程序</p><p><code>panic()</code>执行的时候会停止程序，输出错误栈，但是如果用户调用了<code>recover()</code>，那么<code>panic()</code>就只会打印错误消息</p><p>要注意的是：一个方法内执行了<code>panic()</code>再执行<code>recover()</code>是无效的，因为recover只能在panic中执行，如果panic执行完了，那么轮不到revocer程序就终止了，所以要将<code>recover()</code>方法放入一个函数，使用<code>defer</code>修饰的函数，如例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;running&quot;</span>)</span><br><span class="line">Stop()</span><br><span class="line">fmt.Println(<span class="string">&quot;running&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 如果发生了panic，执行恢复操作</span></span><br><span class="line"><span class="keyword">defer</span> DoRec()</span><br><span class="line">fmt.Println(<span class="string">&quot;paniced&quot;</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;stopping program&quot;</span>)</span><br><span class="line"><span class="comment">// panic发生后的所有方法都不再执行</span></span><br><span class="line">fmt.Println(<span class="string">&quot;after pannic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoRec</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// fmt.Println(recover()) 可以打印panic的值</span></span><br><span class="line">    <span class="built_in">recover</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样可以改造我们之前的打印目录树的程序，将里面的error去掉，修改为panic，将error丢入panic：<code>panic(err)</code>，随后恢复和报告错误</p><p>也同样适用于其他任何程序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reportPanic</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 若在panic时传入了一个error</span></span><br><span class="line">  errInterface := <span class="built_in">recover</span>()</span><br><span class="line">  <span class="keyword">if</span> errInterface == <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  err,ok = errInterface.(error)</span><br><span class="line">  <span class="keyword">if</span> ok&#123;</span><br><span class="line">  fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="recover的问题"><a href="#recover的问题" class="headerlink" title="recover的问题"></a>recover的问题</h2><blockquote><p>recover 会从panic状态中恢复过来，但是recover会恢复任何panic，这就会导致问题</p><p>recover会返回panic的值，那么我们可以判断这个值是不是一个error或者其他我们定义的，如果决定不恢复可以增加一个<code>panic()</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reportPanic</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 若在panic时传入了一个error</span></span><br><span class="line">  errInterface := <span class="built_in">recover</span>()</span><br><span class="line">  <span class="keyword">if</span> errInterface == <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  err,ok = errInterface.(error)</span><br><span class="line">  <span class="keyword">if</span> ok&#123;</span><br><span class="line">  fmt.Println(err)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 说明传递的不是error类型，不处理就继续panic吧</span></span><br><span class="line">    <span class="built_in">panic</span>(errInterface)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GO-并发执行"><a href="#GO-并发执行" class="headerlink" title="GO 并发执行"></a>GO 并发执行</h1><blockquote><p>GO 并发执行，或许在web应用中最为常见，所以书上举例了web，这里同样</p></blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote><p>go的 <code>net/http</code> 库提供了http请求用于发送和请求http报文数据</p><p><code>http.Get</code>：发送Get请求</p><p><code>http.Response</code>：结构体响应</p><p>以下是一个请求多次的程序，顺序执行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseSize</span><span class="params">(url <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">response,err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后一定要关闭网络连接</span></span><br><span class="line"><span class="keyword">defer</span> response.Body.Close()</span><br><span class="line"><span class="comment">// 读取响应数据</span></span><br><span class="line">body,err := ioutil.ReadAll(response.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(body) body是一个slice存储了十进制数，需要手动转为其他类型</span></span><br><span class="line"><span class="comment">// fmt.Println(string(body)) // 这样就输出了一个html文档</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发-goroutines"><a href="#并发-goroutines" class="headerlink" title="并发 goroutines"></a>并发 goroutines</h2><blockquote><p>上面的代码顺序请求，go提供了并发执行的方式，其实类似java的线程</p><p>只需要使用<code>go</code>：<code>go myFunction()</code> 只能用于方法调用，作用相当于开启了一个线程</p><p>go认为主方法就是一个<code>goroutine</code>，当主方法的<code>goroutine</code>结束，进程就退出了，所以即使有其他的<code>go routine</code>在执行，一旦main的结束了就会退出</p><p>所以要等待其他<code>goroutine</code>执行完毕：<code>channel</code></p><p>以下代码是修改后的结果，这里暂时不用channel</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line"><span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line"><span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line"><span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span>*time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseSize</span><span class="params">(url <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">response,err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">body,err := ioutil.ReadAll(response.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这并行执行的时候并不保证谁是优先的，需要用channel控制</p><p><code>go &lt;func&gt;</code>不可以配合<code>return</code></p></blockquote><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><blockquote><p>可以用于<code>goruntine</code>的控制，传递参数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChannel <span class="keyword">chan</span> <span class="keyword">float64</span></span><br><span class="line">myChannel = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">float64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">myChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">float64</span>)</span><br></pre></td></tr></table></figure><blockquote><p>赋值：<code>myChannel &lt;- 3.14</code></p><p>取值：<code>&lt;-myChannel</code></p><p>取值和赋值是同步的一个操作，一次赋值对应一次取值，如果没有一次赋值，执行取值会阻塞直到下次赋值,简单的例子</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">(myChannel <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">  myChannel &lt;- <span class="string">&quot;hi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  myChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">  <span class="keyword">go</span> greeting(myChannel)</span><br><span class="line">  fmt.Println(&lt;-myChannel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用channel 完成进程间的同步：当一个线程<code>X</code>生成了一个<code>channel</code>，将他传递给其他线程时，其他线程每次执行赋值操作，都需要<code>X</code>线程运行才能继续执行，如果<code>X</code>此时阻塞，被传递的线程也陷入阻塞态</p><p>使用channel 同步的例子</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">size := <span class="built_in">make</span>(<span class="keyword">chan</span> Page)</span><br><span class="line"><span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>,size)</span><br><span class="line"><span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://baidu.com&quot;</span>,size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程直接执行到这里，但是会在第一个 &lt;-size 这里阻塞,直到size被执行了一次赋值</span></span><br><span class="line">fmt.Println(&lt;-size)</span><br><span class="line">fmt.Println(&lt;-size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// channel 可以接收struct类型</span></span><br><span class="line"><span class="keyword">type</span> Page <span class="keyword">struct</span>&#123;</span><br><span class="line">Url <span class="keyword">string</span></span><br><span class="line">Size <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseSize</span><span class="params">(url <span class="keyword">string</span>,channel <span class="keyword">chan</span> Page)</span></span>&#123;</span><br><span class="line">response,err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">body,err := ioutil.ReadAll(response.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">p := Page&#123;Url:url,Size:<span class="built_in">len</span>(body)&#125;</span><br><span class="line">channel &lt;- p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h2><blockquote><p>目前所有的channel都是<code>unbuffered</code>类型，即子线程send数据给channel后立即阻塞，直到这个channel的内容被取出</p><p><code>buffered channel</code>意思是，可以先往channel放一部分数据<br><code>channel := make(chan string,5) // 这个channel可以放五个数据</code>且缓存的数据实际是队列模式，其他线程取数据每次都取最早放入的数据，先进先出</p><p>这时候<code>channel &lt;- &quot;a&quot;</code> 不会阻塞子线程，直到执行了5次后channel满了才阻塞，这样就可以用来编写一个生产者消费者</p><p>同时为了防止主线程直接结束，主线程需要等子线程传递来消息才结束</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start test&quot;</span>)</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 表示两个子线程都结束的chan，每个线程结束的时候往里面写一个数据</span></span><br><span class="line">endChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> producer(channel, endChan)</span><br><span class="line"><span class="keyword">go</span> consumer(channel, endChan)</span><br><span class="line">fmt.Println(&lt;-endChan, &lt;-endChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(channel <span class="keyword">chan</span> <span class="keyword">string</span>, endChan <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;producer made product&quot;</span>)</span><br><span class="line">channel &lt;- fmt.Sprint(<span class="string">&quot;product&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 线程结束，给主线程一个消息 因为endChan容量是2所以两个线程都写了主线程才能读取</span></span><br><span class="line">endChan &lt;- <span class="string">&quot;producer end&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(channel <span class="keyword">chan</span> <span class="keyword">string</span>, endChan <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">6</span>)</span><br><span class="line">product := &lt;-channel</span><br><span class="line">fmt.Println(product, <span class="string">&quot;consumed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">endChan &lt;- <span class="string">&quot;consumer end&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GO-的自动化测试"><a href="#GO-的自动化测试" class="headerlink" title="GO 的自动化测试"></a>GO 的自动化测试</h1><blockquote><p>在给程序新增功能后，需要测试老的以往的功能是否正常，可以使用go提供的自动测试工具</p><p>假设有以下代码，用于英语环境下的连续物件<code>... , ... and ..</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">phrases := []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pie&quot;</span>&#125;</span><br><span class="line">fmt.Println(JoinWithCommas(phrases))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JoinWithCommas</span><span class="params">(phrases []<span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line">result := strings.Join(phrases[:<span class="built_in">len</span>(phrases)<span class="number">-1</span>],<span class="string">&quot;, &quot;</span>)</span><br><span class="line">result += <span class="string">&quot; and &quot;</span> + phrases[<span class="built_in">len</span>(phrases)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在新增功能之前，我们可以开始编写自动测试了，提供一组输入和输出，如果代码的结果不匹配则<code>fail</code></p><p>自动文件的命名规则，如果主文件是<code>join.go</code>那么测试文件：<code>join_test.go</code></p><p>测试文件不一定要和被测文件一个包，但要是想测的东西是私有的，那么只能在一个包下</p><p>测试方法名必须<code>Test</code>开头</p><p>执行测试文件：<code>go test ...</code> 被测文件必须包含<code>_test.go</code>否则无法找到</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种是推荐的模板</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTwoElements</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="comment">//t.Error(&quot;no test yet&quot;)</span></span><br><span class="line">list := []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line">want := <span class="string">&quot;apple and orange&quot;</span></span><br><span class="line">got := JoinWithCommas(list)</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Error(errorString(list,got,want))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMoreElements</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">list := []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pear&quot;</span>&#125;</span><br><span class="line">want := <span class="string">&quot;apple, orange, and pear&quot;</span></span><br><span class="line">got := JoinWithCommas(list)</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Error(errorString(list,got,want))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为不是Test开头的，所以不会执行测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorString</span><span class="params">(list []<span class="keyword">string</span>,got <span class="keyword">string</span>,want <span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;JoinWithCommas(%#v) = \&quot;%s\&quot;, want \&quot;%s\&quot;&quot;</span>,list,got,want)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是文件结构 <code>go test join</code> 自动去<code>~/go/src</code>下面找<code>join</code>包，执行里面的<code>Test</code>开头的方法</p></blockquote><p><img src="/images/pasted-183.png" alt="upload successful"></p><blockquote><p>默认的<code>go test &lt;...&gt;</code>会测试全部，可以添加配置测试部分</p><p><code>go test &lt;...&gt; -v</code> : 查看测试详情</p><p><code>go test &lt;...&gt; -run Two</code>：测试名字里面带<code>Two</code>的方法</p></blockquote><h2 id="表格驱动测试"><a href="#表格驱动测试" class="headerlink" title="表格驱动测试"></a>表格驱动测试</h2><blockquote><p>测试的很多代码是重复的，我们可以生成一个表格，输入数据和期望数据的表格</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> testData <span class="keyword">struct</span>&#123;</span><br><span class="line">list []<span class="keyword">string</span></span><br><span class="line">want <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种是推荐的模板</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJoinWithCommas</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">testList := []testData&#123;</span><br><span class="line">&#123;list:[]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>&#125;,want:<span class="string">&quot; and apple&quot;</span>&#125;,</span><br><span class="line">&#123;list:[]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>&#125;,want:<span class="string">&quot;apple and orange&quot;</span>&#125;,</span><br><span class="line">&#123;list:[]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pear&quot;</span>&#125;,want:<span class="string">&quot;apple, orange, and pear&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,test := <span class="keyword">range</span> testList&#123;</span><br><span class="line">got := JoinWithCommas(test.list)</span><br><span class="line"><span class="keyword">if</span> got != test.want &#123;</span><br><span class="line">t.Error(errorString(test.list,got,test.want))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为不是Test开头的，所以不会执行测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorString</span><span class="params">(list []<span class="keyword">string</span>,got <span class="keyword">string</span>,want <span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;JoinWithCommas(%#v) = \&quot;%s\&quot;, want \&quot;%s\&quot;&quot;</span>,list,got,want)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GO-函数传递"><a href="#GO-函数传递" class="headerlink" title="GO 函数传递"></a>GO 函数传递</h1><blockquote><p>GO 支持<code>first-class</code>函数，可以用于函数间传递，所谓<code>first-class</code>函数，意思是go的函数是可以被赋值给变量，由变量调用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">h := sayHi</span><br><span class="line">h()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi from tr&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义函数接口 传递函数作为参数，函数作为参数的时候不用预先声明</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">double(sayHi)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi from tr&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">double</span><span class="params">(hi <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">hi()</span><br><span class="line">hi()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数作为参数传递的时候，作为参数的这个函数格式必须符合定义的入参的函数的格式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="keyword">var</span> s2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line">s1 = sayHello <span class="comment">// 换过来赋值就是错的</span></span><br><span class="line">s2 = sayHi</span><br><span class="line">s1()</span><br><span class="line">s2(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h1 id="GO-的web（请求响应）"><a href="#GO-的web（请求响应）" class="headerlink" title="GO 的web（请求响应）"></a>GO 的web（请求响应）</h1><blockquote><p>这章节其实主要讲的是<code>net/http</code>包提供的响应<code>http</code>请求的内容</p><p>先简要概述下服务器软件的作用，首先客户端通过url和端口的方式访问物理机，物理机接收tcp或者udp报文（内部是http报文），将报文拆解后交给对应端口的服务器程序，程序收到http报文，可以看到报文头的访问路径<code>/hello</code>，找到对应的处理方法处理请求后封装http报文交给网络的下一次发出</p><p>这章能感受到作为后端服务，go比Java强的地方，Java相比太过笨重，从JavaEE到Spring生态，开发web是比较重的任务，go则更轻量快速，运行效率更高</p><p>先从一个简单的web应用开始</p></blockquote><h2 id="simple-web-app"><a href="#simple-web-app" class="headerlink" title="simple web app"></a>simple web app</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// url 对应的处理器 类似java的controller</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(writer http.ResponseWriter,request *http.Request)</span></span>&#123;</span><br><span class="line">message :=[]<span class="keyword">byte</span>(<span class="string">&quot;Hello from web powered by go!&quot;</span>)</span><br><span class="line">_,err := writer.Write(message)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/hello&quot;</span>,viewHandler)</span><br><span class="line">    <span class="comment">// nil 是因为已经调用HandleFunc，给了一个处理方法了</span></span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合html页面"><a href="#结合html页面" class="headerlink" title="结合html页面"></a>结合html页面</h2><blockquote><p>用Go来返回html页面，我觉得还是前后端分离更好，单纯用Go的高效性能负责后端请求处理</p><p>Go提供了template模板，读取html文件内容，插入我们的动态内容返回给客户端</p><p>模板内需要插入的数据用<code>&#123;&#123;&#125;&#125;`来标识，称为一个`action`>> `&#123;&#123;.&#125;&#125;</code> 插入任何数据都会显示</p><p><code>&#123;&#123;if .&#125;&#125; 内容 &#123;&#123;end&#125;&#125;</code> 只有传递的数据为true才显示内容</p><p><code>&#123;&#123;range .&#125;&#125; 内容 &#123;&#123;.&#125;&#125; 其他内容 &#123;&#123;end&#125;&#125;</code> 传递一个slice，会遍历slice显示这段模板内容，将单个数据插入</p><p><code>&#123;&#123;.Name&#125;&#125;</code> 传递一个结构体，显示结构体的Name属性</p><p>注意：引入的包需要是 <code>html/template</code> 而不是<code>text/template</code>后者会显示任何东西即使是一段js代码</p><p>guestbook.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/guestbook&quot;</span>, ViewHandler)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/guestbook/new&quot;</span>, NewHandler)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/guestbook/add&quot;</span>, AddHandler)</span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">Check(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Guestbook <span class="keyword">struct</span> &#123;</span><br><span class="line">SignaureCount <span class="keyword">int</span></span><br><span class="line">Signatures    []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ViewHandler</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取本地签名文件内容</span></span><br><span class="line">signatures := GetStrings(<span class="string">&quot;signatures.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 将签名放入结构体</span></span><br><span class="line">guestbook := Guestbook&#123;</span><br><span class="line">SignaureCount: <span class="built_in">len</span>(signatures),</span><br><span class="line">Signatures:    signatures,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html, err := template.ParseFiles(<span class="string">&quot;view.html&quot;</span>)</span><br><span class="line">Check(err)</span><br><span class="line"><span class="comment">// html.Execute查看doc会发现接收的第一个参数是一个接口，之后会调用接口的write方法</span></span><br><span class="line"><span class="comment">// 第二个参数是插入模板的数据 这里放入我们的签名结构体</span></span><br><span class="line">err = html.Execute(writer, guestbook)</span><br><span class="line">Check(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(writer http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">htmlTemplate, err := template.ParseFiles(<span class="string">&quot;new.html&quot;</span>)</span><br><span class="line">Check(err)</span><br><span class="line"><span class="comment">// 单单返回new.html 不给页面插入参数</span></span><br><span class="line">err = htmlTemplate.Execute(writer, <span class="literal">nil</span>)</span><br><span class="line">Check(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddHandler</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 从request获取post数据</span></span><br><span class="line">signature := request.FormValue(<span class="string">&quot;signature&quot;</span>)</span><br><span class="line"><span class="comment">// 保存到本地文件 这个表示以只写，追加模式打开文件，若无则创建</span></span><br><span class="line"><span class="comment">// go doc os O_WRONLY 查看具体信息</span></span><br><span class="line">options := os.O_WRONLY | os.O_APPEND | os.O_CREATE</span><br><span class="line"><span class="comment">// 创建文件的时候给个权限</span></span><br><span class="line">file, err := os.OpenFile(<span class="string">&quot;signatures.txt&quot;</span>, options, os.FileMode(<span class="number">0600</span>))</span><br><span class="line">Check(err)</span><br><span class="line"><span class="comment">// write data to file</span></span><br><span class="line">_, err = fmt.Fprintln(file, signature)</span><br><span class="line">Check(err)</span><br><span class="line">err = file.Close()</span><br><span class="line">Check(err)</span><br><span class="line"><span class="comment">// 重定向到展示页面 req,resp 参数，重定向的地址，返回的状态码(302 找到)</span></span><br><span class="line">http.Redirect(writer, request, <span class="string">&quot;/guestbook&quot;</span>, http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStrings</span><span class="params">(fileName <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lines []<span class="keyword">string</span></span><br><span class="line">file, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">Check(err)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">lines = <span class="built_in">append</span>(lines, scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">Check(scanner.Err())</span><br><span class="line"><span class="keyword">return</span> lines</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两个html页面，一个展示，一个带个form用于新增</p><p>view.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Guest Book<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;.SignaureCount&#125;&#125; total signatures</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/guestbook/new&quot;</span>&gt;</span>Add ur new signature<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;range .Signatures&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123;end&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>new.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>add signature<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/guestbook/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;signature&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;signature&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>数据就存储在本地的文件内：<code>signatures.txt</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tr</span><br><span class="line">oth</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GO-Lang-Pro&quot;&gt;&lt;a href=&quot;#GO-Lang-Pro&quot; class=&quot;headerlink&quot; title=&quot;GO Lang Pro&quot;&gt;&lt;/a&gt;GO Lang Pro&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Lang Basic</title>
    <link href="http://example.com/2022/04/12/Go-Lang/"/>
    <id>http://example.com/2022/04/12/Go-Lang/</id>
    <published>2022-04-12T09:26:00.000Z</published>
    <updated>2025-03-01T12:26:37.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h2><span id="more"></span><blockquote><p>go语言学习，记录《Head First Go》的学习内容</p><p>前面几十页都在讲怎么更好的学习……</p><p>编译最快，运行效率最高，便捷分发任务，多线程效率高</p><p>07年google开始立项GO语言，因为每次测试新功能就要编译老版本，编译至少要一小时,所以开发全新的语言，快，不冗余，gc回收，好写多线程，支持多核cpu的语言。</p></blockquote><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><blockquote><p>package: go使用package来管理同一项目的所有文件，使用 package main作为主程序的入口，且方法名得是main作为入口代码</p><p>import: go文件里想要使用其他文件内定义的方法需要使用import,import 包名，这样比起引用整个依赖库更灵活轻量，如果import的包没有被使用过，编译不通过</p><p>标准的go文件布局：</p><ul><li><p>package <code>&lt;name&gt;</code></p></li><li><p>import <code>&quot;&lt;name&gt;&quot;</code></p></li><li><p>actual code : 一般都是由各个方法组成的</p></li></ul><p>可以用 <code>;</code>结尾 随意，以下代码可以 <code>go fmt</code>格式化，<code>go run hello.go</code>执行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;hello go from tr&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>import 的另一种形式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//import &quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;math&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">//fmt.Println(&quot;hello go from tr&quot;,&quot;!&quot;)</span></span><br><span class="line"> math.Floor(<span class="number">2.75</span>)</span><br><span class="line"> strings.Title(<span class="string">&quot;head first go&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>import 导入的实际是包的路径，包名不一定需要等于路径名，例如这里，rand包路径在<code>math/rand</code>下，且包名是rand,所以调用方法是<code>rand.Intn(100)</code>生成随机数，通常情况下包路径的最后一段就和包名同名</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import &quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>转义符 这个不多说，有意思的是fmt.Print方法里面传入转义符或者其他字符<code>&#39;</code>单引号为单字符，会输出这些字符的原始unicode编码</p><p>true &amp; false</p><p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>==</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> 都和其他语言一样来，返回<code>true/flase</code></p><p>go提供了查看数据类型的工具如下：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="number">42</span>)) <span class="comment">// int</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="number">3.14</span>)) <span class="comment">//float64</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="literal">true</span>)) <span class="comment">//bool</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="string">&quot;hello,go&quot;</span>)) <span class="comment">//string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go的变量定义和声明"><a href="#go的变量定义和声明" class="headerlink" title="go的变量定义和声明"></a>go的变量定义和声明</h3><blockquote><p>go的变量有很多</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int8</span></span><br><span class="line"><span class="keyword">int16</span></span><br><span class="line"><span class="keyword">int32</span></span><br><span class="line"><span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">unit: 和<span class="keyword">int</span>一样 只不过只能存储正数，所以占用空间少一半</span><br><span class="line">unit8</span><br><span class="line">unit16</span><br><span class="line">unit32</span><br><span class="line">unit64</span><br><span class="line"></span><br><span class="line"><span class="keyword">float32</span> :除了<span class="keyword">float64</span>还有<span class="number">32</span>位的版本</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> quantity = <span class="number">4</span> <span class="comment">//可以忽略int</span></span><br><span class="line"> <span class="keyword">var</span> length,width <span class="keyword">float64</span> = <span class="number">1.2</span>，<span class="number">2.4</span></span><br><span class="line"> <span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"> fmt.Println(quantity) <span class="comment">// 初始化都是0</span></span><br><span class="line"> fmt.Println(length)</span><br><span class="line"> fmt.Println(width)</span><br><span class="line"> fmt.Println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义可以简写 <code>:=</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">//var quantity int = 12</span></span><br><span class="line"> <span class="comment">//var length,width float64 = 1.1,1.2</span></span><br><span class="line"> <span class="comment">//var name string = &quot;test&quot;</span></span><br><span class="line"> <span class="comment">// 简写形式</span></span><br><span class="line"> quantity := <span class="number">12</span></span><br><span class="line"> length, width := <span class="number">1.1</span>, <span class="number">1.2</span></span><br><span class="line"> name := <span class="string">&quot;tr&quot;</span></span><br><span class="line"> fmt.Println(quantity)</span><br><span class="line"> fmt.Println(length)</span><br><span class="line"> fmt.Println(width)</span><br><span class="line"> fmt.Println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>go的命名规则</p><ul><li>变量/方法若以大写字母开头，则被认为是暴露出去的，其他包文件可以访问，反之是私有的只有包内的文件可以访问</li><li>不能以数字开头</li><li>遵循驼峰法</li></ul><p>注意：数学操作或者比较都需要输入的类型为同一类型，举例int和float64的不能做乘除，需要做转换<code>float64(变量)</code>，如果是float64转int，小数会被截掉</p><p>go的if判断也和其他语言一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &amp;&amp; <span class="literal">true</span> &#123;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> !<span class="literal">true</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="go-的cli工具"><a href="#go-的cli工具" class="headerlink" title="go 的cli工具"></a>go 的cli工具</h3><blockquote><p>go是这么编译的 一个大概流程</p></blockquote><p><img src="/images/pasted-174.png" alt="upload successful"></p><blockquote><p>go build ： 编译，可以发给其他人执行<br>go run ： 编译执行，不输出编译结果文件<br>go fmt ：格式化<br>go version<br>go install <code>&lt;文件夹的名字&gt;</code>：需要文件夹内有go代码和src目录，且go代码处于main包下，才能在bin文件夹下生成可执行文件<br>go get ：想要导入其他人的包就需要用这个，在后面会学到导入其他人的包的组织方式，社区的代码托管在github上，可以通过go get获取，将自动下载到工作区的src下 例子：<code>go get github.com/headfirstgo/greeting</code><br>go doc ：导入了他人的包后想要使用，go doc可以查看说明,比如，<code>go doc strconv</code>查看包，<code>go doc strconv ParseFloat</code>查看包内方法</p></blockquote><h3 id="方法调用-时间-字符"><a href="#方法调用-时间-字符" class="headerlink" title="方法调用 时间 字符"></a>方法调用 时间 字符</h3><blockquote><p>有意思的是 go可以返回多个值，go规定定义的变量必须要被用到，所以如果返回的多个值有不需要的，可以用下划线<code>_</code>代表废弃<code>name,_ := reader.ReadString()</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// 时间调用</span></span><br><span class="line"> <span class="keyword">var</span> now time.Time = time.Now()</span><br><span class="line"> fmt.Println(now.Year())</span><br><span class="line"> <span class="comment">// 字符调用</span></span><br><span class="line"></span><br><span class="line"> broken := <span class="string">&quot;G# r#cks&quot;</span></span><br><span class="line"> replacer := strings.NewReplacer(<span class="string">&quot;#&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line"> fixed := replacer.Replace(broken)</span><br><span class="line"> fmt.Println(fixed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GO-在if中初始化"><a href="#GO-在if中初始化" class="headerlink" title="GO 在if中初始化"></a>GO 在if中初始化</h3><blockquote><p><code>err := myFunc()</code> 错误时常会有，有的时候我们会忘记<code>err</code>的定义是否要加上<code>:</code>，但是实际上<code>err</code>很快只用来if判断是否出错，随后就不在使用，这时我们可以在if中直接初始化<code>err</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err:=myFunc(); err!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GO-的switch"><a href="#GO-的switch" class="headerlink" title="GO 的switch"></a>GO 的switch</h3><blockquote><p>switch 自动加上break，如果要继续往下，加上<code>fallthrough</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">val := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> val &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GO-字符"><a href="#GO-字符" class="headerlink" title="GO 字符"></a>GO 字符</h3><blockquote><p>GO 使用<code>utf8</code>编码，当我们使用<code>len(myStr)</code>的时候，返回的是字符串的字节数，而不是字符个数，需要反映字符个数用：<code>utf8.RuneCountInString(myStr)</code></p><p>如果想要处理字符串，处理里面的单个字符，GO提供了字符串到字符slice的转换</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strRunes := []<span class="keyword">rune</span>(myStr) <span class="comment">// 字符串转slice</span></span><br><span class="line">str := <span class="keyword">string</span>(strRunes) <span class="comment">// slice 转字符串</span></span><br></pre></td></tr></table></figure><blockquote><p>用for遍历字符串</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> position,c := <span class="keyword">range</span> myStr&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误处理-用户输入"><a href="#错误处理-用户输入" class="headerlink" title="错误处理 用户输入"></a>错误处理 用户输入</h3><blockquote><p>go的方法都会返回一个error，如果有错，这个值不为<code>Nil</code>，且提供了日志<code>log</code>让我们用来输出</p><p>注意的是这里的err不能定义为error，因为有系统类型error，如果手动定义了error会遮盖系统的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户输入和判断</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Print(<span class="string">&quot;Enter a grade: &quot;</span>)</span><br><span class="line"> reader := bufio.NewReader(os.Stdin)</span><br><span class="line"> <span class="comment">// input,_ := reader.ReadString(&#x27;\n&#x27;) 使用blank identifier忽视错误</span></span><br><span class="line"> input,err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)  <span class="comment">// 接收错误</span></span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> file,err := os.Open(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> scanner := bufio.NewScanner(file)</span><br><span class="line"> <span class="keyword">for</span> scanner.Scan()&#123;</span><br><span class="line">  fmt.Println(scanner.Text())</span><br><span class="line"> &#125;</span><br><span class="line">    err = file.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">if</span> scanner.Err() != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(scanner.Err())</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="返回异常"><a href="#返回异常" class="headerlink" title="返回异常"></a>返回异常</h3><blockquote><p>go的存在返回多个值的特性，所以一个方法如果执行参数有问题，可以返回error类型的参数，通过调用error包的New方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;errors&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> sayHi()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, calc(<span class="number">-3</span>, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(height <span class="keyword">int</span>, width <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> height &lt; <span class="number">0</span> || width &lt; <span class="number">0</span> &#123;</span><br><span class="line">  errA := errors.New(<span class="string">&quot;can not be negative&quot;</span>) <span class="comment">// 原始用法，如果需要格式化参数用下面这种</span></span><br><span class="line">  errB := fmt.Errorf(<span class="string">&quot;can not be negative,value is %d&quot;</span>, (height * width))</span><br><span class="line">  <span class="comment">// 可以直接打印效果等同于：err.Error()</span></span><br><span class="line">  log.Fatal(errA)</span><br><span class="line">  msg := errB.Error()</span><br><span class="line">  fmt.Println(msg)</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> height * width</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符转数字"><a href="#字符转数字" class="headerlink" title="字符转数字"></a>字符转数字</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Print(<span class="string">&quot;Enter a grade: &quot;</span>)</span><br><span class="line"> reader := bufio.NewReader(os.Stdin)</span><br><span class="line"> <span class="comment">// input,_ := reader.ReadString(&#x27;\n&#x27;) 使用blank identifier忽视错误</span></span><br><span class="line"> input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 接收错误</span></span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(input)</span><br><span class="line"> input = strings.TrimSpace(input)</span><br><span class="line"> grade, err := strconv.ParseFloat(input, <span class="number">64</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> grade &gt; <span class="number">60</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;qualified&quot;</span>)</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里我们看到err似乎被定义了两次，在go中，同一个变量名被定义两次是不可以的，但是如果简写形式<code>:=</code>下，定义多个变量，有至少一个变量是未曾出现过的，那么是合法的</p></blockquote><h3 id="scope-域"><a href="#scope-域" class="headerlink" title="scope 域"></a>scope 域</h3><blockquote><p>需要注意的是go的域是通过{}来划分的，{}内部定义的变量无法被外部读取</p></blockquote><p><img src="/images/pasted-175.png" alt="upload successful"></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>基本和其他语言一致</p><blockquote><p>continue 和 break 还是一样的用法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x:=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++ &#123;</span><br><span class="line"> fmt.Pintln(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line">x:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x&lt;<span class="number">10</span> &#123;</span><br><span class="line"> fmt.Pintln(x)</span><br><span class="line">    x++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>猜数游戏</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> seconds := time.Now().Unix()</span><br><span class="line"> rand.Seed(seconds) <span class="comment">// 如果不给时间种子，每次随机结果一样</span></span><br><span class="line"> target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"> fmt.Println(<span class="string">&quot;start gussing&quot;</span>)</span><br><span class="line"> fmt.Println(target)</span><br><span class="line"> <span class="comment">// 循环10次</span></span><br><span class="line"> <span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">10</span>; x++ &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;u have&quot;</span>, <span class="number">10</span>-x, <span class="string">&quot;times to guss&quot;</span>)</span><br><span class="line">  <span class="comment">// 下一步 用户输入</span></span><br><span class="line">  reader := bufio.NewReader(os.Stdin)</span><br><span class="line">  input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">  input = strings.TrimSpace(input)</span><br><span class="line">  guss, err := strconv.Atoi(input)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> guss == target &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;right&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> guss &lt; target &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;lower&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;higher&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(<span class="string">&quot;u failed&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Printf-Sprintf以及占位符"><a href="#Printf-Sprintf以及占位符" class="headerlink" title="Printf,Sprintf以及占位符"></a>Printf,Sprintf以及占位符</h3><p>和c的用法一样：<code>Printf(&quot;number: %0.2f\n,1.0、3.0)</code></p><p>Sprintf 和 Printf一样，不同的是Sprintf打印，而是返回格式化的字符串</p><p><img src="/images/pasted-176.png" alt="upload successful"></p><blockquote><p>%v 和 %#v 很有意思，后者不转义，代码里啥样，显示就是啥样</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>和其他语言差不多，没啥好说，命名不能数字开头，大写字母开头表示暴露</p><p>方法内 类型和变量名是倒着的，方法返回值类型也在最后和scala一样</p><p>func calc(width int) 这里是值拷贝</p><p>如果方法有返回类型，最后一行不是reture编译不通过</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> sayHi()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><blockquote><p>返回多个值需要在方法定义内加上<code>()</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getParam</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>,<span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>甚至可以给每个返回值取名</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getParam</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="params">(vale <span class="keyword">int</span>,name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般这个特性用来返回方法是否出错</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(height <span class="keyword">int</span>, width <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> height &lt; <span class="number">0</span> || width &lt; <span class="number">0</span> &#123;</span><br><span class="line">  errA := errors.New(<span class="string">&quot;can not be negative&quot;</span>) <span class="comment">// 原始用法，如果需要格式化参数用下面这种</span></span><br><span class="line">  errB := fmt.Errorf(<span class="string">&quot;can not be negative,value is %d&quot;</span>, (height * width))</span><br><span class="line">  <span class="comment">// 可以直接打印效果等同于：err.Error()</span></span><br><span class="line">  <span class="comment">//log.Fatal(errA)</span></span><br><span class="line">  msg := errB.Error()</span><br><span class="line">  fmt.Println(msg)</span><br><span class="line">  <span class="comment">// 也可以抛出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>, errA</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> height * width, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><blockquote><p><code>fmt.Println(1,2)</code>如同这个函数，有些函数可以接收若干个参数</p><p>想要函数可变接收参数如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(number <span class="keyword">int</span> , numbers ...<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"> <span class="comment">//numbers是个slice</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 无法直接传递进去，需要转换</span></span><br><span class="line">mysli :=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">get(<span class="number">1</span>,mysli...)</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote><p>学过了scala后还是觉得指针不好，虽然很灵活单也很容易出问题，且go支持了多值返回，更不推荐指针了</p><p>go 是值传递语言，所有传入的值都只拷贝，可以通过指针将变量的地址传入，这里还是值传递，只不过拷贝的是地址。</p><p>书里的解释很有趣，指针类型用<code>*</code>表示，go的定义和其他语言是反的，所以指针类型其他语言是<code>int *</code> ，go是<code>*int</code>表示<code>pointer to int</code>：指向int类型的指针</p><p>通过<code>fmt.Pintln(reflect.TypeOf(&amp;num))</code>查看类型</p><p>特别注意的是：其他语言的指针，只能在自己的访问域内使用，举例，假如方法内生成了局部变量且将局部变量的指针返回，其他语言在方法执行结束后，指针指向的地址空间会被释放，但是go不会，只要有人用就不会释放</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// 查看地址</span></span><br><span class="line"> <span class="keyword">var</span> amount <span class="keyword">int</span> = <span class="number">19</span></span><br><span class="line"> fmt.Println(&amp;amount)</span><br><span class="line"> <span class="comment">// 查看类型</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(&amp;amount))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 定义指针和使用</span></span><br><span class="line"> <span class="keyword">var</span> intPointer *<span class="keyword">int</span> = &amp;amount</span><br><span class="line"> fmt.Println(intPointer, *intPointer)</span><br><span class="line"> <span class="comment">// 另一种形式</span></span><br><span class="line"> floatVal := <span class="number">1.1</span></span><br><span class="line"> floatPointer := &amp;floatVal</span><br><span class="line"> fmt.Println(floatPointer)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 修改指针指向的值</span></span><br><span class="line"> strVal := <span class="string">&quot;hello&quot;</span></span><br><span class="line"> strPointer := &amp;strVal</span><br><span class="line"> *strPointer = <span class="string">&quot;hello from tr&quot;</span></span><br><span class="line"> fmt.Println(strVal, strPointer)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取方法内的指针</span></span><br><span class="line"> <span class="keyword">var</span> receivePointer *<span class="keyword">float64</span> = genPointer()</span><br><span class="line"> fmt.Println(receivePointer, *receivePointer)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 解决值传递的问题，传递的数据可被修改</span></span><br><span class="line"> h := <span class="number">10</span></span><br><span class="line"> changeVal(&amp;h)</span><br><span class="line"> fmt.Println(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法内的指针在方法结束后如果被引用，空间不会被释放</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genPointer</span><span class="params">()</span> *<span class="title">float64</span></span> &#123;</span><br><span class="line"> val := <span class="number">1.4</span></span><br><span class="line"> <span class="keyword">return</span> &amp;val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改传递的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeVal</span><span class="params">(val *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"> *val *= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包管理-package"><a href="#包管理-package" class="headerlink" title="包管理 package"></a>包管理 package</h3><blockquote><p>go定义了工作区，文件夹名字就叫<code>go</code>,安装了go后默认在home目录下会有go这个文件夹，这就是默认的工作区，包含<code>bin</code>,<code>pkg</code>,<code>src</code></p><p>一般包名和包的文件夹名是一致的,但是<code>main</code>package是例外，main文件的package 必须是main，但是所在文件夹的名字随意，所有的文件引用都是去工作区引用的</p><p>如果运行失败无法找到自己写的模块，可能需要改下环境变量</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=&quot;off&quot;</span><br><span class="line">go env -w GOPATH=/home/tr/go</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将main文件所在目录改为main</span></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-177.png" alt="upload successful"></p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ol><li><p>小写</p></li><li><p>简写：fmt ==&gt; format</p></li><li><p>最好一个单词表达，如果超过一个单词用 <code>_</code></p></li><li><p>最好不常用，不然容易和本地变量命名冲突</p></li></ol><h3 id="常量-constants"><a href="#常量-constants" class="headerlink" title="常量 constants"></a>常量 constants</h3><ol><li><p>const 定义符</p></li><li><p>定义的时候必须赋值</p></li><li><p>常量不可用 <code>:=</code> 简写 但是还是可以省略类型</p></li><li><p>推荐程序内的所有“魔数”都用常量替换</p></li><li><p>最好定义在包层，而不是方法内部</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quantity = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="cmd传递参数"><a href="#cmd传递参数" class="headerlink" title="cmd传递参数"></a>cmd传递参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(os.Args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改go的配置"><a href="#修改go的配置" class="headerlink" title="修改go的配置"></a>修改go的配置</h3><h4 id="修改GOPATH"><a href="#修改GOPATH" class="headerlink" title="修改GOPATH"></a>修改GOPATH</h4><blockquote><p>go的工作目录永远在默认的home目录下，如果想要把工作区修改到其他目录，需要修改环境变量</p><p>go tool永远会去GOPATH下寻找我们引用的模块，假如我们自己写的模块放入了<code>/code/src</code>目录下，如果想要go编译的时候去寻找，需要<code>export GOPATH=&quot;/code&quot;</code></p><p><code>go env -w GO111MODULE=&quot;off&quot;</code> <code>go env -w GOPATH=&quot;/code&quot;</code>  如果<code>export</code>不起作用，可以试试这样</p></blockquote><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><blockquote><p>假如导入github上其他人的包，一般是将其他人的包以URI的形式，放入src下的目录，如下，导入的时候只需输入路径<code>&quot;github.com/headfirstgo/keyboard&quot;</code></p></blockquote><p><img src="/images/pasted-178.png" alt="upload successful"></p><blockquote><p>导入他人包就是cli里的，<code>go get &lt;URL&gt;</code>，查看文档：<code>go doc &lt;URL&gt;</code></p></blockquote><h4 id="添加包说明"><a href="#添加包说明" class="headerlink" title="添加包说明"></a>添加包说明</h4><blockquote><p><code>go doc</code>可以查看包的信息，包给其他人用的时候需要添加一些说明</p><p>所有<code>Package</code>和方法语句之前的注释文档都会被<code>go doc</code>输出</p><p>go可以自动生成在线文档服务，<code>godoc -http=:6060</code></p></blockquote><h2 id="GO数据结构"><a href="#GO数据结构" class="headerlink" title="GO数据结构"></a>GO数据结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>基本和其他语言一样</p><p>不过初始化的时候，int型的默认0，string型的默认空</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础类型数组</span></span><br><span class="line"><span class="keyword">var</span> notes [<span class="number">7</span>]<span class="keyword">string</span></span><br><span class="line">notes[<span class="number">0</span>] = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象/结构体数组 默认值是utc 0的时间</span></span><br><span class="line"><span class="keyword">var</span> dates [<span class="number">3</span>]time.Time</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速初始化数值</span></span><br><span class="line"><span class="keyword">var</span> names [<span class="number">3</span>]<span class="keyword">string</span> = [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写快速初始化</span></span><br><span class="line">names := [<span class="number">2</span>]<span class="keyword">string</span> &#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要分多行，一定要用逗号作为格式化字符(最后一行也要逗号)</span></span><br><span class="line">names := [<span class="number">2</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt可以快速打印数据接口包括 array,map,slices等</span></span><br><span class="line">fmt.Println(names)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>,names)</span><br></pre></td></tr></table></figure><blockquote><p>数组的循环</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loop</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(names); i++ &#123;</span><br><span class="line">  fmt.Println(names[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>loop的另一种形式 和python的 <code>for key in</code>很像</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loog another</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> names &#123;</span><br><span class="line">  fmt.Println(index, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上这种情况，index如果没被用到，是会报错的，可以使用空定义避免</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> names &#123;</span><br><span class="line">  fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h3><blockquote><p>类似链表，用于解决数组长度固定问题<br>定义和数组一样，只不过不需要提供长度<br><b>本身是基于数组的，只是数组的一个限制镜像，若slice来自数组，修改数组就会导致slice变动</b></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明，因为slice基于数组，没有底层数组单声明slice无用，这时候的slice是个nil</span></span><br><span class="line"><span class="keyword">var</span> mycli []<span class="keyword">string</span></span><br><span class="line"><span class="comment">// 初始化一个数组给slice</span></span><br><span class="line">mycli = <span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">7</span>)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">mycli[<span class="number">0</span>] = <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以快速简写，且遍历和数组一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mycli := <span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速定义赋值</span></span><br><span class="line">mycli := []<span class="keyword">string</span>&#123;</span><br><span class="line">  <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>slice可以从现有数组中创建</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从数组的0到3截取创建slice，左闭右开</span></span><br><span class="line">myarr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">mysli := myarr[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 且可以忽略开始或者结束</span></span><br><span class="line">myslic := myarr[<span class="number">0</span>:]</span><br><span class="line">myslid := myarr[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>修改数组会导致slice变化</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myarr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">mysli := myarr[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">myarr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">fmt.Println(mysli)</span><br></pre></td></tr></table></figure><blockquote><p>所以使用slice的时候，还是推荐make单独给slice一个数组</p><p>slice 有append方法可以在尾部添加数据，前面说过slice是基于数组的，如果底层的数组空间不足，append会生成新的数组，将原来值拷贝过去，这时append给一个新的slice无法确定这两个slice是否共享一个底层数组，所以建议append给原来的slice</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全的调用slice</span></span><br><span class="line">mysli = <span class="built_in">append</span>(mysli,<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 无法确定是否属于同一数组</span></span><br><span class="line">mycli2 := <span class="built_in">append</span>(mycli,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：虽然slice初始化的时候不确定数组是个nil，但是其他方法调用的时候不用判断是否为nil，默认为nill的slice是个空slice，比如以下就是合法的操作</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sc []<span class="keyword">string</span></span><br><span class="line">sc = <span class="built_in">append</span>(sc,<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>一个读取文件内的文本转为float型数组的例子：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> arr, err := readFloatFromFile(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(arr)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFloatFromFile</span><span class="params">(filePath <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> numbers []<span class="keyword">float64</span></span><br><span class="line"> file, err := os.Open(filePath)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> scanner := bufio.NewScanner(file)</span><br><span class="line"> <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">  txt := strings.TrimSpace(scanner.Text())</span><br><span class="line">  number, err := strconv.ParseFloat(txt, <span class="number">64</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="comment">// 出错返回数组和错误信息</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  numbers = <span class="built_in">append</span>(numbers, number)</span><br><span class="line"> &#125;</span><br><span class="line"> err = file.Close()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> scanner.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 无错 返回数组和空</span></span><br><span class="line"> <span class="keyword">return</span> numbers, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>slice 传入可变函数需要添加<code>...</code></p><p>slice 排序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort.Strings(mySli)</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>Map几乎可以用任意类型作为key（但是必须是可以使用<code>==</code>来比较的类型）</p><p>Map定义：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span></span><br><span class="line">myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>)</span><br></pre></td></tr></table></figure><blockquote><p>快速定义：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myMap[<span class="string">&quot;first&quot;</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>map字面量（快速赋值）：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1.2</span>,<span class="string">&quot;b&quot;</span>:<span class="number">1.3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>map[something]</code> 如果从未定义过，也可以获取结果是0，想要区分一个key是否被赋值过如下：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map访问可以多带一个返回参数，是否接收都可以用于判断是否赋值过</span></span><br><span class="line"><span class="comment">// myMap[&quot;tzq&quot;] # 这是直接访问</span></span><br><span class="line">value,ok := myMap[<span class="string">&quot;tzq&quot;</span>]</span><br><span class="line"><span class="comment">// ok 为true表示赋值过</span></span><br><span class="line"><span class="comment">// 若只想知道是否赋值过</span></span><br><span class="line">_,ok := myMap[<span class="string">&quot;tzq&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>删除key</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从myMap中删除key为name的值</span></span><br><span class="line"><span class="built_in">delete</span>(myMap,<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>map打印的时候是乱序打印的，可以将key塞到一个slice，然后排序slice打印</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> grades := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>&#123;</span><br><span class="line">  <span class="string">&quot;tr&quot;</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="string">&quot;tzq&quot;</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="string">&quot;sxy&quot;</span>:<span class="number">90</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> mySlic []<span class="keyword">string</span></span><br><span class="line"> <span class="comment">// 可以不写_</span></span><br><span class="line"> <span class="keyword">for</span> k := <span class="keyword">range</span> grades&#123;</span><br><span class="line">  mySlic = <span class="built_in">append</span>(mySlic,k)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 不返回值</span></span><br><span class="line"> sort.Strings(mySlic)</span><br><span class="line"> <span class="keyword">for</span> _,name := <span class="keyword">range</span> mySlic&#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%5s || %5.2f\n&quot;</span>,name,grades[name])</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个使用map的例子，统计选票</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;reading&quot;</span>)</span><br><span class="line"> names,err := readStringFromFile(<span class="string">&quot;./names&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 统计名字出现次数</span></span><br><span class="line"> res := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> _,name := <span class="keyword">range</span> names&#123;</span><br><span class="line">  res[name]++</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(res) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readStringFromFile</span><span class="params">(path <span class="keyword">string</span>)</span><span class="params">([]<span class="keyword">string</span>,error)</span></span>&#123;</span><br><span class="line"> res := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"> file,err := os.Open(path)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"> scanner := bufio.NewScanner(file)</span><br><span class="line"> <span class="keyword">for</span> scanner.Scan()&#123;</span><br><span class="line">  res = <span class="built_in">append</span>(res,strings.TrimSpace(scanner.Text())) </span><br><span class="line"> &#125;</span><br><span class="line"> err = file.Close()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> scanner.Err()!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> res,<span class="literal">nil</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体-structs（和C很像）"><a href="#结构体-structs（和C很像）" class="headerlink" title="结构体 structs（和C很像）"></a>结构体 structs（和C很像）</h3><blockquote><p>单独的结构体定义变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独定义一个结构体（类似对象）</span></span><br><span class="line"><span class="keyword">var</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line"> name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">person.name = <span class="string">&quot;tr&quot;</span></span><br><span class="line">fmt.Println(person.name)</span><br></pre></td></tr></table></figure><blockquote><p>自定义数据类型 配合结构体(类似实现java的类)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age <span class="keyword">int</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> tr Person</span><br><span class="line"> tr.name = <span class="string">&quot;te&quot;</span></span><br><span class="line"> tr.age = <span class="number">24</span></span><br><span class="line"> fmt.Println(tr)</span><br></pre></td></tr></table></figure><blockquote><p>结构体类型可以作为方法出入参，但是要记住go永远是值拷贝，传递的结构体，方法内修改不会影响方法外的结构体，所以建议所有对原始数据修改的方法，都用指针。且如果结构体很大，也用指针，不然拷贝很久消耗内存和更多cpu</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age <span class="keyword">int</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//var person struct&#123;</span></span><br><span class="line"> <span class="comment">// name string</span></span><br><span class="line"> <span class="comment">// age int</span></span><br><span class="line"> <span class="comment">//&#125;</span></span><br><span class="line"> <span class="comment">//person.name = &quot;tr&quot;</span></span><br><span class="line"> <span class="comment">//person.age = 24</span></span><br><span class="line"> <span class="comment">//fmt.Println(person)</span></span><br><span class="line"> <span class="keyword">var</span> tr Person</span><br><span class="line"> tr.name = <span class="string">&quot;te&quot;</span></span><br><span class="line"> tr.age = <span class="number">24</span></span><br><span class="line"> tr = changeName(tr)</span><br><span class="line"> fmt.Println(tr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeName</span><span class="params">(person Person)</span><span class="title">Person</span></span>&#123;</span><br><span class="line"> person.name = <span class="string">&quot;changed&quot;</span></span><br><span class="line"> <span class="keyword">return</span> person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>指针访问结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pointer *Person = &amp;tr</span><br><span class="line"><span class="comment">// 访问指针的内容</span></span><br><span class="line">fmt.Println((*pointer).name) <span class="comment">// (*pointer)这样的写法很冗杂</span></span><br><span class="line">fmt.Println(pointer.name) <span class="comment">// 简化形式</span></span><br></pre></td></tr></table></figure><blockquote><p>go里面，只有大写开头的结构体才可以被其他包使用！<b>并且，结构体内的字段也要大写开头，才能访问！</b></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Package MyStru</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他包内容调用</span></span><br><span class="line"><span class="keyword">import</span> MyStru</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> p MyStru.Person </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样通过<code>包名.类型</code>的方式有些啰嗦，go提供了结构体字面量可以同时创建和初始化字段</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不必所有的字段都要赋值</span></span><br><span class="line">p := MyStru.Person&#123;Name:<span class="string">&quot;tr&quot;</span>,Age:<span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体的嵌套</p></blockquote><p><img src="/images/pasted-179.png" alt="upload successful"></p><blockquote><p>匿名变量（结构体链式调用简写），有时候如上图emp.Addr.City看起来很冗杂，go提供了匿名变量：只保留变量类型，去掉名字<br>访问的时候可以去掉名字作为内置变量访问，也可以通过类型名访问</p></blockquote><p><img src="/images/pasted-180.png" alt="upload successful"></p><h2 id="Go的高级特性"><a href="#Go的高级特性" class="headerlink" title="Go的高级特性"></a>Go的高级特性</h2><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><blockquote><p>上一节讲了<code>type</code>，自定义类型基于结构体，现在可以试试基于任何其他类型并且定义方法</p><p>为什么要用这个，这里提供书上的一个场景：<br>一加仑=3.78升，如果一个程序定义了油耗是10:<code>var fuel float64 = 10</code>，那么他是10升还是10加仑，所以这时候我们可以将<code>float64</code>转为自定义类型，用可阅读的英语代替</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Liter <span class="keyword">float64</span> <span class="comment">// 定义升</span></span><br><span class="line"><span class="keyword">type</span> Gallon <span class="keyword">float64</span> <span class="comment">// 定义加仑</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> carFuel Liter <span class="comment">// 这里明显可以得知是升</span></span><br><span class="line">    <span class="keyword">var</span> busFuel Gallon <span class="comment">// 同理</span></span><br><span class="line">    carFuel = Liter(<span class="number">10</span>) <span class="comment">// 10升油</span></span><br><span class="line">    </span><br><span class="line">    motorCycle := Gallon(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    carFuel = Gallon(<span class="number">10</span>) <span class="comment">// 这里会编译错误，因为一开始声明的类型不一样，即使这些类型底层都是float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但有时我们会想要混用转换这两种类型，go提供了两种自定义类型（基于同一种类型）互相转化的解决方案</p><p>定义自己的类型和对应操作符（+ - * / == &gt; &lt;），一般go是不允许不同类型加减乘除的，需要自定义操作符，这里我们希望<code>Liter</code>和<code>Gallon</code>单位混合运算<br>PS:这里定义每个类型的对应方法的时候，方法指的就是方法(Function),函数(Method)指的是不属于类型的那些方法，比起函数，方法要多加一个入参(写在方法名左边)，其他和函数没有区别</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一旦MyType的方法定义了，任何MyType的value都可以调用</span></span><br><span class="line"><span class="comment">// 一般自定义的入参取名单个开头字母小写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyType)</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value := MyType(<span class="string">&quot;some thing&quot;</span>)</span><br><span class="line">value.sayHi() <span class="comment">// 这里value就是第一个入参</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyType <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不加sayHi左边的就是一个普通的方法而已</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t MyType)</span><span class="title">sayHi</span><span class="params">(name <span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line"> fmt.Println(name,t)</span><br><span class="line"> <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// a := &quot;test&quot;</span></span><br><span class="line"> <span class="comment">// 这里是无法调出 a.sayHi的</span></span><br><span class="line"> value := MyType(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line"> value.sayHi(<span class="string">&quot;hello from &quot;</span>)</span><br><span class="line"> <span class="comment">// 结果是 hello from tr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>哪些类型可以被自定义方法？ 在同一包下自定义的类型可以，int等系统类型不行</p><p>方法的第一入参可以接收指针，场景：需要给自己的基于int的类型加个Double倍增的方法，但是不使用指针无法修改，不过不用担心，对于首要入参，go会自动的在需要的时候转为指针，如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Number <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n如果不是指针类型 无法实现*2效果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Number)</span> <span class="title">DoubleNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line"> (*n) *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> val := Number(<span class="number">12</span>)</span><br><span class="line"> val.DoubleNumber() <span class="comment">// 调用的时候go自动传入了地址</span></span><br><span class="line"> fmt.Println(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这时候我们就可以解决第一个场景的问题了：给升和加仑转为对方的转换方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Liter <span class="keyword">float64</span> <span class="comment">// 定义升</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l liter)</span> <span class="title">toGallon</span><span class="params">()</span><span class="title">Gallon</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Gallon(l* <span class="number">0.264</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装和嵌入"><a href="#封装和嵌入" class="headerlink" title="封装和嵌入"></a>封装和嵌入</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><blockquote><p>其实go的封装很类似java的一个实体类，对于go来说，一个struct内部的方法，如果可以不经过校验随意输入参数，那么代码很容易出错，需要给一个setter方法，让输入的参数经过校验</p><p>其实真的很像java的实体类，我们需要定义一个对象，对象再调用setter方法设置值，在go中我们得通过上节的自定义类型方法，例子如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义日期结构体</span></span><br><span class="line"><span class="keyword">type</span> Date <span class="keyword">struct</span>&#123;</span><br><span class="line"> Year <span class="keyword">int</span></span><br><span class="line"> Month <span class="keyword">int</span></span><br><span class="line"> Day <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类型方法 如果不用指针 结果不会改变</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span><span class="title">SetYear</span><span class="params">(year <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"> d.Year = year</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d Date</span><br><span class="line"> <span class="comment">// 显然直接修改结构体内的值不安全，万一设置负的呢</span></span><br><span class="line"> <span class="comment">//d.Year = -1</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 我们想要调用d.setYear 但是让类型调用方法我们需要自定义类型方法</span></span><br><span class="line"> d.SetYear(<span class="number">1997</span>)</span><br><span class="line"> fmt.Println(d)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上这个例子结构体内的域变量还是可以被访问到，其实这时候只要将结构体移到其他包内，且域内变量都小写不开放即可。这样我们就只能通过开放的<code>Setxxx</code>方法去修改不开放的<code>域内值</code></p></blockquote><h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><blockquote><p>Get方法实际上和java的作用也一样，建议类型首参用指针且方法名不用<code>GetYear</code>而是<code>Year</code>，如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span><span class="title">Year</span><span class="params">()</span><span class="title">int</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> d.year</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在其他语言中，封装是通过<code>class</code>实现的，而go是通过<code>package</code>实现的</p></blockquote><h4 id="完整的GetSet例子"><a href="#完整的GetSet例子" class="headerlink" title="完整的GetSet例子"></a>完整的GetSet例子</h4><blockquote><p>date目录下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义日期结构体,全都是小写为了防止被其他包读取</span></span><br><span class="line"><span class="keyword">type</span> Date <span class="keyword">struct</span> &#123;</span><br><span class="line"> year  <span class="keyword">int</span></span><br><span class="line"> month <span class="keyword">int</span></span><br><span class="line"> day   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Set方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">SetYear</span><span class="params">(year <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> year &lt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">&quot;Year can not be negative&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> d.year = year</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">SetMonth</span><span class="params">(month <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> month &lt; <span class="number">1</span> || month &gt; <span class="number">12</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">&quot;Month must between 1-12&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> d.month = month</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">SetDay</span><span class="params">(day <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> day &gt; <span class="number">31</span> || day &lt; <span class="number">1</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">&quot;Day must between 1-31&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> d.day = day</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get方法,最好还用指针不然拷贝数据浪费内存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">Year</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> d.year</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">Month</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> d.month</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">Day</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> d.day</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用日期包的主文件</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;date&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> myDate date.Date</span><br><span class="line"> myDate.SetYear(<span class="number">1997</span>)</span><br><span class="line"> myDate.SetMonth(<span class="number">11</span>)</span><br><span class="line"> myDate.SetDay(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"> fmt.Printf(<span class="string">&quot;%v || %v || %v&quot;</span>,myDate.Year(),myDate.Month(),myDate.Day())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌入"><a href="#嵌入" class="headerlink" title="嵌入"></a>嵌入</h4><blockquote><p>一个结构体可以嵌套另一个结构体，但是访问的时候可以将子结构体的内容当做自己的属性访问（这些内容包括方法和属性）</p><p>不过需要外部结构体定义的子结构体是匿名的，即只有类型</p><p>当然子结构体内部不暴露的（小写开头）的变量是不会嵌入/或者说弹出给外部结构体的</p></blockquote><h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口 Interface"></a>接口 Interface</h3><blockquote><p>go的接口指的永远是变量的接口，因为go没有类的概念，一个自定义类型可以基于任何类型，可以实现方法。那么接口就是约定这个自定义类型需要包含的方法</p></blockquote><h4 id="接口实现和对应类型实现"><a href="#接口实现和对应类型实现" class="headerlink" title="接口实现和对应类型实现"></a>接口实现和对应类型实现</h4><blockquote><p>和java的接口概念一样，约定我需要哪些方法，具体怎么来的不关心，不过go里面，接口必须和类型结合使用，类型可以有多个方法，但是必须有符合接口的方法才满足</p><p><code>You don’t care whether you have a Pen or a Pencil, you just need something with a Draw method</code></p><p>定义接口示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span>&#123;</span><br><span class="line"> sayHi()</span><br><span class="line">    getSomething(<span class="keyword">float64</span>)</span><br><span class="line">    returnSomething()<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义满足接口的类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给这个类型定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyType)</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyType)</span> <span class="title">getSomething</span><span class="params">(f <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyType)</span> <span class="title">returnSomething</span><span class="params">()</span><span class="title">string</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以有其他方法</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><blockquote><p>这里定义了接口和类型，需要注意的是不同于<code>Java</code>的<code>implement</code>go是自动的，不需要手动声明，如下使用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义变量类型为接口</span></span><br><span class="line">  <span class="keyword">var</span> value MyInterface</span><br><span class="line">  <span class="comment">// 因为MyType定义的方法是符合接口的，所以这么做合法</span></span><br><span class="line">  value = MyType(<span class="number">5</span>)</span><br><span class="line">  value.sayHi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个接口类型不确定内容到底是什么，可能是int，可能是其他，取决于自定义类型的基础</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Whistle <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> Horn <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Whistle)</span> <span class="title">MakeSound</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;whistle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Horn)</span> <span class="title">MakeSound</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;whistle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NoiseMaker <span class="keyword">interface</span>&#123;</span><br><span class="line"> MakeSound()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> toy NoisMaker</span><br><span class="line">    toy = Whistle(<span class="string">&quot;toy&quot;</span>)</span><br><span class="line">    toy.MakeSound()</span><br><span class="line">    toy = Horn(<span class="string">&quot;toy&quot;</span>)</span><br><span class="line">    toy.MakeSound()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口变量也可以作为入参，总结一下，go的接口实现方式是基于自定义类型的，一个自定义类型，包含了数据，和类型可以调用的方法，这就相当于Java的类</p><p>当生成了自定义类型的变量，就相当于java内的对象，可以作为参数传递，如果这个变量的方法满足接口，那么入参类型为接口变量即可</p><p>需要注意的是：如果实现类型方法的时候，首参是指针，那么在给一个接口变量赋值的时候，只能赋值类型变量的指针，下面是错误的示例和修正代码</p></blockquote><p><img src="/images/pasted-181.png" alt="upload successful"></p><p><img src="/images/pasted-182.png" alt="upload successful"></p><h4 id="接口类型转为具体类型"><a href="#接口类型转为具体类型" class="headerlink" title="接口类型转为具体类型"></a>接口类型转为具体类型</h4><blockquote><p>如同java的接口一样，当使用接口的时候，那么只能使用接口定义的方法，假如实现接口的具体类有更多方法，需要转为具体实现类</p><p>go也是同理，假如一个接口变量定义了并且赋值了一个实现接口的接口自定义类型，如果需要将接口变量转为自定义类型变量，只需要<code>.(具体自定义类型)</code>即可</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> noiseMaker NoiseMaker = Robot(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> robot Robot = noiseMaker.(Robot)</span><br><span class="line"><span class="comment">// 更推荐用下面这种带判断是否转换成功的</span></span><br><span class="line">robot,ok := noiseMaker.(Robot)</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Error接口"><a href="#Error接口" class="headerlink" title="Error接口"></a>Error接口</h4><blockquote><p>我们之前常用error类型，但是实际上error只是个接口，只要我们实现了<code>Error()string</code>的自定义类型都可以视为error的实现</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> ComputerError <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型实现Error()string 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c ComputerError)</span><span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;a computerError occured&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">// 我们自定义的ComputerError符合接口</span></span><br><span class="line"> <span class="keyword">var</span> err error = ComputerError(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"> err.Error()</span><br><span class="line"> fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>error接口是小写开头，那么我们为啥可以调用，毕竟小写开头都是私有不暴露的，这是因为error是作为<code>universe block</code>存在的，不论在哪个包都可以调用到。</p><p>有些接口是定义在方法下的，有些是在包下的，所以他们有限制，必须大写才能暴露，且使用需要引入，但是<code>error</code>和一些其他预定于的是在”所有包下的”</p></blockquote><h4 id="String接口"><a href="#String接口" class="headerlink" title="String接口"></a>String接口</h4><blockquote><p>对于<code>fmt.Println</code>或者其他方法来说，这些print方法会去寻找入参的变量是否有<code>String()string</code>方法，如果有，会去调用这个方法</p><p>即，fmt存在<code>Stringer</code>接口，输入的任何变量其实是作为<code>Stringer</code>接口变量存在的:<code>fmt.Println(myVariable)</code>，<code>myVariable</code>会作为接口变量存在，当然如果不满足接口方法那就不是了</p><p>可以<code>go doc fmt Println</code>查看具体接口定义</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型实现string方法满足Stringer接口</span></span><br><span class="line"><span class="keyword">type</span> CoffeePot <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c CoffeePot)</span><span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">string</span>(c) + <span class="string">&quot;coffee&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> coffee := CoffeePot(<span class="string">&quot;100&quot;</span>)</span><br><span class="line"> fmt.Println(coffee)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><blockquote><p>一个接口定义了以后，只要任何变量满足这个接口内的方法，那么变量就可以被传入或者赋值</p><p>那么假如接口内无任何方法定义，则可以接收任何变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独命名一个空接口</span></span><br><span class="line"><span class="keyword">type</span> emptInterface <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 任何值都可以被传入 &#123;&#125;表示接收的接口变量无方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AcceptThing</span><span class="params">(thing <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是问题是空接口那么也没有方法可被调用，所以这时候要转换空接口为具体变量<br>了解这个再看fmt包的Println就明白了<code>func Println(a ...any) (n int, err error)</code> 这么定义表明可以接收若干个空接口即任何参数<br>随后转换这些参数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AcceptThing</span><span class="params">(thing <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">  whistle,ok :=thing.(Whistle)</span><br><span class="line">  <span class="keyword">if</span> ok&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h3><blockquote><p>利用接口，自定义类型，结构体，封装等概念完成一个自定义链表，以及基于链表的栈</p><p>代码实现</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;list&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;********&quot;</span>)</span><br><span class="line"> <span class="comment">// 测试节点 节点元素可以是任何类型</span></span><br><span class="line"> <span class="keyword">var</span> n list.Node</span><br><span class="line"> ele := list.StringEle(<span class="string">&quot;13.1&quot;</span>)</span><br><span class="line"> n.SetEle(ele) </span><br><span class="line"> n.SetEle(<span class="number">13</span>)</span><br><span class="line"> n.PrintList()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 测试链表</span></span><br><span class="line"> fmt.Println(<span class="string">&quot;*************&quot;</span>)</span><br><span class="line"> <span class="comment">// 生成的新节点不能用指针 除非malloc手动分配内存</span></span><br><span class="line"> <span class="keyword">var</span> newStartNode list.Node</span><br><span class="line"> newStartNode.SetEle(<span class="number">11</span>)</span><br><span class="line"> <span class="keyword">var</span> myList list.List</span><br><span class="line"> myList = &amp;newStartNode</span><br><span class="line"> myList.AppendNode(<span class="number">22</span>)</span><br><span class="line"> myList.InsertNode(<span class="number">33</span>,<span class="number">1</span>)</span><br><span class="line"> myList,_ = myList.DeleteNodeByIndex(<span class="number">1</span>)</span><br><span class="line"> err := myList.UpdateNodeByIndex(<span class="number">100</span>,<span class="number">3</span>)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> myList.PrintList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>链表实现</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> list</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author tr</span></span><br><span class="line"><span class="comment"> * @content 实现链式链表</span></span><br><span class="line"><span class="comment"> * @date 2022-4-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*************** 定义链式链表的基础节点***************</span></span><br><span class="line"><span class="comment">// 自定义错误类型(不能用指针！！！)</span></span><br><span class="line"><span class="keyword">type</span> nodeErr <span class="keyword">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n nodeErr)</span> <span class="title">Error</span><span class="params">()</span><span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="comment">// 需要类型转换</span></span><br><span class="line"> <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;node error %s:\n&quot;</span>,<span class="keyword">string</span>(n))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义节点元素的基础类型</span></span><br><span class="line"><span class="keyword">type</span> IntEle <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> StringEle <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> FloatEle <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span>&#123;</span><br><span class="line"> <span class="comment">// 节点元素，可以是任何类型</span></span><br><span class="line"> ele <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"> <span class="comment">// 节点的下一个指针 初始化的时候默认为nil</span></span><br><span class="line"> next *Node</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封闭私有元素，开放set,get</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">SetEle</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line"> n.ele = ele</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">SetNext</span><span class="params">(next *Node)</span></span>&#123;</span><br><span class="line"> n.next = next</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">Ele</span><span class="params">()</span><span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line"> <span class="keyword">return</span> n.ele</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">Next</span><span class="params">()</span>*<span class="title">Node</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> n.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//************************* 定义链式链表***************</span></span><br><span class="line"><span class="comment">// 定义一个链表的接口</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">interface</span>&#123;</span><br><span class="line"> <span class="comment">// 清楚元素</span></span><br><span class="line"> Clear()</span><br><span class="line"> <span class="comment">// 链表长度</span></span><br><span class="line"> GetLength()<span class="keyword">int</span></span><br><span class="line"> <span class="comment">// 插入节点</span></span><br><span class="line"> InsertNode(<span class="keyword">interface</span>&#123;&#125;,<span class="keyword">int</span>)(*Node,error)</span><br><span class="line"> <span class="comment">// 尾部插入节点</span></span><br><span class="line"> AppendNode(<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"> <span class="comment">// 删除节点-通过节点位置且返回头结点</span></span><br><span class="line"> DeleteNodeByIndex(<span class="keyword">int</span>)(*Node,error)</span><br><span class="line"> <span class="comment">// 删除节点-通过节点元素且返回被删除元素</span></span><br><span class="line"> <span class="comment">//DeleteNodeByEle(interface&#123;&#125;)(interface&#123;&#125;,error)</span></span><br><span class="line"> <span class="comment">// 更新节点-通过index</span></span><br><span class="line"> UpdateNodeByIndex(<span class="keyword">interface</span>&#123;&#125;,<span class="keyword">int</span>)error</span><br><span class="line"> <span class="comment">// 打印链表</span></span><br><span class="line"> PrintList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现链表接口 如果实现的时候首参数用了 * 赋值要用 &amp; 注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">Clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"> n.next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现打印，因为元素类型不同,可以转为自定义的元素类型或者原始元素类型，通过转换分辨节点类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doPrint</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line"> _,ok = ele.(IntEle)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;int element %d\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> _,ok = ele.(StringEle)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;string element %s\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> _,ok = ele.(FloatEle)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;float element %f\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> _,ok = ele.(<span class="keyword">int</span>)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;original int element %d\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(<span class="string">&quot;unknown type&quot;</span>,ele)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">PrintList</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> n!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="comment">// fmt.Println(n.ele) 这样打印显示不出类型转换</span></span><br><span class="line">  ele := n.Ele()</span><br><span class="line">  doPrint(ele)</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">GetLength</span><span class="params">()</span><span class="title">int</span></span>&#123;</span><br><span class="line"> <span class="comment">// 计数器</span></span><br><span class="line"> counter := <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> n!=<span class="literal">nil</span>&#123;</span><br><span class="line">  counter++</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点 从0开始计数，0表示在第一个，1表示在第一个节点后...</span></span><br><span class="line"><span class="comment">// 且只有为0的时候需要返回新的头部节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">InsertNode</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;,index <span class="keyword">int</span>)</span><span class="params">(*Node,error)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 若大于链表长度 返回错误</span></span><br><span class="line"> <span class="keyword">if</span> index&gt;n.GetLength()&#123;</span><br><span class="line">  <span class="keyword">return</span> n,nodeErr(<span class="string">&quot;index out of bounds&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 若等于 调用append</span></span><br><span class="line"> <span class="keyword">if</span> index == n.GetLength()&#123;</span><br><span class="line">  n.AppendNode(ele)</span><br><span class="line">  <span class="keyword">return</span> n,<span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 若为0 成为头部</span></span><br><span class="line"> <span class="keyword">if</span> index == <span class="number">0</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newHead Node</span><br><span class="line">  newHead.SetEle(ele)</span><br><span class="line">  newHead.SetNext(n)</span><br><span class="line">  <span class="keyword">return</span> &amp;newHead,<span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 其他情况下要做处理</span></span><br><span class="line"> <span class="keyword">for</span> ;index&gt;<span class="number">1</span>;index--&#123;</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> newN Node</span><br><span class="line"> newN.SetEle(ele)</span><br><span class="line"> newN.SetNext(n.Next())</span><br><span class="line"> n.SetNext(&amp;newN) </span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> n,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">AppendNode</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125; )</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> newN Node</span><br><span class="line"> newN.SetEle(ele)</span><br><span class="line"> n.SetNext(&amp;newN)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除从1开始计数 如果删除第一个需要返回新的头结点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(n *Node)</span><span class="title">DeleteNodeByIndex</span><span class="params">(index <span class="keyword">int</span>)</span><span class="params">(*Node,error)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> index&gt;n.GetLength()||index&lt;<span class="number">1</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,nodeErr(<span class="string">&quot;index out of bounds in deleting&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> index == <span class="number">1</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n.Next(),<span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> ;index&gt;<span class="number">2</span>;index--&#123;</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> n.SetNext(n.Next().Next())</span><br><span class="line"> <span class="keyword">return</span> n,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">UpdateNodeByIndex</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;,index <span class="keyword">int</span>)</span><span class="title">error</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> index&gt;n.GetLength()||index&lt;<span class="number">1</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nodeErr(<span class="string">&quot;index out of bounds in updating&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> ;index&gt;<span class="number">1</span>;index--&#123;</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> n.SetEle(ele) </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;GO&quot;&gt;&lt;a href=&quot;#GO&quot; class=&quot;headerlink&quot; title=&quot;GO&quot;&gt;&lt;/a&gt;GO&lt;/h2&gt;</summary>
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>VSC Remote Container</title>
    <link href="http://example.com/2022/04/08/VSC-Remote-Container/"/>
    <id>http://example.com/2022/04/08/VSC-Remote-Container/</id>
    <published>2022-04-08T10:35:00.000Z</published>
    <updated>2025-03-01T12:26:37.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Visual-Studio-Code-Remote-Container"><a href="#Visual-Studio-Code-Remote-Container" class="headerlink" title="Visual Studio Code : Remote Container"></a>Visual Studio Code : Remote Container</h1><blockquote><p>一款神级插件使用说明</p></blockquote><span id="more"></span><h2 id="插件说明"><a href="#插件说明" class="headerlink" title="插件说明"></a>插件说明</h2><blockquote><p>这款插件：<code>Remote Containers</code> 可以将快速的将本地的工程目录放入独立容器中，所有的环境配置，运行，都在容器内执行，但是工程文件编辑就在vsc内，用户体验极好</p></blockquote><blockquote><p>应该更适用于开发环境版本较多的人，假如一个工程是用python2.7开发的，另一个是python3 两个同时安装在宿主机需要版本切换控制。类似于这种情况，多版本导致的冲突污染。使用该插件可以将两个工程都放入对应的容器内部避免了主机版本冲突。</p></blockquote><blockquote><p>更为强大的是很多配置都是自动化的，假如一个spring的maven项目在文件夹内，使用这款插件可以快速搭建maven环境，插件自动按照我们给的选项生成镜像容器，导入jdk，安装maven，并且自动启动java服务器，同步pom内的依赖，导入结束后只需 <code>F5</code> 启动即可。</p></blockquote><blockquote><p>一个很有特色的功能点是，假如团队合作中多人开发，某人提交了一个 <code>PR/MR</code> 不清楚这个功能点是否好用，可以将这个<code>PR/MR</code>地址复制下来，使用插件快速搭建，插件将自动拉去这个提交的代码构建环境快速启动测试</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><blockquote><p>使用官方DEMO感受插件带来的快速构建工作环境镜像，这里用的java maven工程</p></blockquote><p><img src="/images/pasted-159.png" alt="upload successful"></p><p><img src="/images/pasted-160.png" alt="upload successful"></p><p>可以看到很快速的启动了一个镜像，可以在vsc内编辑任何代码，只要按下 <code>F5</code>就可以启动服务了。所有的环境配置包括maven仓库都存储在容器内，不会污染主机环境。</p><p><img src="/images/pasted-161.png" alt="upload successful"></p><p>点击即可关闭和容器的链接</p><p><img src="/images/pasted-163.png" alt="upload successful"></p><p>可以看到有很多选项，可以本地打开目录，可以打开远程仓库甚至是一个<code>PR/MR</code>请求。</p><h3 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h3><blockquote><p>这里以java的springboot工程为例，先在本地文件夹内建立好项目文件，也可以git拉取</p></blockquote><p><img src="/images/pasted-162.png" alt="upload successful"></p><blockquote><p>打开vsc的控制台，选择open folder</p></blockquote><p><img src="/images/pasted-166.png" alt="upload successful"></p><blockquote><p>接下来会选择基础的jdk等开发环境设置，选好jdk，maven，os的版本即可</p></blockquote><p><img src="/images/pasted-164.png" alt="upload successful"></p><blockquote><p>在构建完毕后最好安装这些官方推荐的插件，这些插件将会被安装在容器内部，用于容器内的项目开发，安装后才有不输给IntelliJIDea的开发体验</p></blockquote><h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><blockquote><p>实质上插件本身是通过我们选择时给的选项生成Dockerfile文件和一个 .devcontainer.json文件，这个文件是用于生成的镜像执行的文件包括一些环境配置。</p></blockquote><blockquote><p>在我们选择好选项后，插件生成Dockerfile并且build镜像启动容器，在这个过程中我们的工作目录会自动挂载到容器内的/vscode目录下</p></blockquote><blockquote><p>如果想先看看生成的配置文件，再执行构建，可以选择这条选项</p></blockquote><p><img src="/images/pasted-167.png" alt="upload successful"></p><blockquote><p>选择目录，选择配置，生成文件，修改配置确认无误后，可以再次选择 open container 打开配置文件所在目录就会开始自动构建配置</p></blockquote><h3 id="VSC的插件入门"><a href="#VSC的插件入门" class="headerlink" title="VSC的插件入门"></a>VSC的插件入门</h3><p><img src="/images/pasted-165.png" alt="upload successful"></p><p>每次打开都可以看到主页面的右下角这些start，随便点击即可看到插件的学习使用教程，推荐安装的插件每个都看一下知道怎么修改配置</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Visual-Studio-Code-Remote-Container&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code-Remote-Container&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code : Remote Container&quot;&gt;&lt;/a&gt;Visual Studio Code : Remote Container&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一款神级插件使用说明&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="VSC" scheme="http://example.com/categories/VSC/"/>
    
    
    <category term="VSC" scheme="http://example.com/tags/VSC/"/>
    
  </entry>
  
  <entry>
    <title>DockerCompose</title>
    <link href="http://example.com/2022/03/31/DockerCompost/"/>
    <id>http://example.com/2022/03/31/DockerCompost/</id>
    <published>2022-03-31T09:45:00.000Z</published>
    <updated>2025-03-01T12:26:37.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h1><span id="more"></span><p><a href="https://docs.docker.com/compose/gettingstarted/">官方学习文档</a></p><h2 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h2><p>DockerFile有了以后，build，run只针对一个容器，效率不高，如果多个服务之前存在依赖关系很麻烦</p><p>Docker Compose 是用来定义和运行多个容器的应用，使用yaml配置文件</p><p>正常使用有三个步骤：</p><ol><li>定义应用的环境（Dockefile）</li><li>docker-compose.yml 用来定义服务</li><li>运行 docker compose up 启动项目</li></ol><p>这个其实也就比自己手动写脚本好用，还是很局限，本质是脚本方式启动电脑上的一些服务</p><blockquote><p>对于docker compose的一些说明</p></blockquote><blockquote><p>如果使用的是官方示例可以发现启动的容器名字是文件夹的名字+副本数量</p></blockquote><blockquote><p>会默认创建对应的 文件夹_default的网络，yml配置文件内定义的若干个服务启动后，这些服务都在同一个网络下，之后互相访问可以直接通过容器名访问</p></blockquote><h2 id="yml-规则"><a href="#yml-规则" class="headerlink" title="yml 规则"></a>yml 规则</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3层</span></span><br><span class="line"></span><br><span class="line">version : &#x27;&#x27; #版本</span><br><span class="line"></span><br><span class="line">service : #服务</span><br><span class="line">service1:web</span><br><span class="line">    images:</span><br><span class="line">        build:</span><br><span class="line">        volume:</span><br><span class="line">        ...</span><br><span class="line">    service2:redis</span><br><span class="line">    depends_on:</span><br><span class="line">        - db</span><br><span class="line">        - redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他配置 网络 卷 全局规则</span></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">network:</span><br><span class="line">configs:</span><br></pre></td></tr></table></figure><p>一些重要的参数的详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动的时候是有一个启动顺序的，需要保证其他服务器启动</span></span><br><span class="line">depends_on:</span><br><span class="line">- db</span><br><span class="line"><span class="meta">#</span><span class="bash"> db 这里指的是自己定义的服务名</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> image: 这里指的是镜像import的基础镜像</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">web:</span><br><span class="line">      # 指令执行 镜像构建成功后执行的命令</span><br><span class="line">      command: python manage.py runserver 0.0.0.0:8000</span><br><span class="line">      # 构建 根据当前目录的dockerfile文件构建这个镜像</span><br><span class="line">      build: .</span><br><span class="line">      # 暴露的端口 本地8000 容器5000</span><br><span class="line">      ports:</span><br><span class="line">        - &quot;8000:5000&quot;</span><br><span class="line">      # 挂载卷，启动docker的目录，映射到容器的code目录</span><br><span class="line">      volumes:</span><br><span class="line">        - .:/code</span><br><span class="line">      # 环境变量设置</span><br><span class="line">      environment:</span><br><span class="line">        FLASK_ENV: development</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volume 还有其他挂载方式 具名挂载</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    volumes: </span><br><span class="line">      - mysql_db_data:/var/lib/mysql</span><br><span class="line">      </span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要单独声明具名挂载的卷 其实是为了多个容器公用数据</span>      </span><br><span class="line">volumes:</span><br><span class="line">  mysql_db_data: &#123;&#125;</span><br><span class="line">  wordpress_data: &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="springboot实例"><a href="#springboot实例" class="headerlink" title="springboot实例"></a>springboot实例</h2><p>以公司的spring项目为例，首先确保<code>java -jar</code>没有问题，但是我maven打包后执行<code>java -jar</code>自动退出，打开日志详细发现没有指定yml配置文件的问题，通过<code>java -jar -Dspring.config.location=./application.yml,./application-local.yml phm-admin.jar</code> 且拷贝两个配置文件到本地才成功。</p><p>编写这个springboot的镜像吧，基于java8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">COPY target/phm-admin.jar /app.jar</span><br><span class="line">COPY src/main/resources/*.yml ./</span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;-Dspring.config.location=./application.yml,./application-local.yml&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure><p>成功后编写对应的docker-compose文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意要修改配置文件，把依赖的redis的地址改为<code>redis</code>，这里用的是redis的主机名</p></blockquote><p><img src="/images/pasted-158.png" alt="upload successful"></p><h2 id="DockerSwarm"><a href="#DockerSwarm" class="headerlink" title="DockerSwarm"></a>DockerSwarm</h2><blockquote><p>Docker swarm控制服务器物理集群（加入离开锁定集群）</p></blockquote><blockquote><p>Docker node控制集群节点（修改删除节点）</p></blockquote><blockquote><p>Docker service控制集群的所有服务（启动删除更新扩容服务）</p></blockquote><blockquote><p>Docker task(不是我们关心的，对于具体容器的创建，维护等)</p></blockquote><p><img src="/images/pasted-168.png" alt="upload successful"></p><blockquote><p>操作都在manager节点上，执行都在工作节点上，搭建集群的时候机器数量一定得是奇数，因为采用了投票机制，半数以上才可以</p></blockquote><blockquote><p>swam的命令</p></blockquote><p><img src="/images/pasted-169.png" alt="upload successful"></p><h3 id="1-初始化swarm："><a href="#1-初始化swarm：" class="headerlink" title="1. 初始化swarm："></a>1. 初始化swarm：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --help #可以看到所有选项</span><br><span class="line">docker swarm init --advertis-addr #初始化一个广播地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个地址是节点间互相链接的地址分为：公网，私网，基本用私网免费地址即本机的内网IP地址</span></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-170.png" alt="upload successful"></p><h3 id="2-获取令牌"><a href="#2-获取令牌" class="headerlink" title="2. 获取令牌"></a>2. 获取令牌</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token manager # 管理令牌</span><br><span class="line">docker swarm join-token worker # 工作令牌</span><br></pre></td></tr></table></figure><h3 id="3-节点加入"><a href="#3-节点加入" class="headerlink" title="3. 节点加入"></a>3. 节点加入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在第二台机器加入一个worker节点</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意 被加入的节点需要防火墙允许 2377 端口</span></span><br><span class="line">docker swarm join     --token SWMTKN-1-4vm7k4jkahd939fpsmd5spts5ejlkyke968i1il8yld3oyj77r-89wdwoemvmr1joyvnu8bo7wrj     192.168.56.101:2377</span><br></pre></td></tr></table></figure><p>加入管理节点也是同理，管理者需要打开防火墙 2377端口。</p><p><img src="/images/pasted-171.png" alt="upload successful"></p><p><img src="/images/pasted-173.png" alt="upload successful"></p><blockquote><p>主节点管理工作节点：docker node –help</p></blockquote><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><blockquote><p>关于服务的命令：docker service –help</p></blockquote><blockquote><p>灰度发布</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建服务的一些参数</span></span><br><span class="line">docker service create --help #查看所有参数</span><br><span class="line">-e:# 配置环境变量</span><br><span class="line">                    -l:# 服务标签</span><br><span class="line">                    -p:# 暴露端口</span><br><span class="line">                    -w:# 工作目录</span><br><span class="line">docker service create -p 8888:80 --name mynginx nginx </span><br><span class="line"><span class="meta">#</span><span class="bash">会发现和docker run命令很相似，实际上docker run的命令不具有扩缩容，只是个单机架构，docker service会在集群中选择一台服务器启动服务</span></span><br><span class="line">docker service ls # 查看服务，这是集群的所有服务</span><br><span class="line">docker service ps &lt;具体服务&gt; #查看具体服务的信息</span><br><span class="line">docker service inspect &lt;具体服务&gt; #服务的配置信息，部署在哪台主机上都可以看到</span><br><span class="line">docker service update --help # 动态修改服务的信息，包括扩容缩容等</span><br><span class="line">--replicas # 服务的副本数量</span><br><span class="line">docker service update --replicas 3 mynginx # 给这个服务扩展了两个</span><br><span class="line"></span><br><span class="line">docker service scale mynginx=4 # 同replicas的功能</span><br><span class="line"></span><br><span class="line">docker service rm &lt;具体服务名&gt; # 移除服务</span><br><span class="line"></span><br><span class="line">docker service rollback &lt;服务&gt; # 如果上一次扩容了，回滚到上次</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局模式</span></span><br><span class="line">docker service create --mode global ....# 启动全局服务，不加默认是replicated副本模式</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">全局服务不可拓展只有一个，一般可以用来作为中心日志收集服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h3><p>docker compose 是单机的，想要集群部署，需要docker stack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d xxx.yml # 单机</span><br><span class="line"></span><br><span class="line">docker stack deploy xxx.yml # 部署一个可以扩容的服务</span><br></pre></td></tr></table></figure><h3 id="Docker-Secret"><a href="#Docker-Secret" class="headerlink" title="Docker Secret"></a>Docker Secret</h3><p>安全配置，配置证书密码等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker secret --help</span><br></pre></td></tr></table></figure><h3 id="Docker-Config"><a href="#Docker-Config" class="headerlink" title="Docker Config"></a>Docker Config</h3><p>配置</p><h3 id="做云的思想"><a href="#做云的思想" class="headerlink" title="做云的思想"></a>做云的思想</h3><p>有了docker swarm其实已经可以做云了，举例，用公司机房，加入机房平时不忙，服务器都闲置的时候其实可以搭建好docker swam的集群环境，做个卖vps的页面，用户每次买一个服务器，实际就在docker中新建一个linux虚拟机，副本新增一个，配置给路由器好网络出入站规则，就是一个简单的云了。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>部署好后，服务器的任意一个地址都可以访问集群内的服务，这时候一台服务器可以开多个同端口的服务，因为服务之间访问是通过容器名而不是ip+端口,集群内部通过DNS访问service</p><p>Docker Swarm 的负载均衡分为两种：</p><p>Swarm集群内的service之间的相互访问需要做负载均衡，称为内部负载均衡（Internal LB）</p><p>从Swarm集群外部访问服务的公开端口，也需要做负载均衡，称外部部负载均衡(Exteral LB or Ingress LB)</p><h2 id="了解-集群节点奇数的原因"><a href="#了解-集群节点奇数的原因" class="headerlink" title="了解 集群节点奇数的原因"></a>了解 集群节点奇数的原因</h2><p><a href="https://blog.csdn.net/qq_42393859/article/details/82792211">转载其他人blog</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">无论是公司的生产环境，还是自己搭建的测试环境，Zookeeper集群的节点个数都是奇数个。至于为什么要是奇数个，以前只是模糊的知道是为了满足选举需要，并不知道详细的原因。最近重点学习zookeeper，了解到其中的原理，现将其整理记录下来。</span><br><span class="line"></span><br><span class="line">首先需要明确zookeeper选举的规则：leader选举，要求 可用节点数量 &gt; 总节点数量/2  。注意 是 &gt; , 不是 ≥。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">注：为什么规则要求 可用节点数量 &gt; 集群总结点数量/2 ？  如果不这样限制，在集群出现脑裂的时候，可能会出现多个子集群同时服务的情况（即子集群各组选举出自己的leader）， 这样对整个zookeeper集群来说是紊乱的。</span><br><span class="line"></span><br><span class="line">换句话说，如果遵守上述规则进行选举，即使出现脑裂，集群最多也只能回出现一个子集群可以提供服务的情况（能满足节点数量&gt; 总结点数量/2 的子集群最多只会有一个）。所以要限制 可用节点数量 &gt; 集群总结点数量/2 。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">采用奇数个的节点主要是出于两方面的考虑：</span><br><span class="line"></span><br><span class="line">1、防止由脑裂造成的集群不可用。</span><br><span class="line"></span><br><span class="line">首先，什么是脑裂？集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，小集群各自选出自己的master节点，导致原有的集群出现多个master节点的情况，这就是脑裂。</span><br><span class="line"></span><br><span class="line">下面举例说一下为什么采用奇数台节点，就可以防止由于脑裂造成的服务不可用：</span><br><span class="line"></span><br><span class="line">(1) 假如zookeeper集群有 5 个节点，发生了脑裂，脑裂成了A、B两个小集群： </span><br><span class="line"></span><br><span class="line">     (a) A ： 1个节点 ，B ：4个节点 ， 或 A、B互换</span><br><span class="line"></span><br><span class="line">     (b) A ： 2个节点， B ：3个节点  ， 或 A、B互换</span><br><span class="line"></span><br><span class="line">    可以看出，上面这两种情况下，A、B中总会有一个小集群满足 可用节点数量 &gt; 总节点数量/2 。所以zookeeper集群仍然能够选举出leader ， 仍然能对外提供服务，只不过是有一部分节点失效了而已。</span><br><span class="line"></span><br><span class="line">(2) 假如zookeeper集群有4个节点，同样发生脑裂，脑裂成了A、B两个小集群：</span><br><span class="line"></span><br><span class="line">    (a) A：1个节点 ，  B：3个节点，   或 A、B互换 </span><br><span class="line"></span><br><span class="line">    (b) A：2个节点 ， B：2个节点</span><br><span class="line"></span><br><span class="line">    可以看出，情况(a) 是满足选举条件的，与（1）中的例子相同。 但是情况(b) 就不同了，因为A和B都是2个节点，都不满足 可用节点数量 &gt; 总节点数量/2 的选举条件， 所以此时zookeeper就彻底不能提供服务了。</span><br><span class="line"></span><br><span class="line">综合上面两个例子可以看出： 在节点数量是奇数个的情况下， zookeeper集群总能对外提供服务（即使损失了一部分节点）；如果节点数量是偶数个，会存在zookeeper集群不能用的可能性（脑裂成两个均等的子集群的时候）。</span><br><span class="line"></span><br><span class="line">在生产环境中，如果zookeeper集群不能提供服务，那将是致命的 ， 所以zookeeper集群的节点数一般采用奇数个。</span><br><span class="line"></span><br><span class="line">2、在容错能力相同的情况下，奇数台更节省资源。</span><br><span class="line"></span><br><span class="line">leader选举，要求 可用节点数量 &gt; 总节点数量/2  。注意 是 &gt; , 不是 ≥。</span><br><span class="line"></span><br><span class="line">举两个例子：</span><br><span class="line"></span><br><span class="line">(1) 假如zookeeper集群1 ，有3个节点，3/2=1.5 ,  即zookeeper想要正常对外提供服务（即leader选举成功），至少需要2个节点是正常的。换句话说，3个节点的zookeeper集群，允许有一个节点宕机。</span><br><span class="line"></span><br><span class="line">(2) 假如zookeeper集群2，有4个节点，4/2=2 , 即zookeeper想要正常对外提供服务（即leader选举成功），至少需要3个节点是正常的。换句话说，4个节点的zookeeper集群，也允许有一个节点宕机。</span><br><span class="line"></span><br><span class="line">那么问题就来了， 集群1与集群2都有 允许1个节点宕机 的容错能力，但是集群2比集群1多了1个节点。在相同容错能力的情况下，本着节约资源的原则，zookeeper集群的节点数维持奇数个更好一些。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker-compose&quot;&gt;&lt;a href=&quot;#Docker-compose&quot; class=&quot;headerlink&quot; title=&quot;Docker compose&quot;&gt;&lt;/a&gt;Docker compose&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux 安装 + 大部分的软件配置</title>
    <link href="http://example.com/2022/03/28/ArchLinux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/03/28/ArchLinux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2022-03-28T09:18:00.000Z</published>
    <updated>2025-03-01T12:26:37.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArchLinux安装配置"><a href="#ArchLinux安装配置" class="headerlink" title="ArchLinux安装配置"></a>ArchLinux安装配置</h1><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><p>我的是双系统的配置，在安装之前划分50GB的磁盘空间</p><blockquote><ol><li>去官网下载镜像，制作usb启动盘</li><li>开机进入usb的livecd内</li></ol></blockquote><span id="more"></span><h3 id="联网设置"><a href="#联网设置" class="headerlink" title="联网设置"></a>联网设置</h3><p>用的笔记本 所以使用wlan联网，arch的livecd环境里提供了iwctl命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iwctl #进入</span><br><span class="line">device list #查看所有网卡设备 这里我只有wlan0设备</span><br><span class="line">station wlan0 get-networks #获取wifi链接</span><br><span class="line">station wlan0 connect wifi名 # 会提示输入密码，输入即可</span><br><span class="line">exit #退出</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="划分分区"><a href="#划分分区" class="headerlink" title="划分分区"></a>划分分区</h3><blockquote><p>划分扇区，按照arch的规定，至少要一个swap分区（否则无法休眠）和一个主分区以及boot分区（boot分区内存放了esp信息）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lsblk #查看分区信息</span><br><span class="line">fdisk -l # 查看分区信息</span><br><span class="line">fdisk -l /dev/nvme0n1 # 查看使用的这块硬盘的分区信息</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果在windows中压缩出了50GB，且建立了扇区的话这里要删除这个扇区</span></span><br><span class="line">fdisk /dev/nvme0n1  # 进入管理扇区模式</span><br><span class="line"></span><br><span class="line">p #打印所有分区信息</span><br><span class="line">d #删除分区（我这里删除8号分区50GB的那个，之前在windows下建立了分区）</span><br><span class="line">n #新建swap分区 （提示输入分区头地址信息，回车即可，提示分配大小，输入：+2GB，回车即可）</span><br><span class="line">n #新建boot分区 （提示输入分区头地址信息，回车即可，提示分配大小，输入：+512MB，回车即可）</span><br><span class="line">n #新建主分区 全部回车即可</span><br><span class="line">t #改变两个分区类型（提示数字，选择刚刚建立的两个分区，修改EFI类型和swap类型）</span><br><span class="line">w #写入分区信息 </span><br></pre></td></tr></table></figure><blockquote><p>新的分区会有新的名字，fdisk -l /dev/nvme0n1 会看到新的三个分区信息 可能是这样的命名：nvme0n1p6（512MB的efi分区） , nvme0n1p7（2GB的swap分区） , nvme0n1p8（47GB的主分区）</p></blockquote><blockquote><p>格式化分区：</p><ul><li>mkfs.ext4 /dev/nvme0n1p8</li><li>mkswap /dev/nvme0n1p7</li><li>mkfs.fat -F 32 /dev/nvme0n1p6</li></ul></blockquote><blockquote><p>启动交换区：swapon /dev/nvme0n1p7</p></blockquote><blockquote><p>挂载分区：</p><ul><li>mount /dev/nvme0n1p8 /mnt # 这里挂载到livecd的mnt目录下，因为安装的资料会拷贝进去</li><li>mount /dev/nvme0n1p6 /mnt/boot #若无boot目录 mkdir /mnt/boot即可</li></ul></blockquote><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>pacstrap /mnt base linux linux-firmware  # 开始正式拷贝内核信息和启动条码到主分区和esp分区</p><h4 id="2-自动挂载"><a href="#2-自动挂载" class="headerlink" title="2. 自动挂载"></a>2. 自动挂载</h4><p>安装完成后执行：<code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab # 生成自动挂载信息</code>，有了这个文件，每次系统启动就会读取并自动挂载</p><h4 id="3-切换到安装好的系统：arch-chroot-mnt"><a href="#3-切换到安装好的系统：arch-chroot-mnt" class="headerlink" title="3. 切换到安装好的系统：arch-chroot /mnt"></a>3. 切换到安装好的系统：arch-chroot /mnt</h4><h4 id="4-配置时区"><a href="#4-配置时区" class="headerlink" title="4. 配置时区"></a>4. 配置时区</h4><p><code>ln -sf /usr/share/zoneinfo/Region/City /etc/localtime</code></p><p><code>hwclock --systohc</code></p><h4 id="5-配置系统语言"><a href="#5-配置系统语言" class="headerlink" title="5. 配置系统语言"></a>5. 配置系统语言</h4><p>编辑 <code>/etc/locale.gen</code> 取消这个注释 <code>en_US.UTF-8 UTF-8</code></p><p>最后生成语言信息 执行： <code>locale-gen</code> </p><p>然后编辑<code>/etc/locale.conf</code>文件 写入：<code>LANG=en_US.UTF-8</code></p><h4 id="6-写入hostname信息"><a href="#6-写入hostname信息" class="headerlink" title="6. 写入hostname信息"></a>6. 写入hostname信息</h4><p><code>vim /etc/hostname</code>内容可随意</p><h4 id="7-生成Initramfs（如果使用了refind需要生成）"><a href="#7-生成Initramfs（如果使用了refind需要生成）" class="headerlink" title="7. 生成Initramfs（如果使用了refind需要生成）"></a>7. 生成Initramfs（如果使用了refind需要生成）</h4><p><code>mkinitcpio -P</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#initramfs 原理：</span><br><span class="line">Linux系统启动时使用initramfs (initram file system), initramfs可以在启动早期提供一个用户态环境，借助它可以完成一些内核在启动阶段不易完成的工作。当然initramfs是可选的，Linux中的内核编译选项默认开启initrd。在下面的示例情况中你可能要考虑用initramfs。</span><br><span class="line"></span><br><span class="line">加载模块，比如第三方driver</span><br><span class="line">定制化启动过程 (比如打印welcome message等)</span><br><span class="line">制作一个非常小的rescue shell</span><br><span class="line">任何kernel不能做的，但在用户态可以做的 (比如执行某些命令)</span><br><span class="line">一个initramfs至少要包含一个文件，文件名为/init。内核将这个文件执行起来的进程作为main init进程(pid 1)。当内核挂载initramfs后，文件系统的根分区还没有被mount, 这意味着你不能访问文件系统中的任何文件。如果你需要一个shell，必须把shell打包到initramfs中，如果你需要一个简单的工具，比如ls, 你也必须把它和它依赖的库或者模块打包到initramfs中。总之，initramfas是一个完全独立运行的体系。</span><br></pre></td></tr></table></figure><h4 id="8-修改密码-添加用户"><a href="#8-修改密码-添加用户" class="headerlink" title="8. 修改密码 添加用户"></a>8. 修改密码 添加用户</h4><p><code>passwd</code> # 修改root密码</p><p><code>useradd -m -G wheel tr</code> # 创建wheel用户组下的用户tr</p><p><code>passwd tr</code>#修改密码</p><p>修改文件：<code>/etc/sudoers</code>，取消注释：<code>%wheel ALl=(ALL:ALL) ALL</code>，这样wheel组下的除root用户的其他用户才能执行任何命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-m 创建主目录</span><br><span class="line">-G wheel 指定用户组为wheel（管理员组，如果不是这个组的用户，无法通过su命令成为管理员）</span><br></pre></td></tr></table></figure><h4 id="9-1-配置网络源"><a href="#9-1-配置网络源" class="headerlink" title="9.1 配置网络源"></a>9.1 配置网络源</h4><p>镜像配置：<code>vim /etc/pacman.d/mirrorlist</code> </p><p>添加内容<code>Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch </code></p><p>cn源配置：<code>vim /etc/pacman.conf </code></p><p>添加内容：<code>[archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch </code></p><p>导入key：<code>pacman -S archlinuxcn-keyring</code></p><p>更新仓库：<code>pacman -Syy</code></p><h4 id="9-2-安装基本的工具包"><a href="#9-2-安装基本的工具包" class="headerlink" title="9.2 安装基本的工具包"></a>9.2 安装基本的工具包</h4><p>安装一些常用的网络管理工具和编辑工具等，这里面还安装了grub + os-prober，如果不用grub启动可以换成其他boot loader 如rEFind</p><p><code>pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo wget vim</code></p><h4 id="10-安装配置-boot-loader"><a href="#10-安装配置-boot-loader" class="headerlink" title="10.安装配置 boot loader"></a>10.安装配置 boot loader</h4><p>如果你是intel的cpu，需要安装intel的微码文件：<code>pacman -S intel-ucode</code><br>如果是amd <code>pacman -S amd-ucode</code></p><p>推荐使用rEFind，美观多了，使用它之前确保生成了Initramfs,也就是第七步内容</p><p>执行<code>pacman -S refind</code> , <code>refind-install</code></p><p>执行完后可以查看boot目录是否写入了配置</p><h4 id="11-rEFind配置"><a href="#11-rEFind配置" class="headerlink" title="11. rEFind配置"></a>11. rEFind配置</h4><p>refind所有配置都在esp分区也就是boot目录：<code>ls /boot/</code></p><p>可以看到refind_linux.conf配置文件，里面写了不同情况下的启动，里面的id是分区id，分区id有很多种，uuid，partuuid，id等，通过命令看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev/disk/by-</span><br><span class="line">by-id/        by-label/     by-partlabel/ by-partuuid/  by-path/      by-uuid/</span><br></pre></td></tr></table></figure><p>rEFind真正的启动配置：<code>/boot/EFI/refind/refind.conf</code>，这个文件内描述了启动条目包括启动的图标，loader等</p><h4 id="12-识别windows问题"><a href="#12-识别windows问题" class="headerlink" title="12. 识别windows问题"></a>12. 识别windows问题</h4><p>不管是用grub还是rEFind，都不需要我们手动执行操作，系统应该可以自动识别，因为使用了UEFI的启动方式，当机器开机时，不再读取MBR内容，而是读取磁盘内的ESP分区，找到ESP的分区启动条目后显示在启动菜单内。</p><p>安装完rEFind或者grub后，会在UEFI的启动项内新增启动条目，开机进入UEFI可以看到（Acer是f2进入bios，f12进入UEFI启动序列）</p><p>如果使用rEFind启动但是没有windows的图标（不太可能），可以先进入linux系统，手动挂载windows的ESP分区（很小 只有100<br>，里面有个Microsoft目录），把目录的Microsoft目录拷贝到<code>/boot/EFI/</code>下</p><h4 id="13-完成安装"><a href="#13-完成安装" class="headerlink" title="13. 完成安装"></a>13. 完成安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #退出系统</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="安装后的配置"><a href="#安装后的配置" class="headerlink" title="安装后的配置"></a>安装后的配置</h3><p>大体配置按照文档来：<a href="https://wiki.archlinux.org/title/General_recommendations">安装后的推荐配置</a></p><p>开机启动进入新系统</p><h4 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h4><p>时间快了8个小时，这个是因为双系统下，linux认为电脑时钟就是UTC时间，时区是上海，所以+了8小时。但是windwos下认为电脑时钟（Bios时间）是本地时间。这个问题可以通过把时区设置为+0或者使用网络时间解决。</p><p>timedatectl #查看本机时间</p><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><p>按照archlinux官方文档来：<a href="https://wiki.archlinux.org/title/NetworkManager_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">网络配置</a></p><p><code>systemctl enable --now NetworkManager</code> 自动启动网络管理工具</p><p><code>nmtui</code> 设置wifi</p><h4 id="显卡启动（集显就别操心了）"><a href="#显卡启动（集显就别操心了）" class="headerlink" title="显卡启动（集显就别操心了）"></a>显卡启动（集显就别操心了）</h4><p>NVIDIA独显驱动：pacman -S nvidia nvidia-utils</p><h4 id="图形界面配置"><a href="#图形界面配置" class="headerlink" title="图形界面配置"></a>图形界面配置</h4><p>显示服务器有Xorg 和 Wayland，推荐Xorg：<code>pacman -S xorg</code></p><p>显示管理器有gdm(Gnome),sddm(Kde)的，我偏爱Gnome环境 <code>pacman -S gdm</code> <code>systemctl enable gdm</code></p><p>桌面环境也是Gnome：<code>pacman -S gnome</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xorg</span><br><span class="line">概述</span><br><span class="line">xorg是x11的一个实现，而x window system是一个C/S结构的程序，xorg只是提供一个X server，负责底层的操作。当你运行一个程序的时候，这个程序会链接到X server上，由X server接收键盘鼠标输入和负责屏幕输出窗口的移动、窗口标题的样式等。</span><br><span class="line"></span><br><span class="line">X window 是由X server 和 X client组成，X server 和 X client之间的通信是通过 X 协议。</span><br><span class="line"></span><br><span class="line">x server</span><br><span class="line">仅仅负责鼠标、键盘、显卡、显示器这些输入输出部件。由于硬件厂商很多，所以x server不能自动识别出所有需要的参数，如果识别不出来，那么就需要编辑一下/etc/X11/xorg.conf文件进行配置。</span><br><span class="line"></span><br><span class="line">x client</span><br><span class="line">负责处理程序的运行。比如单击一下gvim图标，x server会告诉x client用户刚才移动鼠标到什么位置并做了什么操作，x client收到后会识别操作并作出相应的反馈，打开gvim程序，然后x client让x server在显示器上显示一个gvim的画面。</span><br><span class="line"></span><br><span class="line">xorg与桌面环境的关系</span><br><span class="line">先介绍几个概念：窗口管理器、显示管理器和文件管理器</span><br><span class="line"></span><br><span class="line">窗口管理器则是为了实现一个屏幕上显示多个X程序,实现调整程序大小,标题栏,最大化,最小化,关闭按钮,虚拟桌面这些功能。如果没有窗口管理器，那么一次只能运行一个GUI程序,而且分辨率锁死,显然很不符合使用习惯。窗口管理器往往集成在常见的桌面环境中，比如Xfce使用的窗口管理器为Xfwm,此外还有Gnome的mutter,KDE的Kwin等。</span><br><span class="line"></span><br><span class="line">显示管理器（display manager）,用于开机后显示登陆界面,并启动窗口管理器等X组件.没有显示管理器,Linux开机会显示命令行登陆界面,需要使用命令行登陆后手动启动Xserver和窗口管理器才能显示GUI,显示管理器自动的完成这些工作.常见的有GDM、LightDM、DDM。</span><br></pre></td></tr></table></figure><h4 id="yaourt配置"><a href="#yaourt配置" class="headerlink" title="yaourt配置"></a>yaourt配置</h4><p>需要添加国内源才能用<code>pacman -S yaourt</code></p><h4 id="中文字体配置"><a href="#中文字体配置" class="headerlink" title="中文字体配置"></a>中文字体配置</h4><p>字体可以随便下载，但是下载的字体如果不选择默认字体（不编辑~/.config/fontconfig/fonts.conf）的话，linux渲染对的字体可能来自不同字体集合，导致有的字体粗，有的字体细。可以通过下载fontweak这个gui文件可视化的编辑，更加方便<code>yaourt fontweak</code></p><p>全部字体可以在wiki内看到：<a href="https://wiki.archlinux.org/title/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E4%B8%AD%E6%96%87%E5%AD%97">字体</a></p><p>这里推荐win10的字体感觉还蛮好看的</p><p><code>yaourt -S ttf-ms-win10-zh_cn</code></p><h4 id="手动安装中文字体（可选）"><a href="#手动安装中文字体（可选）" class="headerlink" title="手动安装中文字体（可选）"></a>手动安装中文字体（可选）</h4><p>如果字体不好安装，仓库中下载失败，可以手动安装win10字体（从win10系统中拷贝过来，可以使用<br>盘）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">nvme0n1     259:0    0 476.9G  0 disk </span><br><span class="line">├─nvme0n1p1 259:1    0   100M  0 part </span><br><span class="line">├─nvme0n1p2 259:2    0    16M  0 part </span><br><span class="line">├─nvme0n1p3 259:3    0 237.4G  0 part </span><br><span class="line">├─nvme0n1p4 259:4    0     1G  0 part </span><br><span class="line">├─nvme0n1p5 259:5    0 188.2G  0 part </span><br><span class="line">├─nvme0n1p6 259:6    0     2G  0 part [SWAP]</span><br><span class="line">├─nvme0n1p7 259:7    0   512M  0 part /boot</span><br><span class="line">└─nvme0n1p8 259:8    0  47.7G  0 part /</span><br><span class="line">➜  ~ mount /dev/nvme0n1p3 ~/ms</span><br><span class="line">mount: /home/tr/ms: must be superuser to use mount.</span><br><span class="line">➜  ~ sudo mount /dev/nvme0n1p3 ~/ms</span><br><span class="line"></span><br><span class="line">[root@tr tr]# mkdir /usr/share/fonts/windows</span><br><span class="line">[root@tr tr]# cp ms/Windows/Fonts/* /usr/share/fonts/windows/</span><br><span class="line">[root@tr tr]# chmod -R 777 /usr/share/fonts/windows</span><br><span class="line">[root@tr tr]# fc-cache -vf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文泉驿中文（推荐）"><a href="#文泉驿中文（推荐）" class="headerlink" title="文泉驿中文（推荐）"></a>文泉驿中文（推荐）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo pacman -S wqy-microhei wqy-bitmapfont wqy-zenhei wqy-microhei-lite adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</span><br><span class="line">➜  ~ sudo pacman -S ttf-dejavu noto-fonts noto-fonts-extra noto-fonts-emoji noto-fonts-cjk</span><br><span class="line">➜  ~ vim .config/fontconfig/fonts.conf </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fonts.conf 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;fontconfig&gt;</span><br><span class="line">  &lt;dir&gt;~/.fonts&lt;/dir&gt;</span><br><span class="line">  &lt;match&gt;</span><br><span class="line">    &lt;test name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;sans-serif&lt;/string&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;edit binding=&quot;strong&quot; mode=&quot;prepend&quot; name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Zen Hei Sharp&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Zen Hei&lt;/string&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match&gt;</span><br><span class="line">    &lt;test name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;serif&lt;/string&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;edit binding=&quot;strong&quot; mode=&quot;prepend&quot; name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Micro Hei Light&lt;/string&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match&gt;</span><br><span class="line">    &lt;test name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;monospace&lt;/string&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;edit binding=&quot;strong&quot; mode=&quot;prepend&quot; name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Micro Hei Mono&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Zen Hei Mono&lt;/string&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;antialias&quot;&gt;</span><br><span class="line">      &lt;bool&gt;true&lt;/bool&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;hinting&quot;&gt;</span><br><span class="line">      &lt;bool&gt;true&lt;/bool&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;hintstyle&quot;&gt;</span><br><span class="line">      &lt;const&gt;hintfull&lt;/const&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;rgba&quot;&gt;</span><br><span class="line">      &lt;const&gt;none&lt;/const&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;lcdfilter&quot;&gt;</span><br><span class="line">      &lt;const&gt;lcddefault&lt;/const&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;embeddedbitmap&quot;&gt;</span><br><span class="line">      &lt;bool&gt;false&lt;/bool&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">&lt;/fontconfig&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="搜狗拼音"><a href="#搜狗拼音" class="headerlink" title="搜狗拼音"></a>搜狗拼音</h3><p>安装拼音管理工具：<code>pacman -S fcitx-im fcitx-configtool</code></p><p>修改配置文件：<code>vim /etc/profile（全局配置）</code>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fcitx</span></span><br><span class="line">export XIM=fcitx</span><br><span class="line">export XIM_PROGRAM=fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><p>安装搜狗拼音：<code>yaourt fcitx-sogoupinyin</code>，注销后登录，可以看到fcitx的图形化管理工具，在input method configuration内选择<code>+</code>添加搜狗拼音即可,注销后登录即可</p><h3 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h3><p>yaourt -S google-chrome </p><p>需要用非root用户打开</p><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h3><p><a href="https://github.com/ohmyzsh/ohmyzsh">oh my zsh</a></p><p>安装zsh : <code>pacman -S zsh</code></p><p>安装oh my zsh并安装：<code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code> </p><p>配置文件在：~/.zshrc，可以在里面编辑主题和插件</p><h4 id="配置箭头主题的zsh-和-vim"><a href="#配置箭头主题的zsh-和-vim" class="headerlink" title="配置箭头主题的zsh 和 vim"></a>配置箭头主题的zsh 和 vim</h4><h5 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h5><p>powerline字体和插件配置都可以从wiki找到：<a href="https://wiki.archlinux.org/title/Powerline">powerline</a></p><p>安装power line字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span></span></span><br><span class="line">git clone https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> install</span></span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> clean-up a bit</span></span><br><span class="line">cd ..</span><br><span class="line">rm -rf fonts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置power line字体到oh my zsh 界面：vim ~/.zshrc追加：</span></span><br><span class="line"></span><br><span class="line">powerline-daemon -q</span><br><span class="line">. /usr/share/powerline/bindings/zsh/powerline.zsh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> ~/.zshrc生效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改配置文件找到ZSH_THEME,修改里面值为agnoster，<code>source ~/.zshrc</code>生效</p><h5 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h5><p>安装power line status 状态栏 用于vim等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> pacman -S powerline-vim  #安装vim插件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装vim插件管理器</span></span><br><span class="line">sh -c &#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>编辑~/.vimrc 写入以下内容</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot; Plugins will be downloaded under the specified directory.</span><br><span class="line">call plug#begin(has(&#x27;nvim&#x27;) ? stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27; : &#x27;~/.vim/plugged&#x27;)</span><br><span class="line"></span><br><span class="line">&quot; Declare the list of plugins.</span><br><span class="line">Plug &#x27;tpope/vim-sensible&#x27;</span><br><span class="line">Plug &#x27;junegunn/seoul256.vim&#x27;</span><br><span class="line">set rtp+=/usr/share/powerline/bindings/vim</span><br><span class="line"></span><br><span class="line">&quot; List ends here. Plugins become visible to Vim after this call.</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><blockquote><p>vim 打开vim 执行 ：PlugInstall</p></blockquote><h4 id="配置zsh的插件zsh-autosuggestions"><a href="#配置zsh的插件zsh-autosuggestions" class="headerlink" title="配置zsh的插件zsh-autosuggestions"></a>配置zsh的插件zsh-autosuggestions</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Clone this repository into <span class="variable">$ZSH_CUSTOM</span>/plugins (by default ~/.oh-my-zsh/custom/plugins)</span></span><br><span class="line"></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta">#</span><span class="bash"> Add the plugin to the list of plugins <span class="keyword">for</span> Oh My Zsh to load (inside ~/.zshrc):</span></span><br><span class="line"></span><br><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>source ~/.zshrc 生效配置</p><p>默认补全使用右箭头，自动补全可以使用逗号，编辑 ~/.zshrc 写入如下配置即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindkey &#x27;,&#x27; autosuggest-accept</span><br></pre></td></tr></table></figure><h4 id="配置zsh插件-z"><a href="#配置zsh插件-z" class="headerlink" title="配置zsh插件 z"></a>配置zsh插件 z</h4><p>类似 autojump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    z</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="安装配置gnome桌面插件"><a href="#安装配置gnome桌面插件" class="headerlink" title="安装配置gnome桌面插件"></a>安装配置gnome桌面插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://aur.archlinux.org/chrome-gnome-shell.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> chrome-gnome-shell</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> makepkg -si</span></span><br></pre></td></tr></table></figure><p>安装好后可以在软件列表里看到 extensions这个GUI软件</p><p>然后就可以登录这个网站下载各种好玩的插件了：<a href="https://extensions.gnome.org/">gnome插件</a></p><p>比如截图插件，可以修改QQ的快捷键</p><p><img src="/images/pasted-139.png" alt="upload successful"></p><p><img src="/images/pasted-140.png" alt="upload successful"></p><h4 id="强烈推荐的插件"><a href="#强烈推荐的插件" class="headerlink" title="强烈推荐的插件"></a>强烈推荐的插件</h4><p>ddterm ：最好用的drop down terminal</p><h3 id="安装aria2下载器"><a href="#安装aria2下载器" class="headerlink" title="安装aria2下载器"></a>安装aria2下载器</h3><p>安装下载器：<code>pacman -S aria2</code></p><p>安装pip工具，因为系统自带了python3，而aira的gui工具需要pip所以下载<code>yaourt -S python-pip</code></p><p>安装前端工具：<code>sudo pacman -S persepolis</code></p><p>开始菜单里就有了，点开即用</p><h3 id="安装clash"><a href="#安装clash" class="headerlink" title="安装clash"></a>安装clash</h3><p>直接下载下来解压缩运行就行了<a href="https://github.com/Fndroid/clash_for_windows_pkg">clash gui</a></p><p>执行 <code>/opt/clash/cfw</code></p><p>系统配置下手动开启vpn的配置：</p><p><img src="/images/pasted-141.png" alt="upload successful"></p><p>如果觉得gui碍事，可以使用命令行的 参考这篇博客 <a href="http://www.manongjc.com/detail/27-guujywyvgwvhqly.html">clash 配置</a></p><h3 id="安装钉钉"><a href="#安装钉钉" class="headerlink" title="安装钉钉"></a>安装钉钉</h3><p>yaourt dingtalk</p><h3 id="安装vpn"><a href="#安装vpn" class="headerlink" title="安装vpn"></a>安装vpn</h3><p>openvpn,用来链接公司的局域网开发：<code>pacman -S openvpn</code>，这是个命令行，界面下面两个</p><p>安装l2tp隧道：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S networkmanager-l2tp strongswan  </span><br><span class="line">systemctl start strongswan.service </span><br></pre></td></tr></table></figure><h4 id="eovpn界面"><a href="#eovpn界面" class="headerlink" title="eovpn界面"></a>eovpn界面</h4><p>安装eovpn:对应的GUI界面，之前需要安装Flatpak，这是一个包管理器，最大的好处是依赖可以隔离，下载的软件也需要这个</p><ol><li><code>sudo pacman -S flatpak</code> 安装 flatpak</li><li><code>yaourt -S eovpn</code></li><li><a href="https://github.com/jkotra/eOVPN">去github上下载对应的flatpak包</a>点击flatpak图标就下载了</li><li>flatpak install flathub com.github.jkotra.eovpn # 安装</li><li>flatpak run com.github.jkotra.eovpn # 执行</li></ol><h4 id="networkmanager-openvpn界面"><a href="#networkmanager-openvpn界面" class="headerlink" title="networkmanager-openvpn界面"></a>networkmanager-openvpn界面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S networkmanager-openvpn    </span><br></pre></td></tr></table></figure><p>在vpn上选择+号，即可配置l2tp隧道了</p><p><img src="/images/pasted-143.png" alt="upload successful"></p><p><img src="/images/pasted-147.png" alt="upload successful"></p><p><img src="/images/pasted-146.png" alt="upload successful"></p><p><img src="/images/pasted-148.png" alt="upload successful"></p><p>链接成功，可以干活了</p><h3 id="redis-desktop-manager"><a href="#redis-desktop-manager" class="headerlink" title="redis desktop manager"></a>redis desktop manager</h3><p><a href="https://snapcraft.io/redis-desktop-manager">官网</a></p><ol><li>下载snap ： <code>pacman -S snapd</code></li><li>启动： <code>systemctl start snapd.socket</code></li><li>下载：<code>sudo snap install redis-desktop-manager</code></li><li>链接snap仓库：<code>sudo ln -s /var/lib/snapd/snap /snap  </code></li><li>启动：<code>snap/bin/redis-desktop-manager.resp  </code></li></ol><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>pacman -S docker</p><blockquote><p>如果是非root用户不可以执行docker命令，两种方式解决</p></blockquote><ol><li><p>将用户添加且暂时切换到docker组，<code>user mod -aG docker 用户名</code>，<code>newgrp docker</code></p></li><li><p>修改docker可执行权限，<code>sudo chmod 666 /var/run/docker.sock </code></p></li></ol><h3 id="电源管理工具（省电）"><a href="#电源管理工具（省电）" class="headerlink" title="电源管理工具（省电）"></a>电源管理工具（省电）</h3><p><a href="https://wiki.archlinux.org/title/Laptop_Mode_Tools_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85">Laptop Mode Tools </a></p><h3 id="蓝牙管理器"><a href="#蓝牙管理器" class="headerlink" title="蓝牙管理器"></a>蓝牙管理器</h3><p><a href="https://wiki.archlinux.org/title/Bluetooth">bluetooth</a></p><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><ol><li>下载maven压缩包，解压到目录 <code>export PATH=/opt/maven3.8/bin:$PATH </code></li><li><code>vim /opt/maven3.8/conf/settings.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It&#x27;s normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/mavenRepo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile</span></span><br><span class="line"><span class="comment">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="comment">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="comment">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="comment">     | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc.</span></span><br><span class="line"><span class="comment">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="comment">     | to accomplish, particularly when you only have a list of profile id&#x27;s for debug.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;repositories&gt;</span></span><br><span class="line"><span class="comment">        &lt;repository&gt;</span></span><br><span class="line"><span class="comment">          &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><br><span class="line"><span class="comment">          &lt;layout&gt;default&lt;/layout&gt;</span></span><br><span class="line"><span class="comment">          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class="line"><span class="comment">        &lt;/repository&gt;</span></span><br><span class="line"><span class="comment">      &lt;/repositories&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;,</span></span><br><span class="line"><span class="comment">     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration</span></span><br><span class="line"><span class="comment">     | might hypothetically look like:</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     | &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     |   &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">     | &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to</span></span><br><span class="line"><span class="comment">     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;env-dev&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;property&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;target-env&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;value&gt;dev&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;</span></span><br><span class="line"><span class="comment">      &lt;/properties&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- activeProfiles</span></span><br><span class="line"><span class="comment">   | List of profiles that are active for all builds.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;activeProfiles&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">  &lt;/activeProfiles&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置软件桌面图标"><a href="#配置软件桌面图标" class="headerlink" title="配置软件桌面图标"></a>配置软件桌面图标</h2><p><code>ls /usr/share/applications</code> 这里面存放了所有软件图标，可以依葫芦画瓢，类似其他应用，创建自己的应用，只要路径和图标自己配就行</p><h3 id="配置clash的图标"><a href="#配置clash的图标" class="headerlink" title="配置clash的图标"></a>配置clash的图标</h3><p>之前安装了clash的gui软件，但是没默认创建图标，自己弄一个</p><p>软件执行位置在/opt/clash/cfw</p><ol><li><p>首先截个图，clash的图标，放入:<code>sudo mv /home/tr/Pictures/clash.png /usr/share/icons/gnome/48x48 </code></p></li><li><p>创建桌面图标：<code> vim /usr/share/applications/clash.desktop</code>写入以下内容</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Categories=Network;</span><br><span class="line">Comment=clash</span><br><span class="line">Exec=/opt/clash/cfw</span><br><span class="line">GenericName=clash</span><br><span class="line">Icon=/usr/share/icons/gnome/48x48/clash.png</span><br><span class="line">Keywords=clash;</span><br><span class="line">MimeType=x-scheme-handler/clash;</span><br><span class="line">Name=Clash</span><br><span class="line">Name=Clash</span><br><span class="line">Name[zh_CN]=Clash</span><br><span class="line">Type=Application</span><br><span class="line">X-Deepin-Vendor=user-custom</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后程序列表就有了</p><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><h3 id="boxes"><a href="#boxes" class="headerlink" title="boxes"></a>boxes</h3><blockquote><p>gnome桌面自带了boxes软件，这个软件真的很方便，但是简化的过头了，导致用户无法配置网络</p></blockquote><blockquote><p>boxes的使用就不说了，点开一目了然，这里推荐如何高级配置boxes内的虚拟机</p></blockquote><ol><li><p>下载 virt-manager</p></li><li><p>打开软件点击 <code>file</code> <code>add connection</code>选择如下，点击链接</p></li></ol><p><img src="/images/pasted-149.png" alt="upload successful"></p><p><img src="/images/pasted-151.png" alt="upload successful"></p><ol start="3"><li>点击页面即可</li></ol><h3 id="virtual-machine（推荐）"><a href="#virtual-machine（推荐）" class="headerlink" title="virtual machine（推荐）"></a>virtual machine（推荐）</h3><p>这是专业点的软件，可以配置修改很多东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装虚拟机内核</span></span><br><span class="line">sudo pacman -S virtualbox-host-modules-arch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装虚拟机软件</span></span><br><span class="line">pacman -S virtualbox</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后不重启需要手动加载内核</span></span><br><span class="line">sudo modprobe vboxnetadp</span><br><span class="line">sudo modprobe vboxnetflt</span><br><span class="line">sudo modprobe vboxnetpci</span><br><span class="line">sudo modprobe vboxpci</span><br></pre></td></tr></table></figure><blockquote><p>打开虚拟机使用的时候要注意提供的网络模式</p><ul><li>host-only 绑定虚拟网卡，需要用户手动创建网卡</li><li>nat 网络地址转换，可以上网，但是宿主机和虚拟机无法互通（互通需要设置，建议看archlinux文档）</li><li>bridge 桥接模式，使用一张网卡（可以是虚拟网卡）分配地址，可以和宿主机互通，但是如果网卡不是混合模式是无法上网的</li></ul></blockquote><p>最好的既可以上网又可以和宿主机互通的方式如下设置：</p><ol><li>创建host-only的虚拟网卡</li></ol><p><img src="/images/pasted-152.png" alt="upload successful"></p><ol start="2"><li>关闭虚拟机，将两个网卡（虚拟网卡，和nat模式网卡）配置上即可</li></ol><p><img src="/images/pasted-153.png" alt="upload successful"></p><p><img src="/images/pasted-154.png" alt="upload successful"></p><p><img src="/images/pasted-157.png" alt="upload successful"></p><p><img src="/images/pasted-156.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ArchLinux安装配置&quot;&gt;&lt;a href=&quot;#ArchLinux安装配置&quot; class=&quot;headerlink&quot; title=&quot;ArchLinux安装配置&quot;&gt;&lt;/a&gt;ArchLinux安装配置&lt;/h1&gt;&lt;h2 id=&quot;安装系统&quot;&gt;&lt;a href=&quot;#安装系统&quot; class=&quot;headerlink&quot; title=&quot;安装系统&quot;&gt;&lt;/a&gt;安装系统&lt;/h2&gt;&lt;h3 id=&quot;安装准备&quot;&gt;&lt;a href=&quot;#安装准备&quot; class=&quot;headerlink&quot; title=&quot;安装准备&quot;&gt;&lt;/a&gt;安装准备&lt;/h3&gt;&lt;p&gt;我的是双系统的配置，在安装之前划分50GB的磁盘空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;去官网下载镜像，制作usb启动盘&lt;/li&gt;
&lt;li&gt;开机进入usb的livecd内&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>再看操作系统1</title>
    <link href="http://example.com/2022/01/27/%E5%86%8D%E7%9C%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/"/>
    <id>http://example.com/2022/01/27/%E5%86%8D%E7%9C%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/</id>
    <published>2022-01-27T07:50:00.000Z</published>
    <updated>2025-03-01T12:26:37.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>操作系统自从毕业后再未接触，当时学的也不是很好，这次重头在学，争取精通os的算法和概念.</p><span id="more"></span><hr><h2 id="什么是OS"><a href="#什么是OS" class="headerlink" title="什么是OS"></a>什么是OS</h2><blockquote><p>不同角度</p><blockquote><p>用户角度</p><ul><li>控制电脑</li><li>管理应用程序</li><li>为应用程序提供服务</li></ul></blockquote><blockquote><p>计算机</p><ul><li>管理资源</li><li>管理外设，分配资源</li></ul></blockquote><p>架构</p><ul><li>应用程序之下</li><li>硬件之上</li></ul><p>以LINUX为例，操作系统其实分内核(kernel)和外部应用(shell) 我们更应该关注内核细节</p><p>操作系统管理的硬件资源有三大块</p><blockquote><ul><li>CPU （调度）</li><li>内存 （物理，虚拟内存管理）</li><li>磁盘 （文件系统）</li></ul></blockquote><p>IO （中断处理与设备驱动）</p><p>OS的特征：</p><blockquote><ul><li>并发（一段时间内多个程序同时运行，和并行不同，并行是同一时刻同时运行，单核不可能做到）</li><li>共享 （将计算机资源共享给其他进程，通过互斥的方法做到”同时“访问）</li><li>虚拟 （将计算机硬件虚拟化，内存虚拟化为地址空间，硬盘虚拟化为文件等）</li><li>异步 （程序执行不是一贯到底，而是走走停停，OS要保证程序运行结果每次相同）</li></ul></blockquote></blockquote><h2 id="操作系统实例"><a href="#操作系统实例" class="headerlink" title="操作系统实例"></a>操作系统实例</h2><blockquote><ul><li>UNIX家族<ul><li>FreeBSD </li><li>MacIOS</li><li>solaris</li><li>….</li></ul></li><li>Linux家族<ul><li>redhat</li><li>suse</li><li>centos</li><li>ubuntu</li><li>arch</li><li>…</li></ul></li><li>windows家族</li></ul></blockquote><h2 id="OS设计的发展"><a href="#OS设计的发展" class="headerlink" title="OS设计的发展"></a>OS设计的发展</h2><blockquote><ol><li>在一开始的时候，数据都是存储在纸带上，OS只是起到一个监视的作用，单道程序设计</li><li>后来CPU速度提升，最好处理过程能够流水线话–批处理阶段</li><li>内存进一步扩大后，CPU可以将多个程序加载到内存中使用，这样可以并发重用CPU，这样程序的IO开销减少 – 多道程序设计</li><li>CPU造假贵，如何让CPU尽量的忙，当一个程序需要执行等待IO的时候让CPU去执行其他进程，外设读取完后发出中断信号，通知CPU可以切换到原来的进程</li><li>以上都是不需要人参与的，为了能够和计算机交互，将CPU的执行时间分片 一片千分之一秒，程序执行一片后控制权给其他进程 – 分时操作</li><li>为什么CPU每千分之一秒能被打断，是因为 <strong>时钟</strong> 时钟是个外设设备，每隔一个时间片发出中断信号</li><li>网络快速发展后，很多工作可以丢给数据中心做 — 分布式操作系统</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;p&gt;操作系统自从毕业后再未接触，当时学的也不是很好，这次重头在学，争取精通os的算法和概念.&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="http://example.com/categories/OS/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Docker 迁移一些自己的服务</title>
    <link href="http://example.com/2022/01/18/Docker-%E8%BF%81%E7%A7%BB%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2022/01/18/Docker-%E8%BF%81%E7%A7%BB%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-01-18T11:07:00.000Z</published>
    <updated>2025-03-01T12:26:37.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迁移自己的服务"><a href="#迁移自己的服务" class="headerlink" title="迁移自己的服务"></a>迁移自己的服务</h1><blockquote><p>用docker把以前服务器上的一些服务打包推送到docker hub</p></blockquote><span id="more"></span><h2 id="博客-hexo"><a href="#博客-hexo" class="headerlink" title="博客 hexo"></a>博客 hexo</h2><blockquote><p>hexo是基于nodejs的，所以镜像基于node，以下是dockerfile</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">MAINTAINER tangrui&lt;1540525748@qq.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /home/hexo</span><br><span class="line"></span><br><span class="line">RUN npm install -g hexo-cli &amp;&amp; hexo init /home/hexo &amp;&amp; cd /home/hexo &amp;&amp; npm install &amp;&amp; npm install hexo-server --save</span><br><span class="line">RUN apt update &amp;&amp; apt install -y vim &amp;&amp; apt install -y unzip</span><br><span class="line">RUN npm install --save hexo-admin </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ADD https://codeload.github.com/MOIPA/MOIPA.github.io/zip/refs/heads/master /home/hexo/<span class="built_in">source</span>/public</span></span><br><span class="line">RUN [&quot;wget&quot;,&quot;https://codeload.github.com/MOIPA/MOIPA.github.io/zip/refs/heads/master&quot;,&quot;-O&quot;,&quot;./master&quot;]</span><br><span class="line"></span><br><span class="line">RUN unzip -oq ./master &amp;&amp; mkdir public</span><br><span class="line">RUN mv  MOIPA.github.io-master/* ./public</span><br><span class="line">RUN rm -rf MOIPA.github.io-master</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/landscape/next/g&#x27; _config.yml</span><br><span class="line"></span><br><span class="line">RUN npm install hexo-migrator-rss --save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置RSS订阅，提供订阅链接</span></span><br><span class="line">RUN [&quot;npm&quot;,&quot;install&quot;,&quot;hexo-generator-feed&quot;,&quot;--save&quot;]</span><br><span class="line"> </span><br><span class="line">RUN echo &quot;\n\</span><br><span class="line">Plugins:\n\</span><br><span class="line">- hexo-generate-feed\n&quot;\</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; _config.yml</span> </span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/#RSS/RSS/g&#x27; ./themes/next/_config.yml \</span><br><span class="line">&amp;&amp; sed -i &#x27;s/Muse/Gemini/g&#x27; ./themes/next/_config.yml &amp;&amp;\</span><br><span class="line">sed -i &#x27;s/url: #/url: /g&#x27; ./themes/next/_config.yml </span><br><span class="line"></span><br><span class="line">RUN hexo g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXPOSE 4000 </span><br><span class="line"></span><br><span class="line">VOLUME [&quot;/home/hexo/&quot;]</span><br><span class="line"></span><br><span class="line">CMD [&quot;hexo&quot;,&quot;server&quot;,&quot;-p&quot;,&quot;4000&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>这个版本的hexo配置了next主题，我的git上的public的gitio博客内容，和rss迁移内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动博客容器</span></span><br><span class="line">docker run -d --name trhexo -p 5555:4000 moipa/hexo:1.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 迁移所有博客</span></span><br><span class="line">docker exec -it trhexo /bin/bash</span><br><span class="line"></span><br><span class="line">hexo migrate rss http://39.108.159.175:4000/atom.xml</span><br></pre></td></tr></table></figure><h3 id="配置个人的专属hexo镜像"><a href="#配置个人的专属hexo镜像" class="headerlink" title="配置个人的专属hexo镜像"></a>配置个人的专属hexo镜像</h3><ol><li><p>将linux的公钥私钥复制到镜像中</p></li><li><p>将source/_posts文件夹改为git目录，文档从github上同步，在deploy脚本内写好git push的命令</p></li><li><p>每次新电脑只需要<code>docker pull moipa/hexo:2.x</code>到本地运行即可</p></li><li><p>生成了hexo admin的key，再次使用的时候可能需要注释掉，重新去admin界面生成</p></li><li><p>自动同步（图片和文档）git脚本写好了，可以在配置好admin界面后将这个脚本加上去，之后只需要点击deploy即可完成部署<br><img src="/images/pasted-129.png" alt="upload successful"></p></li></ol><h3 id="镜像说明"><a href="#镜像说明" class="headerlink" title="镜像说明"></a>镜像说明</h3><ol><li><p>镜像文件版本2.2，docker pull下载后即可使用</p></li><li><p>admin界面写日志，deploy按钮即可同步git</p></li><li><p>需要注意的是最好记住自己哪些日志可能冲突，需要提前同步一下，否则出现冲突要么自己merge conflict，要么重建容器</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;迁移自己的服务&quot;&gt;&lt;a href=&quot;#迁移自己的服务&quot; class=&quot;headerlink&quot; title=&quot;迁移自己的服务&quot;&gt;&lt;/a&gt;迁移自己的服务&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用docker把以前服务器上的一些服务打包推送到docker hub&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Arduino开发-入门配置</title>
    <link href="http://example.com/2021/11/17/Arduino%E5%BC%80%E5%8F%91-%E5%85%A5%E9%97%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/11/17/Arduino%E5%BC%80%E5%8F%91-%E5%85%A5%E9%97%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2021-11-17T03:20:00.000Z</published>
    <updated>2025-03-01T12:26:37.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arduino开发-入门配置"><a href="#Arduino开发-入门配置" class="headerlink" title="Arduino开发 入门配置"></a>Arduino开发 入门配置</h1><blockquote><p>单片机开发，得到了一块ESP8266芯片，可以选择micropython或者arduino的系统环境，虽然micropython使用python作为开发语言，简单很多，但是生态和库没有arduino丰富，这里选择了烧录arduino环境到芯片</p></blockquote><span id="more"></span><h2 id="下载arduino的开发ide"><a href="#下载arduino的开发ide" class="headerlink" title="下载arduino的开发ide"></a>下载arduino的开发ide</h2><blockquote><p>下载地址：<a href="https://www.arduino.cc/">https://www.arduino.cc/</a></p><p>如果和我一样使用linux系统，可以通过版本自带管理器下载，以我的archlinux为例：<code>pacman -S arduino</code></p></blockquote><h2 id="配置开发板"><a href="#配置开发板" class="headerlink" title="配置开发板"></a>配置开发板</h2><blockquote><p>打开file -&gt; preferences </p><p>在开发板管理器网址填（Additional Boards Manager URLs）：<code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p></blockquote><blockquote><p>重启IDE环境</p><p>找到tools下 开发板选项-&gt;开发板管理器 (Boards Manager)</p><p>搜索esp8266，点击下载即可，完成后可选择esp8266的板子了</p></blockquote><p><img src="/images/pasted-187.png" alt="upload successful"></p><p><img src="/images/pasted-188.png" alt="upload successful"> </p><blockquote><p>插入esp开发板后，这时候会多一个串行端口，点击tools下的port选项选择该端口即可使用实例了</p><p>关于端口，如果是在windows下可以直接用设备管理器查看端口，如果是linux下需要<code>sudo chmod +x /dev/ttyUSB0</code> 给新设备赋予权限</p></blockquote><h2 id="VSC下开发"><a href="#VSC下开发" class="headerlink" title="VSC下开发"></a>VSC下开发</h2><blockquote><p>这里更推荐使用VSC替代arduino ide做开发，VSC插件丰富，代码校验等</p><p>在VSC下安装以下几个插件</p></blockquote><p><img src="/images/pasted-189.png" alt="upload successful"></p><blockquote><p>安装完毕后可以打开<code>.ino</code>的arduino文件，看到如下所示的状态栏，可以快速选择板子类型，开发板端口和打开串口监听</p><p>也可以使用F1呼出命令栏，输入arduino，可以配置实例，管理库等</p></blockquote><p><img src="/images/pasted-190.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Arduino开发-入门配置&quot;&gt;&lt;a href=&quot;#Arduino开发-入门配置&quot; class=&quot;headerlink&quot; title=&quot;Arduino开发 入门配置&quot;&gt;&lt;/a&gt;Arduino开发 入门配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;单片机开发，得到了一块ESP8266芯片，可以选择micropython或者arduino的系统环境，虽然micropython使用python作为开发语言，简单很多，但是生态和库没有arduino丰富，这里选择了烧录arduino环境到芯片&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Arduino" scheme="http://example.com/categories/Arduino/"/>
    
    
    <category term="Arduino" scheme="http://example.com/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>Arduino开发-自定义库和示例</title>
    <link href="http://example.com/2021/11/17/Arduino%E5%BC%80%E5%8F%91-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%93%E5%92%8C%E7%A4%BA%E4%BE%8B/"/>
    <id>http://example.com/2021/11/17/Arduino%E5%BC%80%E5%8F%91-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%93%E5%92%8C%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-11-17T02:48:00.000Z</published>
    <updated>2025-03-01T12:26:37.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arduino-自定义库"><a href="#Arduino-自定义库" class="headerlink" title="Arduino 自定义库"></a>Arduino 自定义库</h1><span id="more"></span><blockquote><p>买了一个PS2的手柄，希望写个库文件方便以后控制手柄，所以这里以PS2手柄库文件开发为例，研究如何自定义库,首先新建工程文件夹：<code>PS2_ESP8266</code></p></blockquote><h2 id="库格式"><a href="#库格式" class="headerlink" title="库格式"></a>库格式</h2><blockquote><p>文件夹的组织类型如下：</p></blockquote><p><img src="/images/pasted-186.png" alt="upload successful"></p><h2 id="keywords-txt"><a href="#keywords-txt" class="headerlink" title="keywords.txt"></a>keywords.txt</h2><blockquote><p>这个文件内容可以为空</p></blockquote><h2 id="library-properties"><a href="#library-properties" class="headerlink" title="library.properties"></a>library.properties</h2><blockquote><p>这里定义一些库的属性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name=PS2Ctrl</span><br><span class="line">version=1.0.0</span><br><span class="line">author=Tang rui</span><br><span class="line">maintainer=Tang rui</span><br><span class="line">sentence=PS2 library for Arduino</span><br><span class="line">paragraph=An easy way to control PS2 handle</span><br><span class="line">category=Device Control</span><br><span class="line">url=https://github.com/Moipa</span><br><span class="line">architectures=*</span><br><span class="line">includes=PS2Ctrl.h</span><br></pre></td></tr></table></figure><h2 id="src目录下库文件编写"><a href="#src目录下库文件编写" class="headerlink" title="src目录下库文件编写"></a>src目录下库文件编写</h2><blockquote><p>这里主要写一个头文件，和对头文件的实现方法，用于实例调用</p></blockquote><blockquote><p>头文件： 定义了一个名为<code>PS2Ctrl_H</code>的头文件，其内声明了一个<code>PS2Ctrl</code>类，编写构造方法和使用方法等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PS2Ctrl_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PS2Ctrl_H</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PS2Ctrl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">PS2Ctrl</span>(<span class="keyword">int</span> di_pin, <span class="keyword">int</span> do_pin, <span class="keyword">int</span> cs_pin, <span class="keyword">int</span> clk_pin);</span><br><span class="line">    <span class="comment">// 用于示例的一些函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_Cmd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> CMD)</span></span>; <span class="comment">// 发送命令到手柄</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ReadData</span><span class="params">()</span></span>; <span class="comment">// 接收所有PS2控制数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ClearData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ShortPoll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_EnterConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_TurnOnAnalogMode</span><span class="params">()</span></span>; <span class="comment">// 打开模拟模式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_VibrationMode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ExitConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_SetInit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 定义手柄接收器的四个针脚 传输的时候需要CS为低电平，CLK由高变低</span></span><br><span class="line">    <span class="keyword">int</span> di_pin; <span class="comment">//接收器发送给单片机的信号</span></span><br><span class="line">    <span class="keyword">int</span> do_pin; <span class="comment">//单片机发送给接收器的信号</span></span><br><span class="line">    <span class="keyword">int</span> cs_pin; <span class="comment">// 选择信号</span></span><br><span class="line">    <span class="keyword">int</span> clk_pin; <span class="comment">// 时钟信号</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> SELECT, L3, R3, START, UP, RIGHT, DOWN, LEFT, L2, R2, L1, R1, TRIANGLE, CIRCLE, FORK, SQUARE;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> PS2_LX, PS2_LY, PS2_RX, PS2_RY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>头文件的实现文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PS2Ctrl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Arduino.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">PS2Ctrl::<span class="built_in">PS2Ctrl</span>(<span class="keyword">int</span> di_pin,<span class="keyword">int</span> do_pin,<span class="keyword">int</span> cs_pin,<span class="keyword">int</span> clk_pin)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;di_pin = di_pin;</span><br><span class="line">    <span class="keyword">this</span>-&gt;do_pin = do_pin;</span><br><span class="line">    <span class="keyword">this</span>-&gt;cs_pin = cs_pin;</span><br><span class="line">    <span class="keyword">this</span>-&gt;clk_pin = clk_pin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DI_pin this-&gt;di_pin  <span class="comment">// D6  DATA</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_pin this-&gt;do_pin  <span class="comment">// D7  CMD</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CS_pin this-&gt;cs_pin  <span class="comment">// D5</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_pin this-&gt;clk_pin <span class="comment">// D8</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_H digitalWrite(DO_pin, HIGH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_L digitalWrite(DO_pin, LOW)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_H digitalWrite(CLK_pin, HIGH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_L digitalWrite(CLK_pin, LOW)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CS_H digitalWrite(CS_pin, HIGH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CS_L digitalWrite(CS_pin, LOW)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"></span><br><span class="line">u8 Data[<span class="number">9</span>];</span><br><span class="line">u8 SELECT, L3, R3, START, UP, RIGHT, DOWN, LEFT, L2, R2, L1, R1, TRIANGLE, CIRCLE, FORK, SQUARE;</span><br><span class="line">u8 PS2_LX, PS2_LY, PS2_RX, PS2_RY;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_Cmd</span><span class="params">(u8 CMD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> u16 ref = <span class="number">0x01</span>;</span><br><span class="line">  Data[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (ref = <span class="number">0x01</span>; ref &lt; <span class="number">0x0100</span>; ref &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (ref &amp; CMD)</span><br><span class="line">    &#123;</span><br><span class="line">      DO_H;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      DO_L;</span><br><span class="line">    CLK_H;</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">    CLK_L;</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">    CLK_H;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(DI_pin))</span><br><span class="line">    &#123;</span><br><span class="line">      Data[<span class="number">1</span>] = ref | Data[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ReadData</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> u8 byt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">volatile</span> u16 ref = <span class="number">0x01</span>;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x42</span>);</span><br><span class="line">  <span class="keyword">for</span> (byt = <span class="number">2</span>; byt &lt; <span class="number">9</span>; byt++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (ref = <span class="number">0x01</span>; ref &lt; <span class="number">0x100</span>; ref &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      CLK_H;</span><br><span class="line">      <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">      CLK_L;</span><br><span class="line">      <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">      CLK_H;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(DI_pin))</span><br><span class="line">      &#123;</span><br><span class="line">        Data[byt] = ref | Data[byt];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  CS_H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ClearData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u8 a;</span><br><span class="line">  <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">9</span>; a++)</span><br><span class="line">  &#123;</span><br><span class="line">    Data[a] = <span class="number">0x00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ShortPoll</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x42</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_EnterConfig</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x43</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_TurnOnAnalogMode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x44</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0xEE</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_VibrationMode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x4D</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ExitConfig</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x43</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_SetInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">PS2_ShortPoll</span>();</span><br><span class="line">  <span class="built_in">PS2_ShortPoll</span>();</span><br><span class="line">  <span class="built_in">PS2_ShortPoll</span>();</span><br><span class="line">  <span class="built_in">PS2_EnterConfig</span>();</span><br><span class="line">  <span class="built_in">PS2_TurnOnAnalogMode</span>();</span><br><span class="line">  <span class="built_in">PS2_VibrationMode</span>();</span><br><span class="line">  <span class="built_in">PS2_ExitConfig</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">PS2_ClearData</span>();</span><br><span class="line">  <span class="built_in">PS2_ReadData</span>();</span><br><span class="line"></span><br><span class="line">  LEFT = !(<span class="number">0x80</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  DOWN = !(<span class="number">0x40</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  RIGHT = !(<span class="number">0x20</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  UP = !(<span class="number">0x10</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  START = !(<span class="number">0x08</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  R3 = !(<span class="number">0x04</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  L3 = !(<span class="number">0x02</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  SELECT = !(<span class="number">0x01</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  SQUARE = !(<span class="number">0x80</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  FORK = !(<span class="number">0x40</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  CIRCLE = !(<span class="number">0x20</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  TRIANGLE = !(<span class="number">0x10</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  R1 = !(<span class="number">0x08</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  L1 = !(<span class="number">0x04</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  R2 = !(<span class="number">0x02</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  L2 = !(<span class="number">0x01</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">  PS2_RX = Data[<span class="number">5</span>];</span><br><span class="line">  PS2_RY = Data[<span class="number">6</span>];</span><br><span class="line">  PS2_LX = Data[<span class="number">7</span>];</span><br><span class="line">  PS2_LY = Data[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="examples文件夹下"><a href="#examples文件夹下" class="headerlink" title="examples文件夹下"></a>examples文件夹下</h2><blockquote><p>编写示例文件：新增一个文件<code>PS2Ctrl.ino</code></p><p>内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PS2Ctrl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">PS2Ctrl <span class="title">ps2Ctrl</span><span class="params">(<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置给PS2控制器的这几个接口模式</span></span><br><span class="line">  pinMode(ps2Ctrl.di_pin, INPUT);</span><br><span class="line">  pinMode(ps2Ctrl.do_pin, OUTPUT);</span><br><span class="line">  pinMode(ps2Ctrl.cs_pin, OUTPUT);</span><br><span class="line">  pinMode(ps2Ctrl.clk_pin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 读取PS2手柄数据</span></span><br><span class="line">  ps2Ctrl.PS2();</span><br><span class="line">  <span class="comment">// 打印按键操作</span></span><br><span class="line">  SerialPrintKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SerialPrintKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.println(<span class="string">&quot;*********key list********&quot;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;L3:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.L3);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;R3:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.R3);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;START:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.START);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;UP:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.UP);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;RIGHT:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.RIGHT);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;DOWN:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.DOWN);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;LEFT:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.LEFT);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;L2:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.L2);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;R2:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.R2);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;L1:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.L1);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;R1:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.R1);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;TRIANGLE:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.TRIANGLE);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;CIRCLE:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.CIRCLE);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;FORK:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.FORK);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;SQUARE:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.SQUARE);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_RX:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_RX);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_RY:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_RY);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_LX:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_LX);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_LY:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_LY);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>将整个工程文件<code>PSE_ESP8266</code>放入<code>Arduino</code>的<code>libraries</code>内，现在可以在第三方示例库中看到我们的示例了</p></blockquote><p><img src="/images/pasted-185.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Arduino-自定义库&quot;&gt;&lt;a href=&quot;#Arduino-自定义库&quot; class=&quot;headerlink&quot; title=&quot;Arduino 自定义库&quot;&gt;&lt;/a&gt;Arduino 自定义库&lt;/h1&gt;</summary>
    
    
    
    <category term="Arduino" scheme="http://example.com/categories/Arduino/"/>
    
    
    <category term="Arduino" scheme="http://example.com/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra迪杰斯特拉算法</title>
    <link href="http://example.com/2021/10/29/Dijkstra%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/10/29/Dijkstra%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/</id>
    <published>2021-10-29T14:42:00.000Z</published>
    <updated>2022-01-19T04:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dijkstra迪杰斯特拉算法"><a href="#Dijkstra迪杰斯特拉算法" class="headerlink" title="Dijkstra迪杰斯特拉算法"></a>Dijkstra迪杰斯特拉算法</h1><p>最短路径算法</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>个人感觉迪杰斯特拉算法和普利姆(Prime)算法很像都是从已有集合找到最小边开始，向集合内持续添加最小边的节点。首先写出所有节点的直接路径，从已有集合开始算到其他节点的最短距离，将在这一轮中找到的最小距离所在的节点录入集合，循环……</p><h2 id="算法示例"><a href="#算法示例" class="headerlink" title="算法示例"></a>算法示例</h2><p><img src="/images/pasted-90.png" alt="upload successful"><br>以这个为例我们找出节点1到其他所有节点的最短距离</p><p><img src="/images/pasted-91.png" alt="upload successful"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">画出整张表格的框架，顶点 2，3，4，5 初始集合为1，第一轮查看1到2，3，4，5的距离分别为10，无穷，无穷，5。找出第一轮的最短距离为 1-5的距离，将5加入集合。之后再也不用关注5，因为已经是最短距离了（不存在经过其他节点更小的情况，可以自行推算）。</span><br><span class="line"></span><br><span class="line">第一轮结束后，集合内有1，5两个节点，且5节点不用再关注了，第二轮开始：看刚刚假如的节点5到其他节点的距离再加上1-5的距离，看是否小于左边的距离，小的话就替换，5到2，3，4的距离分别为3，9，2，加上1到5的距离后为：8，14，7都比左边一列小，所以结果都覆写了，再次找到最小距离：1-5-4的距离7，将4假如集合。</span><br><span class="line"></span><br><span class="line">循环到所有节点进入集合即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下次实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dijkstra迪杰斯特拉算法&quot;&gt;&lt;a href=&quot;#Dijkstra迪杰斯特拉算法&quot; class=&quot;headerlink&quot; title=&quot;Dijkstra迪杰斯特拉算法&quot;&gt;&lt;/a&gt;Dijkstra迪杰斯特拉算法&lt;/h1&gt;&lt;p&gt;最短路径算法&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Floyd最短路径算法</title>
    <link href="http://example.com/2021/10/29/Floyd%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/10/29/Floyd%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</id>
    <published>2021-10-29T11:35:00.000Z</published>
    <updated>2022-01-19T04:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FLOYD-最短路径算法"><a href="#FLOYD-最短路径算法" class="headerlink" title="FLOYD 最短路径算法"></a>FLOYD 最短路径算法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>佛洛依德最短路径实际上是使用了两个邻接矩阵遍历完成的 O(n^3)，一个邻接矩阵A用来保存点到点的路径权重，另一个B用来保存路径。</p><p>A的初始已经写好了点到点的直接距离，对于没有直连的点，内容都算作无穷。然后依次取中间点后再依次遍历通过这个中间点的距离，如果小于原来的A矩阵的内的距离，那么就覆写且将路径写入B矩阵。</p><h2 id="图解例子"><a href="#图解例子" class="headerlink" title="图解例子"></a>图解例子</h2><p><img src="/images/pasted-86.png" alt="upload successful"></p><p>根据这个图做两个矩阵A（存储点到点的距离），B（存储经过点）</p><p><img src="/images/pasted-87.png" alt="upload successful"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上图为例，录入后的矩阵A，A[0][1]表示0节点到1节点的距离为5，A[1][0]就表示节点1到节点0的距离，无穷表示无法连接。</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-88.png" alt="upload successful"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路径Path，对于B[0][1]表示 0节点到1节点需要经过什么节点</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">现在开始从头遍历，先找出节点对（就是图中什么节点可以到什么节点）有：</span><br><span class="line"></span><br><span class="line">&lt;0,1&gt; &lt;0,2&gt; &lt;0,3&gt;</span><br><span class="line">&lt;1,0&gt; &lt;1,2&gt; &lt;1,3&gt;</span><br><span class="line">&lt;2,0&gt; &lt;2,1&gt; &lt;2,3&gt;</span><br><span class="line">&lt;3,0&gt; &lt;3,1&gt; &lt;3,2&gt;</span><br><span class="line"></span><br><span class="line">现在取中间节点0（挨个取0，1，2，3）:对于0节点来说0节点到某节点距离，使用0作为中间节点是无意义的，所以包含0节点的节点对都不看，从&lt;1,2&gt;开始，即1使用0节点作为中间节点到2 = 1到0的节点距离+ 0到2的节点距离，也就是 A[1,2] = A[1,0] + A[0,2]。如果这个距离是小于原来距离的那么就更新，这里4&gt;无穷所以不更新。</span><br><span class="line"></span><br><span class="line">每次算可能有点绕，这里有个技巧：假设还是算 A[1,2]以 X 作为中间节点，可以先找到 A[1,2]在图中的点，分别朝着两个 X 方向走（X 行和 X 列），看他们的和是否小于自己，小于就更新自己，且在B矩阵内更新B[1,2] = X。这里X可以是0，1，2，3节点。</span><br></pre></td></tr></table></figure><p>如此遍历更新两个矩阵得到最后结果：</p><p><img src="/images/pasted-89.png" alt="upload successful"></p><h2 id="查找代码实现"><a href="#查找代码实现" class="headerlink" title="查找代码实现"></a>查找代码实现</h2><p>现在我们得到了最后的更新结果，使用的话以<code>A[1][0]</code>为例，即1节点到0节点从A矩阵可以看到1节点到0节点距离6，根据Path矩阵，看到<code>Path[1][0] = 3</code>表示 1到0节点要经过3，再看1到3和3到0，<code>Path[1][3] = -1</code>表示1到3直连，查<code>Path[3][0] = 2</code> 表示3到0经过节点2，查看3-2和2-0结果是-1，所以最后路径是<code>1-3-2-0</code>，不难发现这个过程是递归的，代码实现较为简单如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印节点x到节点y 经过的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrixPath 邻接矩阵的路径矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> matrixPath[][])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrixPath[x][y] == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// -1表示直连 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;直连&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 要经过一个节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经过节点:&quot;</span> + matrixPath[x][y]);</span><br><span class="line">        <span class="comment">// 递归查找x与y到中间节点的中间节点</span></span><br><span class="line">        printPath(x, matrixPath[x][y], matrixPath);</span><br><span class="line">        printPath(matrixPath[x][y], y, matrixPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路径实现"><a href="#最短路径实现" class="headerlink" title="最短路径实现"></a>最短路径实现</h2><p>再看一下最短路径的过程会发现本质就是遍历更新两个表，从选取中间节点开始遍历，找到中间节点后遍历所有节点，对比节点的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成最短路径矩阵</span></span><br><span class="line"><span class="comment"> * 传入的矩阵都是方阵 即长宽一样的多维数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix     图的邻接矩阵表示，传入时已经写好了点到点的直接距离</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrixPath 图的路径矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floydGenerate</span><span class="params">(<span class="keyword">int</span> matrix[][], <span class="keyword">int</span> matrixPath[][])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化路径矩阵 -1表示直连 一开始所有点都算做直连，matrix保存了直连的距离，如果两个节点不能直连，那么算作距离无限大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixPath.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrixPath.length; j++) &#123;</span><br><span class="line">            matrixPath[i][j] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选取中间经过节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> passingByNode = <span class="number">0</span>; passingByNode &lt; matrix.length; passingByNode++)</span><br><span class="line">        <span class="comment">// 选取节点对(开始节点和结束节点) 0-1 0-2 0-3 ...这样的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> startNode = <span class="number">0</span>; startNode &lt; matrix.length; startNode++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> endNode = <span class="number">0</span>; endNode &lt; matrix.length; endNode++)</span><br><span class="line">                <span class="comment">// 计算开始节点到经过节点的值和经过节点到结束节点的值</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[startNode][passingByNode] + matrix[passingByNode][endNode] &lt; matrix[startNode][endNode]) &#123;</span><br><span class="line">                    matrix[startNode][endNode] = matrix[startNode][passingByNode] + matrix[passingByNode][endNode];</span><br><span class="line">                    matrixPath[startNode][endNode] = passingByNode;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FLOYD-最短路径算法&quot;&gt;&lt;a href=&quot;#FLOYD-最短路径算法&quot; class=&quot;headerlink&quot; title=&quot;FLOYD 最短路径算法&quot;&gt;&lt;/a&gt;FLOYD 最短路径算法&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux滚挂的一次修复</title>
    <link href="http://example.com/2021/09/11/ArchLinux%E6%BB%9A%E6%8C%82%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BF%AE%E5%A4%8D/"/>
    <id>http://example.com/2021/09/11/ArchLinux%E6%BB%9A%E6%8C%82%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BF%AE%E5%A4%8D/</id>
    <published>2021-09-11T18:21:00.000Z</published>
    <updated>2022-01-19T04:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的Arch一年没更新-滚挂了"><a href="#我的Arch一年没更新-滚挂了" class="headerlink" title="我的Arch一年没更新 滚挂了"></a>我的Arch一年没更新 滚挂了</h1><p>事情是这样的：好久没用另一台电脑，登入系统的时候打开chrome想更新下插件，好死不死的退了google账号，想重新登入的，发现google账号被疯狂登出，整了一个小时才发现是chrome的问题（我是弱智）。我用的是chrome的开源版：chromium，自从21年2月份开始google的登陆api收紧了政策，只有chrome可以登陆google账号。</p><p>一开始不知道这个政策，以为是chromiu的版本问题，事发的版本是83，我用pacman upgrade了下到了93的版本，启动chromium的时候提示动态链接库缺失。</p><p>这个问题其实我是知道的，因为arch的版本更新政策比较激进，可能半个月就更新了一次，且大部分上游的软件都依赖这些最新的库，所以如果是老系统更新新软件很容易出现动态链接库的问题，我本来也没在意，pacman -F 查了下软件包的依赖库，打算更新下以来。</p><p>但是！ 问题就出在了更新依赖库，我更新了一个底层依赖库 <code>icu</code>，导致我reboot的时候gnome-shell这些依赖老版本库的应用都无法启动了，只能进tty看了<code>alt + ctrl +3</code></p><p>回退也很麻烦我都忘了刚刚的icu是啥版本了，还更新几个其他的库，这样看来，只能全盘更新了，但是全盘更新估计也是出问题的。原因一个是我的系统太久没更新了一年了，版本跨太大还不知道有啥bug。其次我的内核是自定义的用了签名机制，如果内核更新了，原来的内核哈希码肯定对应不上新的内核，必定失败的。没办法，怀着忐忑的心情 <code>sudo pacman -Syu</code>了</p><p>嗯   果然挂了</p><h2 id="shim-签名问题"><a href="#shim-签名问题" class="headerlink" title="shim 签名问题"></a>shim 签名问题</h2><p>因为的内核是自定义编译的内核，比较适配我的surface硬件，为了美观开了secureboot，不然每次开机上面红色的锁的刺眼ui真的难受。secureboot是微软的一个机制，微软信任windows系统和几个第三放的bootloader（内核加载器）。这几个内核加载器呢需要我来指定内核，怎么指定呢，用shim签名（哈希）来做这件事。</p><p>举例：我的编译好的新内核，我用shim签名生成了哈希结果，我需要再下一次开机启动是enroll，引入这个签名，这样secureboot启动bootloader，bootlaoder查看自己的信任列表，有这个内核，可以启动。</p><p>签好名后还需要重新编写启动的配置文件，因为需要指定内核，真麻烦</p><h2 id="重新配置内核引导"><a href="#重新配置内核引导" class="headerlink" title="重新配置内核引导"></a>重新配置内核引导</h2><p>arch的livecd在做，家里突然没网了，下次整</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我的Arch一年没更新-滚挂了&quot;&gt;&lt;a href=&quot;#我的Arch一年没更新-滚挂了&quot; class=&quot;headerlink&quot; title=&quot;我的Arch一年没更新 滚挂了&quot;&gt;&lt;/a&gt;我的Arch一年没更新 滚挂了&lt;/h1&gt;&lt;p&gt;事情是这样的：好久没用另一台电脑，登</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 每日三道题11 动规</title>
    <link href="http://example.com/2021/06/23/LeetCode-%E6%AF%8F%E6%AC%A1%E4%B8%89%E9%81%93%E9%A2%9811-%E5%8A%A8%E8%A7%84/"/>
    <id>http://example.com/2021/06/23/LeetCode-%E6%AF%8F%E6%AC%A1%E4%B8%89%E9%81%93%E9%A2%9811-%E5%8A%A8%E8%A7%84/</id>
    <published>2021-06-23T10:20:00.000Z</published>
    <updated>2022-01-19T04:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a>Triangle</h1><p>medium 经典入门dp问题 一次ac</p><pre><code> * 计算三角形中每行最小值组成的路径 实际也是个经典的dp问题，从低到上 *    2 *   3 4 *  6 5 7 * 4 1 8 3 * * 从最底层开始：4，1，8，3 往上分别为 （10，7），（6，13），（15，10） 选出最小的7，6，10 * 继续：9，10  最后：11</code></pre><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算三角形中每行最小值组成的路径 实际也是个经典的dp问题，从低到上</span></span><br><span class="line"><span class="comment">     *    2</span></span><br><span class="line"><span class="comment">     *   3 4</span></span><br><span class="line"><span class="comment">     *  6 5 7</span></span><br><span class="line"><span class="comment">     * 4 1 8 3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 从最底层开始：4，1，8，3 往上分别为 （10，7），（6，13），（15，10） 选出最小的7，6，10</span></span><br><span class="line"><span class="comment">     * 继续：9，10  最后：11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            return triangle.stream().map(x -&gt; x.stream().min(Comparator.comparingInt(n -&gt; n))).mapToInt(Optional::get).sum();</span></span><br><span class="line">            <span class="keyword">int</span>[] costs = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.get(triangle.size() - <span class="number">1</span>).size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; triangle.get(triangle.size() - <span class="number">1</span>).size(); i++)</span><br><span class="line">                costs[i] = triangle.get(triangle.size() - <span class="number">1</span>).get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triangle.get(i).size(); j++)</span><br><span class="line">                    costs[j] = Math.min(costs[j] + triangle.get(i).get(j), costs[j + <span class="number">1</span>] + triangle.get(i).get(j));</span><br><span class="line">            <span class="keyword">return</span> costs[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h1><p><img src="/images/pasted-77.png" alt="upload successful"></p><p><img src="/images/pasted-78.png" alt="upload successful"><br>easy 差值最大 o（n)复杂度的算法不太容易想得到，具体问题具体分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 暴力算法  o(n^2)</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;prices.length; j++) &#123;</span><br><span class="line">                   max = Math.max(prices[j] - prices[i], max);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 牛逼算法  o(n)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> lowest = prices[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (prices[i]&gt;lowest) max = Math.max(max, prices[i] - lowest);</span><br><span class="line">               <span class="keyword">else</span> lowest = prices[i];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="Best-Time-to-Buy-and-Sell-Stock-II-122"><a href="#Best-Time-to-Buy-and-Sell-Stock-II-122" class="headerlink" title="Best Time to Buy and Sell Stock II 122"></a>Best Time to Buy and Sell Stock II 122</h1><p>上题的变种，这次可以多次买入卖出，这题真……，想得到的话简单的不行，想不到的话……，最重要的是画成图看规律</p><p><img src="/images/pasted-79.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这题不应该是easy  很难想到这个算法和规律</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * 第一个解法： 实际有个规律，就是所有的邻近高点-邻近低点的和 总是最大的！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> lowest;</span><br><span class="line">           <span class="keyword">int</span> highest;</span><br><span class="line">           <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="comment">// 找到最低点</span></span><br><span class="line">               <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[i] &gt;= prices[i + <span class="number">1</span>]) i++;</span><br><span class="line">               lowest = prices[i];</span><br><span class="line">               <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[i] &lt;= prices[i + <span class="number">1</span>]) i++;</span><br><span class="line">               highest = prices[i];</span><br><span class="line">               maxProfit += highest - lowest;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> maxProfit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 牛逼算法  画成图实际所有的收益 不过是所有的上坡的和</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (prices[i]&lt;prices[i+<span class="number">1</span>]) max += prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="Best-Time-to-Buy-and-Sell-Stock-III-123"><a href="#Best-Time-to-Buy-and-Sell-Stock-III-123" class="headerlink" title="Best Time to Buy and Sell Stock III 123"></a>Best Time to Buy and Sell Stock III 123</h1><p>佛了 改改题目还能变成dp问题，在上一题的基础上添加限制条件：只能有两次买卖操作</p><p>第一种思路：</p><p><img src="/images/pasted-80.png" alt="upload successful"></p><p>从最后一天开始：0，0.<br>倒数第二天：第一次最佳买入能赚3元<br>倒数第三天：第一次最佳买入赚1元，还没3元多，变为3元<br>倒数第四天：0-3一次+3的最大值=3，两次操作最大值=6，单次操作最大值4<br>…..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span>[][] record = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][prices.length];</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = prices.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">               <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">while</span> (j &lt; prices.length) &#123;</span><br><span class="line">                   <span class="keyword">while</span> (j &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[j] &lt; prices[j + <span class="number">1</span>]) j++;</span><br><span class="line">                   <span class="keyword">if</span> (prices[j] - prices[i] &gt; record[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                       record[<span class="number">0</span>][i] = prices[j] - prices[i];</span><br><span class="line">                       <span class="comment">// 算第二次操作</span></span><br><span class="line">                       <span class="keyword">if</span> (j &lt; prices.length - <span class="number">1</span>) &#123;</span><br><span class="line">                           record[<span class="number">1</span>][i] = Math.max(record[<span class="number">1</span>][i], record[<span class="number">0</span>][j + <span class="number">1</span>] + record[<span class="number">0</span>][i]);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   j++;</span><br><span class="line">               &#125;</span><br><span class="line">               record[<span class="number">0</span>][i] = Math.max(record[<span class="number">0</span>][i], record[<span class="number">0</span>][i + <span class="number">1</span>]);</span><br><span class="line">               record[<span class="number">1</span>][i] = Math.max(record[<span class="number">1</span>][i], record[<span class="number">1</span>][i + <span class="number">1</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> Math.max(record[<span class="number">0</span>][<span class="number">0</span>], record[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-81.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//进行初始化，第一天 s1 将股票买入，其他状态全部初始化为最小值</span></span><br><span class="line">    <span class="keyword">int</span> s1=-prices[<span class="number">0</span>],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();++i) &#123;            </span><br><span class="line">        s1 = max(s1, -prices[i]); <span class="comment">//买入价格更低的股</span></span><br><span class="line">        s2 = max(s2, s1+prices[i]); <span class="comment">//卖出当前股，或者不操作</span></span><br><span class="line">        s3 = max(s3, s2-prices[i]); <span class="comment">//第二次买入，或者不操作</span></span><br><span class="line">        s4 = max(s4, s3+prices[i]); <span class="comment">//第二次卖出，或者不操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0</span>,s4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Triangle&quot;&gt;&lt;a href=&quot;#Triangle&quot; class=&quot;headerlink&quot; title=&quot;Triangle&quot;&gt;&lt;/a&gt;Triangle&lt;/h1&gt;&lt;p&gt;medium 经典入门dp问题 一次ac&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 计算三角形中每行最小值组成的路径 实际也是个经典的dp问题，从低到上
 *    2
 *   3 4
 *  6 5 7
 * 4 1 8 3
 *
 * 从最底层开始：4，1，8，3 往上分别为 （10，7），（6，13），（15，10） 选出最小的7，6，10
 * 继续：9，10  最后：11
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="Dp" scheme="http://example.com/tags/Dp/"/>
    
  </entry>
  
</feed>
