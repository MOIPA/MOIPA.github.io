<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWK</title>
    <url>/2019/05/30/AWK/</url>
    <content><![CDATA[<h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><p>非常好用的命令行工具，可以替代grep，支持正则</p>
<h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><p>通过 pattern+action方式运行</p>
<p>输出第一个和第二个域，只存在action。每个域默认是通过空格分离的。</p>
<pre><code>ll |awk &#39;&#123;print $3&#125;&#39;
</code></pre>
<p>添加了pattern -F ‘:’ 表示使用冒号分割，输出第一个和第二个域。</p>
<pre><code>cat /etc/passwd|awk -F &#39;:&#39;  &#39;&#123;print $1 &quot;\t&quot; $2&#125;&#39;
</code></pre>
<p>直接查文件：</p>
<pre><code>awk -F &#39;:&#39;  &#39;&#123;print $1 &quot; &quot; $2&#125;&#39; /etc/passwd
</code></pre>
<p>所以可以直接作为搜索使用 -F: ‘’表示搜索pattern,注意格式:’\内容&#39;</p>
<pre><code>awk -F: ’/root/&#39;
</code></pre>
<p>支持正则</p>
<pre><code>awk -F: ’/^root/&#39;
</code></pre>
<p> 支持变量：</p>
<pre><code> 统计某个文件夹下的文件占用的字节数
ls -l |awk &#39;BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print &quot;[end]size is &quot;, size&#125;&#39;
</code></pre>
<p>高级用法以后用到再说…………</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>AWK</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda管理器</title>
    <url>/2019/06/12/Anacode%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h3 id="Anaconda管理器"><a href="#Anaconda管理器" class="headerlink" title="Anaconda管理器"></a>Anaconda管理器</h3><p>说明：使用python做大数据时需要的工具,配置后可以使用conda</p>
<span id="more"></span>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>win10环境</p>
<ol>
<li>打开官网下载安装包</li>
<li>使用时右击管理员下打开提供的终端</li>
</ol>
<h4 id="使用conda"><a href="#使用conda" class="headerlink" title="使用conda"></a>使用conda</h4><h5 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h5><ol>
<li>管理员下打开anaconda终端</li>
<li>conda list 查看已安装包</li>
<li>conda upgrade    –all  更新所有包</li>
<li>conda install package_name 安装包</li>
<li>conda remove package_names 卸载包</li>
<li>conda update package_name 更新包</li>
<li>conda search keywork 搜索包</li>
</ol>
<h5 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h5><p>不同的项目可以建立不同的环境，并且可以将环境导出为配置文件，在部署到其他服务器时读取配置文件即可自动安装依赖</p>
<ol>
<li><p>conda create -n env_name package_names ：创建env_name环境且安装 package_names包</p>
</li>
<li><p>conda create -n env_name python=3 : 创建env_name环境且指定环境为python3，会自动为环境安装</p>
</li>
<li><p>activate my_env 进入环境（windows）</p>
</li>
<li><p>deactivate 离开环境</p>
</li>
<li><p>conda env export &gt; environment.yaml  导出环境配置</p>
</li>
<li><p>conda env update -f=/path/to/environment.yml 导入配置，自动安装配置</p>
</li>
<li><p>conda env list 列出环境</p>
</li>
<li><p>conda env remove -n env_name 删除环境</p>
</li>
</ol>
]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
      <tags>
        <tag>DataAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux滚挂的一次修复</title>
    <url>/2021/09/11/ArchLinux%E6%BB%9A%E6%8C%82%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="我的Arch一年没更新-滚挂了"><a href="#我的Arch一年没更新-滚挂了" class="headerlink" title="我的Arch一年没更新 滚挂了"></a>我的Arch一年没更新 滚挂了</h1><p>事情是这样的：好久没用另一台电脑，登入系统的时候打开chrome想更新下插件，好死不死的退了google账号，想重新登入的，发现google账号被疯狂登出，整了一个小时才发现是chrome的问题（我是弱智）。我用的是chrome的开源版：chromium，自从21年2月份开始google的登陆api收紧了政策，只有chrome可以登陆google账号。</p>
<p>一开始不知道这个政策，以为是chromiu的版本问题，事发的版本是83，我用pacman upgrade了下到了93的版本，启动chromium的时候提示动态链接库缺失。</p>
<p>这个问题其实我是知道的，因为arch的版本更新政策比较激进，可能半个月就更新了一次，且大部分上游的软件都依赖这些最新的库，所以如果是老系统更新新软件很容易出现动态链接库的问题，我本来也没在意，pacman -F 查了下软件包的依赖库，打算更新下以来。</p>
<p>但是！ 问题就出在了更新依赖库，我更新了一个底层依赖库 <code>icu</code>，导致我reboot的时候gnome-shell这些依赖老版本库的应用都无法启动了，只能进tty看了<code>alt + ctrl +3</code></p>
<p>回退也很麻烦我都忘了刚刚的icu是啥版本了，还更新几个其他的库，这样看来，只能全盘更新了，但是全盘更新估计也是出问题的。原因一个是我的系统太久没更新了一年了，版本跨太大还不知道有啥bug。其次我的内核是自定义的用了签名机制，如果内核更新了，原来的内核哈希码肯定对应不上新的内核，必定失败的。没办法，怀着忐忑的心情 <code>sudo pacman -Syu</code>了</p>
<p>嗯   果然挂了</p>
<h2 id="shim-签名问题"><a href="#shim-签名问题" class="headerlink" title="shim 签名问题"></a>shim 签名问题</h2><p>因为的内核是自定义编译的内核，比较适配我的surface硬件，为了美观开了secureboot，不然每次开机上面红色的锁的刺眼ui真的难受。secureboot是微软的一个机制，微软信任windows系统和几个第三放的bootloader（内核加载器）。这几个内核加载器呢需要我来指定内核，怎么指定呢，用shim签名（哈希）来做这件事。</p>
<p>举例：我的编译好的新内核，我用shim签名生成了哈希结果，我需要再下一次开机启动是enroll，引入这个签名，这样secureboot启动bootloader，bootlaoder查看自己的信任列表，有这个内核，可以启动。</p>
<p>签好名后还需要重新编写启动的配置文件，因为需要指定内核，真麻烦</p>
<h2 id="重新配置内核引导"><a href="#重新配置内核引导" class="headerlink" title="重新配置内核引导"></a>重新配置内核引导</h2><p>arch的livecd在做，家里突然没网了，下次整</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux On SurfaceBook2</title>
    <url>/2020/05/29/Archlinux-On-SurfaceBook2/</url>
    <content><![CDATA[<h3 id="Archlinux-On-SurfaceBook2"><a href="#Archlinux-On-SurfaceBook2" class="headerlink" title="Archlinux On SurfaceBook2"></a>Archlinux On SurfaceBook2</h3><p>win10的内置linux还是效率低，和真正的linux环境还是不一样，但是原来使用子系统就是linux对surfacebook2的适配太差了</p>
<p>但是最近找到了github上的一个surfacebook2的内核包，可以完美适配，因此换了个win/arch双系统，在此记录配置经历。</p>
<p>最终结果是获得win+arch 支持secureboot和适配surface硬件的自定义内核的双系统。</p>
<p>备注：我的方式是先win10后linux，如果反过来请参考</p>
<p>[<a href="https://wiki.archlinux.org/index.php/Dual_boot_with_Windows#Important_information]">https://wiki.archlinux.org/index.php/Dual_boot_with_Windows#Important_information]</a>(dual boot with windows)</p>
<p>截图：</p>
<span id="more"></span>
<p><img src="/images/pasted-34.png" alt="upload successful"></p>
<h4 id="烧录u盘启动盘"><a href="#烧录u盘启动盘" class="headerlink" title="烧录u盘启动盘"></a>烧录u盘启动盘</h4><p>没必要用烧录软件，下载archlinux最新镜像，我的版本是<code>archlinux-2020.05.01-x86_64</code>,解压缩iso镜像到u盘，进入<code>loader\entries</code>目录，编辑<code>archiso-x86_64.conf</code>，看到类似<code>archisolabel=ARCH_202005</code>的信息，将<code>ARCH_202005</code>作为自己的设备名。</p>
<p>禁用secureboot，重启按住<code>音量+</code>，禁用secureboot</p>
<p>设置u盘优先启动</p>
<h4 id="基本系统安装"><a href="#基本系统安装" class="headerlink" title="基本系统安装"></a>基本系统安装</h4><p>参考arch wiki</p>
<p>[<a href="https://wiki.archlinux.org/index.php/Installation_guide]">https://wiki.archlinux.org/index.php/Installation_guide]</a>(Installation guide)</p>
<p>进入u盘的linux安装环境。</p>
<h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><ol>
<li><p><code>fdisk -l</code> 查看区块状态，fdisk内<code>w</code>写入修改，<code>fdisk -h</code> 帮助</p>
</li>
<li><p>分区自己的磁盘，我的磁盘是nvme协议的磁盘且预留了50G，<code>fdisk /dev/nvme0n1</code></p>
</li>
<li><p>创建EFI逻辑分区，512MB就够了。</p>
<p> 创建efi目录（efi启动目录，所有boot loader相关） <code>mkdir -p /boot/efi</code></p>
<p>创建efi分区，<code>n</code> 创建新分区，回车确定分区起始地址，<code>+512M</code> 给出分区大小，这个逻辑分区名是:<code>nvme0n1p7</code> 修改分区类型，<code>t</code>命令指定类型，输入<code>1</code>，确定自己换的就是EFI SYSTEM。</p>
<p>创建swap分区，这个看个人，随意大小，格式化swap分区<code>mkswap /dev/nvme0n1p8</code>，挂载交换区<code>swapon /dev/nvme0n1p8</code></p>
<p>创建mnt主分区，要有其他文件夹想自设分区可以随意 <code>n</code>-&gt;<code>回车确定开始地址</code>-&gt;<code>回车确定结束地址</code>，自动获得了剩余所有空间的逻辑分区<code>nvme0n1p9</code>，格式化分区<code>mkfs.ext4 /dev/nvme0n1p9</code></p>
</li>
</ol>
<h5 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h5><ol>
<li><code>mkswap /dev/nvme0n1p8</code> : 缓存</li>
<li><code>swapon /dev/nvme0n1p8</code></li>
<li><code>mount /dev/nvme0n1p9 /mnt</code> ： 主分区</li>
<li><code>mkdir -p /mnt/boot/efi</code>  <code>mount /dev/nvme0n1p7 /mnt/boot/efi</code>：挂载efi分区</li>
<li><code>wifi-menu</code>：设置网络连接</li>
<li><code>vim /etc/pacman.d/mirrorlist</code>：将CN的放在最前面</li>
</ol>
<h5 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h5><ol>
<li><code>pacstrap -i /mnt base base-devel linux linux-firmware</code>：安装系统和基本开发组件</li>
<li><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code>：生成挂载信息，以后系统启动执行挂载</li>
<li><code>arch-chroot /mnt</code>：进入安装好的系统</li>
</ol>
<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><ol>
<li>不建议直接使用root用户操作，很多软件yaourt和chromium等不可以root执行</li>
<li><code>useradd -m -g users tr</code>：<code>-m</code>为生成主目录（不生产可能导致软件无法运行，因为无法在主目录写配置） <code>-g users</code>为将用户放入users组</li>
<li><code>passwd tr</code>：设置密码</li>
<li><code>chmod u+w /etc/sudoers</code>：给用户权限文件write权限</li>
<li><code>visudo</code>：在root下面写上类似语句<code>tr ALL=(ALL) ALL</code>，此操作可让用户执行root命令</li>
<li><code>passwd</code>：设置root密码</li>
</ol>
<h5 id="时区-本地化-驱动设置"><a href="#时区-本地化-驱动设置" class="headerlink" title="时区+本地化+驱动设置"></a>时区+本地化+驱动设置</h5><ol>
<li><code>pacman -S root</code>：安装root管理</li>
<li><code>echo TrArch &gt;/etc/hostname</code>：设置主机名</li>
<li><code>pacman -S vim , vim /etc/locale.gen</code>：！！本地化设置，将en_US和zn_CN等取消注释！！</li>
<li><code>locale-gen</code>：生成本地化配置</li>
<li><code>ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</code>：设置时区</li>
<li><code>hwclock --localtime</code>：防止和windows时间冲突，将时间设为本机时间而不是UTC时间</li>
<li><code>pacman -S dialog wpa_supplicant netctl wireless_tools chcpcd</code>：安装网络工具，防止待会启动无法联网</li>
<li><code>pacman -S xf86-video-intel xf86-input-synaptics</code>：安装显卡和触摸板驱动</li>
</ol>
<h5 id="重要！：设置启动管理器（bootloader）"><a href="#重要！：设置启动管理器（bootloader）" class="headerlink" title="重要！：设置启动管理器（bootloader）"></a>重要！：设置启动管理器（bootloader）</h5><p>启动项管理器负责管理启动项，在uefi启动表中添加启动项，在uefi配置界面可以看到。在linux中这是由<code>efibootmgr</code>管理的，<code>bootloader</code>是存放在<code>efi</code>系统格式分区的引导器，在机器通电后，首先根据启动项加载对应<code>bootloader</code>，<code>bootloader</code>负责继续引导操作系统内核的启动，在<code>kernel</code>真正启动前，会引导执行<code>initramfs：init ram file system</code>，确保内核能够访问文件系统，然后执行<code>init</code>线程启动内核。</p>
<ol>
<li>安装bootloader管理器：<code>pacman -S efibootmgr</code></li>
</ol>
<p>这里推荐两个常用的<code>bootloader</code>：grub2 和 refind</p>
<h6 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h6><ol>
<li><p><code>pacman -S grub-efi-x86_64</code></p>
</li>
<li><p><code>grub-install --efi-directory=/boot/efi/ --bootloader-id=archlinux --recheck</code>：–efi-directory 参数指定自己的efi分区位置，<code>bootloader</code>都是存放在efi分区内单独管理的，如果没有按照前文操作，现在划点空间生成一个efi分区挂载即可<code>mount /dev/... /boot/efi</code>。–bootloader-id：为生成的文件夹的名字，文件夹位于/boot/efi/EFI/archlinux</p>
</li>
<li><p><code>pacman -S os-prober</code>：双系统检测windows的</p>
</li>
<li><p><code>grub-mkconfig -o /boot/grub/grub.cfg</code>：生成引导文件，这步会自动识别boot/efi分区内的系统，生成引导文件。</p>
</li>
<li><p><code>reboot</code>即可</p>
</li>
</ol>
<h6 id="rEFInd"><a href="#rEFInd" class="headerlink" title="rEFInd"></a>rEFInd</h6><p>推荐使用，比较美观，secureboot配置方便，配置简单，后面有讲解配置secureboot。</p>
<ol>
<li><p>在确保挂载了efi分区的情况下（mount /dev/.. /boot/efi）<code>pacman -S refind</code></p>
</li>
<li><p><code>pacman -S os-prober</code></p>
</li>
<li><p><code>refind-install</code></p>
</li>
</ol>
<h5 id="安装桌面环境"><a href="#安装桌面环境" class="headerlink" title="安装桌面环境"></a>安装桌面环境</h5><ol>
<li><p><code>pacman -S  accountsservice gvfs gvfs-mtp gvfs-afc ntfs-3g exfat-utils</code>：安装基本包</p>
</li>
<li><p><code>pacman -S networkmanager network-manager-applet gnome-keyring</code>：安装网络管理器等</p>
</li>
<li><p><code>systemctl enable NetworkManager.service</code>：开机自启动网络控制</p>
</li>
<li><p><code>pacman -S gnome gnome-extra gdm</code>：安装gnome</p>
</li>
<li><p><code>systemctl enable gdm </code></p>
</li>
<li><p>这时候重启，可能存在缺少字符<code>terminal</code>无法打开和无法显示中文文字的问题，下载中文字符:<code>pacman -S wqy-zenhei ttf-fireflysung</code> <code>locale-gen </code></p>
</li>
<li><p>重启后若还是无法打开<code>terminal</code>，按下<code>windows</code>键，打开<code>settings</code>，在<code>region&amp;language</code>内添加英文系统，<code>logout</code>即可</p>
</li>
</ol>
<h4 id="surface-archlinux-自定义内核配置"><a href="#surface-archlinux-自定义内核配置" class="headerlink" title="surface-archlinux 自定义内核配置"></a>surface-archlinux 自定义内核配置</h4><h5 id="生成内核"><a href="#生成内核" class="headerlink" title="生成内核"></a>生成内核</h5><p>使用了<code>refid</code>作为<code>bootloader</code>，如果没有最好下载配置一个。</p>
<ol>
<li><p><code>pacman -S wget</code>：安装下载器</p>
</li>
<li><p><code>vim /etc/hosts</code>：防止githubcontent无法访问，文件内配置<code>151.101.76.133 raw.githubusercontent.com</code></p>
</li>
<li><p><code>wget https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc</code> ：下载key文件</p>
</li>
<li><p><code>pacman-key --add surface.asc </code>：添加key文件</p>
</li>
<li><p><code>pacman -Syy</code>：更新下载库</p>
</li>
<li><p><code>pacman -S linux-surface-headers linux-surface surface-ipts-firmware</code>：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NOTE:总共大概80m下载很慢的话，配置一个aria2，`vim /etc/pacman.conf `配置aria2加速，这样pacman下载的时候会显示下载地址，把地址拷贝下来，用其他软件下载，下载好后`pacman -U xxx`安装 或者 `rm /var/cache/pacman/pkg/linux-surface-*` 删除pacman下载缓存，`cp linux-surface-headers-5.6.14.arch1-1-x86_64.pkg.tar.zst  surface-ipts-firmware-20200402-1-any.pkg.tar.zst /var/cache/pacman/pkg/`，再执行`pacman -S linux-surface-headers linux-surface surface-ipts-firmware`</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>内核安装完成，在/boot下面会多出<code>vmlinuz-linux-surface</code>等文件，此时<code>refind-install</code>会出问题，建议手动配置<code>refind</code></li>
</ol>
<h5 id="refind手动配置启动项"><a href="#refind手动配置启动项" class="headerlink" title="refind手动配置启动项"></a>refind手动配置启动项</h5><p>以下所有操作建议在u盘arch内执行，否则可能无法执行</p>
<p>进入u盘的archlinux live cd</p>
<ol>
<li><p><code>wifi-menu</code></p>
</li>
<li><p><code>mount /dev/nvme0n1p9 /mnt</code></p>
</li>
<li><p><code>mount /dev/nvme01p7 /mnt/boot/efi</code></p>
</li>
<li><p><code>arch-chroot /mnt</code></p>
</li>
<li><p><code>vim  /boot/efi/EFI/refind/refind.conf</code>配置内容。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下为配置的标准模板，需要注意的是`volume`,`loader`,`initrd`，`PARTUUID`，这四个要是配置不对就启动失败。</span><br><span class="line"></span><br><span class="line">1. volume: 这个是识别地址，支持卷标（类似windows下的C盘D盘概念），也支持GUID，我们就用卷标就够了，这里的值应该填写/boot/vmlinuz-linux所在的地址，使用`ls -l /dev/disk/by-label/`看所有设备的label，我的存放boot文件夹的分区是`/dev/nvme0n1p9`，但是这个分区没有label,手动生成卷标`e2label /dev/nvme0n1p9 ArchLinux`，这时候就有卷标了</span><br><span class="line"></span><br><span class="line">2. loader：这个是内核启动器地址，一般默认放在/boot/vmliunz-linux，自己可以ls看一下，不存在没有的情况，如果volume设置没问题了，正常设置路径即可</span><br><span class="line"></span><br><span class="line">3. initrd：这个是内核初始化ram和文件系统以确保内核访问正常的工具，同上</span><br><span class="line"></span><br><span class="line">4. PARTUUID：这个内核启动后的参数设置，也是linux系统所在的分区的UUID，我的系统在/dev/nvme0n1p9，使用`ls -l /dev/disk/by-partuuid/|grep nvme0n1p9`查看uuid，将uuid写入</span><br><span class="line"></span><br><span class="line">最后我的设置如下</span><br><span class="line"></span><br><span class="line">普通linux内核：</span><br><span class="line"></span><br><span class="line">menuentry &quot;ArchLinux&quot; &#123;</span><br><span class="line">	icon     /EFI/refind/icons/os_arch.png</span><br><span class="line">	volume   &quot;Arch Linux&quot;</span><br><span class="line">	loader   /boot/vmlinuz-linux</span><br><span class="line">	initrd   /boot/initramfs-linux.img</span><br><span class="line">	options  &quot;root=PARTUUID=你-自-己-的-UUID rw add_efi_memmap initrd=boot\intel-ucode.img initrd=boot\amd-ucode.img&quot;</span><br><span class="line">	submenuentry &quot;Boot using fallback initramfs&quot; &#123;</span><br><span class="line">		initrd /boot/initramfs-linux-fallback.img</span><br><span class="line">	&#125;</span><br><span class="line">	submenuentry &quot;Boot to terminal&quot; &#123;</span><br><span class="line">		add_options &quot;systemd.unit=multi-user.target&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">surface的linux内核：</span><br><span class="line"></span><br><span class="line">menuentry &quot;ArchLinux&quot; &#123;</span><br><span class="line">	icon     /EFI/refind/icons/os_arch.png</span><br><span class="line">	volume   &quot;Arch Linux&quot;</span><br><span class="line">	loader   /boot/vmlinuz-linux-surface</span><br><span class="line">	initrd   /boot/initramfs-linux-surface.img</span><br><span class="line">	options  &quot;root=PARTUUID=你-自-己-的-UUID rw add_efi_memmap initrd=boot\intel-ucode.img initrd=boot\amd-ucode.img&quot;</span><br><span class="line">	submenuentry &quot;Boot using fallback initramfs&quot; &#123;</span><br><span class="line">		initrd /boot/initramfs-linux-surface-fallback.img</span><br><span class="line">	&#125;</span><br><span class="line">	submenuentry &quot;Boot to terminal&quot; &#123;</span><br><span class="line">		add_options &quot;systemd.unit=multi-user.target&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>reboot应该可以看到手动配置的两个内核了，如果没错两个都是可以正常启动。<code>uname -a</code>如果是surface内核可以看到带surface字样。</p>
<h4 id="支持SecureBoot配置"><a href="#支持SecureBoot配置" class="headerlink" title="支持SecureBoot配置"></a>支持SecureBoot配置</h4><p>SecureBoot原理，这东西的存在是为了防止在引导的时候被恶意软件控制，它的作用机制是使用<code>MOK（machine own key 系统内置签名）</code>来验证引导的东西。如果签名符合，那么系统准许引导，反之不许。</p>
<p>但是微软比较流氓，默认只允许自家的windows启动，但是也支持其他系统的启动引导（需要工具）。</p>
<p>首先进入SeruceBoot，开启第三方（third party）支持。这里用的是<code>rEFInd+shim</code>，<code>shim</code>支持签名和hash。另一个工具叫<code>PreLoader</code>，不做介绍</p>
<p><code>shim原理</code>，secureboot启动会做一个验证，微软支持<code>shim</code>和<code>PreLoader</code>，所以检测到<code>shim</code>，由于信任机制会继续启动，<code>shim</code>来启动<code>shim</code>所信任的系统内核，所以这是一个信任链，那么<code>shim</code>怎么信任内核呢。两种方式，hash或者签名，如果shim内存在系统的hash（最简单的方法）或者签名，那么这个系统就是被信任的系统，可以被继续加载。这就是下面要做的配置。</p>
<h5 id="shim签名"><a href="#shim签名" class="headerlink" title="shim签名"></a>shim签名</h5><p><code>shim</code>在<code>AUR</code>库内，这里用<code>yaourt</code>安装<code>shim</code></p>
<ol>
<li><p><code>vim /etc/pacman.conf</code>:写入：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[archlinuxfr]</span><br><span class="line">   Server = http://repo.archlinux.fr/$arch</span><br></pre></td></tr></table></figure></li>
<li><p><code>pacman -Sy</code>同步库</p>
</li>
<li><p><code>pacman -S yaourt</code></p>
</li>
<li><p><code>yaourt shim-signed </code>：安装shim</p>
</li>
<li><p><code>pacman -S sbsigntools</code>：安装签名工具</p>
</li>
<li><p><code>refind-install --shim /usr/share/shim-signed/shimx64.efi --localkeys</code>：配置refind的shim keys目录，可以在/boot/efi/EFI/refind/keys存放内核的签名了。</p>
</li>
<li><p><code>sbsign --key /etc/refind.d/keys/refind_local.key --cert /etc/refind.d/keys/refind_local.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux</code>：可以在/boot/efi/EFI/refind/keys内看到签名，这里可以再执行几次签名其他自定义内核，本质上是将启动的内核引导文件添加签名信息。</p>
</li>
</ol>
<p>NOTE: 实际可以不用添加key，直接refind启动界面，使用enroll hash，将/boot/vmlinuz-linux（或者其他内核文件）引入即可，系统启动bootloader，bootloader启动内核文件查看签名或者hash</p>
<ol start="8">
<li><code>reboot</code>：打开secureboot支持第三方（third party），重启。进入shim控制界面，选择<code>Enroll KEY</code>，点击文件系统，找到<code>/boot/efi/EFI/refind/keys/.....key</code> 确定添加，然后重启即可。</li>
</ol>
<h4 id="独显和集显交火"><a href="#独显和集显交火" class="headerlink" title="独显和集显交火"></a>独显和集显交火</h4><ol>
<li>参考 <a href="https://wiki.archlinux.org/index.php/Bumblebee_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Bumblebee_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li>
</ol>
<h4 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h4><h4 id="桌面环境Gnome"><a href="#桌面环境Gnome" class="headerlink" title="桌面环境Gnome"></a>桌面环境Gnome</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome gnome-extra gdm xorg xorg-server xorg-xinit</span><br><span class="line">sudo systemctl enable gdm</span><br></pre></td></tr></table></figure>

<p>如果不需要开机自启动gnome，<code>systemctl disable gdm</code></p>
<p>手动启动： <code>systemctl start gdm</code></p>
<h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx fcitx-configtool fcitx-im fcitx-googlepinyin</span><br><span class="line">cat &gt; ~/.xprofile &lt;&lt;EOF</span><br><span class="line">export LC_ALL=zh_CN.UTF-8</span><br><span class="line">export XIM=fcitx</span><br><span class="line">export XIM_PROGRAM=fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts noto-fonts-cjk ttf-dejavu ttf-liberation</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure>

<p>power line fonts:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/powerline/fonts.git --depth=1</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br><span class="line">cd ..</span><br><span class="line">rm -rf fonts</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CompanyDailyProblem</title>
    <url>/2019/03/28/CompanyDailyProblem/</url>
    <content><![CDATA[<p>questions：</p>
<span id="more"></span>
<pre><code>1. AssertUtil.assertNotNull 是公司的api，抛出的异常去哪里处理了？

3. @Enumerated 和@Type 自定义type的区别
    为什么用来@Type可以让里面的value随自己的改变改动
    
4. 坑爹的jpa： 不允许mysql使用驼峰，否则自己主动解析为下划线，所以推荐在mysql中使用下划线

5.Pageable的pageRequest是从0开始的

6.使用@query和pageable一起使用的时候，会在执行query结果后使用分页


sonarytooken: 205dd880c9542453404554bbb38da09515980275


构建到exam_system_front


7.源图的项目分布：    nexus服务器 放置公司jar包
                    docker部署测试环境jenkins
                    docker配合jenkins自动部署每个模块的image
                    gitlab服务器 放置公司代码 也是jenkins拉取数据的源
                    jira服务器 文档等设定
                    
8.今日问题：公司准备把测试环境从100服务器转移到99服务器 步骤如下
            1.先在99服务器开始配置自动化部署和测试环境docker和jenkins，
                jenkins是基于docker安装的，其中一些代码审查工具，maven，jdk等要在jenkins容器配置好
                比如sonarQube得在容器安装后，配置jenkins插件。。。
            
            2.jenkins自动部署步骤：首先在gitlab中有一个账号，在jenkins中通过添加这个账号形成拉取凭据
                每次拉取后执行一下脚本或者maven命令，大部分自动部署项目都是maven，直接执行maven自己的命令即可
                比如maven clean package，会自动生成/target/*.war包
                下一步就是把这个生成的包推送到99号服务器的一个目录下，这个目录下有打包成镜像的文件。配置jenkins的publish ssh
                写好推送的文件和推送后执行的脚本。
                在推送过去后，jenkins执行这个脚本，这个脚本把推送过来的war包打成docker镜像文件。
                这样可以直接运行这些服务器了
            
            3.在安装了jenkins和一些环境后，出先了一个问题：jenkins中拉取的数据源的数据库配置是100号服务器，
                但是需要转到99号服务器的测试数据库，jenkins拉取的是master分支
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Dijkstra迪杰斯特拉算法</title>
    <url>/2021/10/29/Dijkstra%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Dijkstra迪杰斯特拉算法"><a href="#Dijkstra迪杰斯特拉算法" class="headerlink" title="Dijkstra迪杰斯特拉算法"></a>Dijkstra迪杰斯特拉算法</h1><p>最短路径算法</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>个人感觉迪杰斯特拉算法和普利姆(Prime)算法很像都是从已有集合找到最小边开始，向集合内持续添加最小边的节点。首先写出所有节点的直接路径，从已有集合开始算到其他节点的最短距离，将在这一轮中找到的最小距离所在的节点录入集合，循环……</p>
<h2 id="算法示例"><a href="#算法示例" class="headerlink" title="算法示例"></a>算法示例</h2><p><img src="/images/pasted-90.png" alt="upload successful"><br>以这个为例我们找出节点1到其他所有节点的最短距离</p>
<p><img src="/images/pasted-91.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">画出整张表格的框架，顶点 2，3，4，5 初始集合为1，第一轮查看1到2，3，4，5的距离分别为10，无穷，无穷，5。找出第一轮的最短距离为 1-5的距离，将5加入集合。之后再也不用关注5，因为已经是最短距离了（不存在经过其他节点更小的情况，可以自行推算）。</span><br><span class="line"></span><br><span class="line">第一轮结束后，集合内有1，5两个节点，且5节点不用再关注了，第二轮开始：看刚刚假如的节点5到其他节点的距离再加上1-5的距离，看是否小于左边的距离，小的话就替换，5到2，3，4的距离分别为3，9，2，加上1到5的距离后为：8，14，7都比左边一列小，所以结果都覆写了，再次找到最小距离：1-5-4的距离7，将4假如集合。</span><br><span class="line"></span><br><span class="line">循环到所有节点进入集合即可</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下次实现</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 深入1</title>
    <url>/2020/01/22/Docker-Complete/</url>
    <content><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><span id="more"></span>

<h2 id="Docker出现的历史和原因"><a href="#Docker出现的历史和原因" class="headerlink" title="Docker出现的历史和原因"></a>Docker出现的历史和原因</h2><p>开发环境，测试环境，生产环境，要配置很多东西，nginx端口，web端口，后端，注册中心配置等等。版本问题也会导致服务不可用，运维成本比较大。</p>
<p>主要还是环境配置很麻烦，特别是集群的话，每个机器安装一遍，费时费力</p>
<p>发布项目时可能发个jar或者war包，但是需要环境才能运行这个包，最好能把环境一起打包发过去。</p>
<p>Docker就是服务于开发解决上述问题的解决方案。</p>
<p>从而达成了：java – jar包 – 打包项目带上环境（镜像） — 放入docker仓库 — 下载镜像–运行镜像</p>
<p>10年发布，后来docker开源才火了起来，因为大家发现docker比起vm这些软件是真的轻量。</p>
<p>Docker和虚拟机本质都是虚拟化技术，虚拟机需要虚拟化所有硬件，容器只关注软件本身，只安装最核心的东西（linux核心也就一些指令大概4m）</p>
<h2 id="docker本身"><a href="#docker本身" class="headerlink" title="docker本身"></a>docker本身</h2><p>Docker基于Golang开发，是个开源项目</p>
<p>Docker推荐阅读官方文档，文档非常详细，可以看看dockerHub类似github</p>
<p>Docker容器是没有自己的内核的（虚拟机有完整的内核），但有自己独特的环境，容器之间是共享内核的。</p>
<p>image：docker镜像类似与java中的类概念<br>container：容器，类似与java中的对象的概念，容器是从镜像过来的，容器之间是隔离的<br>repository：仓库，存放image的地方</p>
<h2 id="docker初步安装和运行"><a href="#docker初步安装和运行" class="headerlink" title="docker初步安装和运行"></a>docker初步安装和运行</h2><p>根据docker官方安装文档装下来就行了，可能要改下源，安装好后<code>docker version</code>查看docker版本</p>
<p>执行<code>docker run hello-world</code>测试hello world</p>
<p>执行<code>docker images</code>查看镜像</p>
<p>如果是linux系统，资源一般放在/var/lib/docker内</p>
<p>执行<code>docker run ...</code>发生的事：docker会先去本地仓库寻找镜像，如果找不到回去docker hub找对应镜像并且下载，如果用的阿里云服务器，可以配置镜像加速地址，就不去docker hub下载了直接从阿里云下载更快点。</p>
<p>docker是cs架构的系统，Docker的守护进程运行在主机，客户端命令是通过socket发送通信的，DockerServer接收后执行指令</p>
<h2 id="docker常用指令"><a href="#docker常用指令" class="headerlink" title="docker常用指令"></a>docker常用指令</h2><p>所有指令可以在官网看到</p>
<p>帮助命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info  显示当前运行状态</span><br><span class="line">docker &lt;Command&gt; --help</span><br></pre></td></tr></table></figure>
<p>镜像命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images 查看镜像 -a显示全部 -q只显示id</span><br><span class="line"></span><br><span class="line">docker search 查询镜像 --filte=stars=100 搜索stars大于100的镜像 </span><br><span class="line"></span><br><span class="line">docker pull 下载镜像 例：docker pull mysql:5.7(带版本) docker下载采用了分层的方式</span><br><span class="line"></span><br><span class="line">docker rmi -f &lt;id&gt; 通过镜像id删除，或者 docker image rm &lt;id&gt;</span><br><span class="line"></span><br><span class="line">批量删除：docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure>

<p>容器命令：<br>运行创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [参数] &lt;镜像&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name=&quot;&quot;    #给容器起名</span><br><span class="line">-d      	#类似nohup，静默运行</span><br><span class="line">-it			 #进入容器查看内容</span><br><span class="line">-p			#指定容器端口 -p 9999:8080</span><br><span class="line">	主机端口：容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P 			#随机端口</span><br><span class="line">-c			#写入命令</span><br><span class="line">--rm		#容器启动后删除</span><br><span class="line">--net		#网络配置</span><br><span class="line"><span class="meta">#</span><span class="bash">例子 启动centos 并且写入命令（一段shell脚本）</span></span><br><span class="line">docker run -it --name=&quot;mycentos&quot; centos #直接进入执行</span><br><span class="line"> docker run -d --name=&quot;mycentos&quot; centos /bin/bash -c &quot;while true;do echo hello world;sleep 1;done&quot; </span><br></pre></td></tr></table></figure>
<p>查看容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">		-a #查看所有的容器</span><br><span class="line">        -n=? #显示最近创建的容器</span><br><span class="line">        -q #只显示id</span><br></pre></td></tr></table></figure>

<p>退出容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit #容器停止并且推出</span><br><span class="line">ctrl + P + Q #容器不停止退出</span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm &lt;容器id&gt; #不能删除正在运行的容器除非加上 -f</span><br><span class="line">docker rm $(docker ps -aq) #删除全部容器</span><br></pre></td></tr></table></figure>

<p>启动停止容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start &lt;id&gt;</span><br><span class="line">docker stop &lt;id&gt;</span><br><span class="line">docker restart &lt;id&gt;</span><br><span class="line">docker kill &lt;id&gt; #暴力停止</span><br></pre></td></tr></table></figure>

<p>进入当前运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. docker exec -it &lt;容器id&gt; /bin/bash</span><br><span class="line">2. docker attach &lt;容器id&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 区别：</span> </span><br><span class="line">方式1 docker exec</span><br><span class="line">进入容器后开启新的终端</span><br><span class="line">方式2 docker attach</span><br><span class="line">进入容器正在执行的终端</span><br></pre></td></tr></table></figure>

<p>容器和主机文件传递</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp &lt;容器id:路径&gt; 目的主机路径 #容器到主机，反过来就是主机到容器</span><br><span class="line"></span><br><span class="line">docker </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">例子 docker cp mycentos:/home/mycentosConfig ./</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看镜像源数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect --help</span><br><span class="line"><span class="meta">#</span><span class="bash">里面包含了容器id，挂载信息，网络信息等等等等</span></span><br></pre></td></tr></table></figure>

<p>其他命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台启动</span></span><br><span class="line">docker run -d &lt;镜像id&gt;</span><br><span class="line"></span><br><span class="line">例子：docker run -d centos </span><br><span class="line"><span class="meta">#</span><span class="bash"> 会发现centos停止了，因为容器后台运行必须要有前台进程，如果没有自动停止</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看日志</span></span><br><span class="line">docker logs [参数] &lt;id&gt;</span><br><span class="line">	-f 实时显示</span><br><span class="line">    --tail 11 显示最后11条</span><br><span class="line">    -t 显示时间</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看进程信息 类似top命令</span></span><br><span class="line">docker top &lt;容器id&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看cpu使用状态</span></span><br><span class="line">docker stats &lt;容器Id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="docker-常用示例"><a href="#docker-常用示例" class="headerlink" title="docker 常用示例"></a>docker 常用示例</h2><h3 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h3><p>可以去官网搜索nginx，看看有哪些版本和使用日志</p>
<p><img src="/images/pasted-92.png" alt="upload successful"></p>
<p>启动nginx并且映射一个端口到主机，nginx默认80端口，这里映射到本地9999<br><code>docker run -d --name mynginx -p 9999:80 nginx</code></p>
<p>启动后可以通过浏览器或者命令访问nginx服务：<code>curl http://localhost:9999</code></p>
<p>也可以再次进入容器，找到nginx的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-93.png" alt="upload successful"></p>
<p>因为要经常修改nginx配置文件，所以最好挂载数据卷。</p>
<h3 id="安装配置tomcat"><a href="#安装配置tomcat" class="headerlink" title="安装配置tomcat"></a>安装配置tomcat</h3><p>可以直接用官方的命令，里面的rm参数是用完即删除容器的，最好不要加上</p>
<p><img src="/images/pasted-94.png" alt="upload successful"></p>
<p>装好的可以exec进入，但是缺很多命令，因为docker安装的是最小可运行环境</p>
<h3 id="安装部署ES-kibana"><a href="#安装部署ES-kibana" class="headerlink" title="安装部署ES+kibana"></a>安装部署ES+kibana</h3><ol>
<li><p>es端口多还很耗内存，数据得放到安全目录</p>
</li>
<li><p>还是推荐使用官方的命令</p>
</li>
</ol>
<p><img src="/images/pasted-95.png" alt="upload successful"></p>
<p>先不用network<br><code>$ docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:tag </code><br>太耗费内存和cpu，需要增加限制<br><code>$ docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:8.0 -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; </code></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+jenkins自动化部署 （公司）</title>
    <url>/2019/03/28/Docker-jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2-%EF%BC%88%E5%85%AC%E5%8F%B8%EF%BC%89/</url>
    <content><![CDATA[<h3 id="公司的部署方式"><a href="#公司的部署方式" class="headerlink" title="公司的部署方式"></a>公司的部署方式</h3><p>复制公司的部署脚本和流程等。</p>
<span id="more"></span>

<ol>
<li>配置gitlab或者直接使用github</li>
<li>配置docker和jenkins</li>
<li>配置一个maven项目到github或者gitlab，稍后执行maven打包命令</li>
<li>配置一个jenkins的maven工程，可以看之前写的jenkin的日志</li>
<li>假设部署的包放在/root/edu-deploy下</li>
<li>/root/edu-deploy目录下应该有执行docker打包脚本和一个Dockerfile模板，所有的自动生成的目录都从这个模板拷贝</li>
<li>/root/edu-deploy/build_image.sh内容</li>
</ol>
<p>region i { information 示例<br>← information icon<br>} region information 示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: build_image.sh [[[ -s server_name] [-b [dev | main | test]] [-v version] | [-h]&#x27;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        -s | --server )  <span class="built_in">shift</span></span><br><span class="line">                         server_name=<span class="variable">$1</span></span><br><span class="line">                         ;;</span><br><span class="line">        -b | --branch )  <span class="built_in">shift</span></span><br><span class="line">                         branch_name=<span class="variable">$1</span></span><br><span class="line">                         ;;</span><br><span class="line">        -v | --version ) <span class="built_in">shift</span></span><br><span class="line">                         version=<span class="variable">$1</span></span><br><span class="line">                         ;;</span><br><span class="line">        -h | --<span class="built_in">help</span> )    usage</span><br><span class="line">                         <span class="built_in">exit</span></span><br><span class="line">                         ;;</span><br><span class="line">        * )              usage</span><br><span class="line">                         <span class="built_in">echo</span> <span class="string">&quot;Error script parameters!&quot;</span></span><br><span class="line">                         <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$server_name</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The server name cannot empty, please input your project server name!&quot;</span></span><br><span class="line">    usage; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    branch_name=<span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> != <span class="string">&quot;dev&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> != <span class="string">&quot;main&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> != <span class="string">&quot;test&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error branch name, the right name should be &#x27;dev&#x27;, &#x27;main&#x27; or &#x27;test&#x27;&quot;</span></span><br><span class="line">    usage; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check version number</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$version</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    version=<span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    version=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;version&#125;</span>&quot;</span> | sed -ne <span class="string">&#x27;s/[^0-9]*\(\([0-9]\.\)\&#123;0,4\&#125;[0-9][^.]\)\([^ ]*\).*/\1\3/p&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$version</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        version=<span class="string">&quot;latest&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">LAST_RUNNING_IMAGE=$(sudo docker ps -a | grep <span class="variable">$server_name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">LAST_IMAGE=$(sudo docker images -a | grep <span class="variable">$server_name</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop the previous image and remove it</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;LAST_RUNNING_IMAGE&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    sudo docker stop <span class="variable">$LAST_RUNNING_IMAGE</span></span><br><span class="line">    sudo docker rm <span class="variable">$LAST_RUNNING_IMAGE</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;LAST_IMAGE&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    sudo docker rmi <span class="variable">$LAST_IMAGE</span> --force</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">DEPLOY_PATH=<span class="string">&quot;/root/edu-deploy&quot;</span></span><br><span class="line">SERVER_PATH=<span class="variable">$&#123;DEPLOY_PATH&#125;</span>/<span class="variable">$&#123;server_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$SERVER_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   mkdir <span class="variable">$SERVER_PATH</span></span><br><span class="line">   rm <span class="variable">$SERVER_PATH</span>/*</span><br><span class="line">   cp <span class="variable">$DEPLOY_PATH</span>/Dockerfile <span class="variable">$SERVER_PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$SERVER_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   JAR_FILE=<span class="string">&quot;<span class="variable">$&#123;DEPLOY_PATH&#125;</span>/<span class="variable">$&#123;server_name&#125;</span>-<span class="variable">$&#123;version&#125;</span>.jar&quot;</span></span><br><span class="line">   mv <span class="variable">$JAR_FILE</span> <span class="variable">$SERVER_PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">IMAGE_NAME=<span class="string">&quot;online-edu/<span class="variable">$&#123;server_name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$version</span>&quot;</span> = <span class="string">&quot;latest&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    IMAGE=<span class="string">&quot;<span class="variable">$&#123;IMAGE_NAME&#125;</span>:<span class="variable">$&#123;branch_name&#125;</span>-<span class="variable">$&#123;version&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    DATE=$(date <span class="string">&#x27;+%Y%m%d%H%M%S&#x27;</span>)</span><br><span class="line">    IMAGE=<span class="string">&quot;<span class="variable">$&#123;IMAGE_NAME&#125;</span>:<span class="variable">$&#123;branch_name&#125;</span>-<span class="variable">$&#123;version&#125;</span>-<span class="variable">$&#123;DATE&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build a new image and run it.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sudo docker build -t <span class="variable">$IMAGE</span> <span class="variable">$SERVER_PATH</span>&quot;</span></span><br><span class="line">sudo docker build -t <span class="variable">$IMAGE</span> <span class="variable">$SERVER_PATH</span></span><br><span class="line">sudo docker run --detach --interactive --tty --net=host --name=<span class="variable">$server_name</span> <span class="string">&quot;<span class="variable">$&#123;IMAGE&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>模板Dockerfile文件 /root/edu-deploy/Dockerfile</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">From centos</span><br><span class="line">From openjdk:8-jdk</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD *.jar app.jar</span><br><span class="line">RUN sh -c <span class="string">&#x27;touch /app.jar&#x27;</span></span><br><span class="line">ENV JAVA_OPTS=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</span></span><br><span class="line">CMD <span class="built_in">exec</span> java <span class="variable">$JAVA_OPTS</span> -Djava.security.egd=file:/dev/./urandom -jar /app.jar</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="9">
<li>之后只要在jenkins中点击立即构建，应该会自动打包一个docker镜像在/root/edu-deploy下</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 深入3</title>
    <url>/2020/01/24/Docker-%E6%B7%B1%E5%85%A53/</url>
    <content><![CDATA[<h1 id="Docker-深入3"><a href="#Docker-深入3" class="headerlink" title="Docker 深入3"></a>Docker 深入3</h1><span id="more"></span>

<h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>首先启动一个带net-tool的镜像（可以自己写个dockerfile构建下镜像或者进入容器安装<code> apt update &amp;&amp; apt install -y iproute2</code>），查看容器的网卡信息</p>
<p><img src="/images/pasted-114.png" alt="upload successful"></p>
<p>对于windows下，默认并没有docker的网卡，所以启动的容器可能ping不通，如果存在网卡，会发现网卡地址和容器内网卡地址处于一个网段下。</p>
<p>实验发现每启动一个容器，宿主机内会多一个虚拟网卡，正好和容器匹配，这个技术称为<code>veth-pair</code></p>
<p><img src="/images/pasted-115.png" alt="upload successful"></p>
<p>工作原理，就是个交换机（多网桥）</p>
<h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><p>类似dns，通过容器名访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br></pre></td></tr></table></figure>
<p>这样03即可ping通02，其实–link只是在启动的容器内添加了host配置，不过我感觉这种方式不好用，直接把host文件共享更方便配集群的话。</p>
<p>查看网络配置:<code>docker network ls</code> <code>docker network inspect</code></p>
<h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p>直接启动的容器，默认会添加<code>--net bridge</code>参数</p>
<p>在默认的桥接模式下，宿主机会存在一个虚拟网卡用作所有容器的网关，容器之间通信都走这个网关。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网络:docker network create</span> </span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 mynet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用自己创建的网络</span></span><br><span class="line">docker run -d -P --name trtomcat01 --net mynet tr/tomcat:1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义网络本质是划分网段，将容器放入网段下 查看网络</span></span><br><span class="line">docker network inspect mynet</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-116.png" alt="upload successful"></p>
<p>这样的最大好处是可以通过容器名访问了，且保证了只有子网内的容器是可以互相访问的<br><img src="/images/pasted-117.png" alt="upload successful"></p>
<p>通过docker创建的网络，不同的网段是无法通信的，通过<code>docker network connect 网络 目标容器</code>联通</p>
<h2 id="REDIS集群"><a href="#REDIS集群" class="headerlink" title="REDIS集群"></a>REDIS集群</h2><p>做这样一个模型，两个redis组合一个哨兵模式，共有三组</p>
<ol>
<li><p>组网，把redis集群放在一个局域网网段<code>docker network create --driver bridge --subnet 172.38.0.0/16 redisnet</code></p>
</li>
<li><p>启动容器</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 批量创建配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for port in $(seq 1 6);</span><br><span class="line">do</span><br><span class="line">mkdir -p ~/dockerPractice/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch  ~/dockerPractice/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt; ~/dockerPractice/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量启动redis容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for port in $(seq 1 6);</span><br><span class="line">do</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 \</span><br><span class="line">-p 1637$&#123;port&#125;:16379 \</span><br><span class="line">--name redis-$&#123;port&#125; \</span><br><span class="line">-v ~/dockerPractice/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v ~/dockerPractice/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf -d \</span><br><span class="line">--net redisnet \</span><br><span class="line">--ip 172.38.0.1$&#123;port&#125; \</span><br><span class="line">redis \</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<blockquote>
<p>容器启动了，现在需要将这六个容器集群，这里可以随便进入一个redis容器，默认目录是/data,里面有节点配置文件，可以通过命令配置三个主机和从机:</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379</span><br><span class="line">172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-118.png" alt="upload successful"></p>
<blockquote>
<p>使用集群测试，可以在集群内登陆：<code>redis-cli -c</code>,查看集群主从信息<code>cluster nodes</code>，键入一个值保存<code>set name tr</code>，这时候docker停止保存的主机，在重新进入redis-cli，获取<code>get name</code>发现可以在从机获取</p>
</blockquote>
<h2 id="SpringBoot打包微服务"><a href="#SpringBoot打包微服务" class="headerlink" title="SpringBoot打包微服务"></a>SpringBoot打包微服务</h2><blockquote>
<p>通过idea环境工具打包</p>
</blockquote>
<p><img src="/images/pasted-119.png" alt="upload successful"></p>
<blockquote>
<p>可以配置idea的docker仓库</p>
</blockquote>
<p><img src="/images/pasted-120.png" alt="upload successful"></p>
<blockquote>
<p>编写Dockerfile（和pom同一层级）</p>
</blockquote>
<p><img src="/images/pasted-121.png" alt="upload successful"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line">CMD [&quot;--server.port=9080&quot;]</span><br><span class="line">EXPOSE 9080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打包就行了 docker build</p>
</blockquote>
<p><img src="/images/pasted-127.png" alt="upload successful"></p>
<blockquote>
<p>启动测试镜像</p>
</blockquote>
<p><img src="/images/pasted-128.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 迁移一些自己的服务</title>
    <url>/2022/01/18/Docker-%E8%BF%81%E7%A7%BB%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="迁移自己的服务"><a href="#迁移自己的服务" class="headerlink" title="迁移自己的服务"></a>迁移自己的服务</h1><blockquote>
<p>用docker把以前服务器上的一些服务打包推送到docker hub</p>
</blockquote>
<span id="more"></span>

<h2 id="博客-hexo"><a href="#博客-hexo" class="headerlink" title="博客 hexo"></a>博客 hexo</h2><blockquote>
<p>hexo是基于nodejs的，所以镜像基于node，以下是dockerfile</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">MAINTAINER tangrui&lt;1540525748@qq.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /home/hexo</span><br><span class="line"></span><br><span class="line">RUN npm install -g hexo-cli &amp;&amp; hexo init /home/hexo &amp;&amp; cd /home/hexo &amp;&amp; npm install &amp;&amp; npm install hexo-server --save</span><br><span class="line">RUN apt update &amp;&amp; apt install -y vim &amp;&amp; apt install -y unzip</span><br><span class="line">RUN npm install --save hexo-admin </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ADD https://codeload.github.com/MOIPA/MOIPA.github.io/zip/refs/heads/master /home/hexo/<span class="built_in">source</span>/public</span></span><br><span class="line">RUN [&quot;wget&quot;,&quot;https://codeload.github.com/MOIPA/MOIPA.github.io/zip/refs/heads/master&quot;,&quot;-O&quot;,&quot;./master&quot;]</span><br><span class="line"></span><br><span class="line">RUN unzip -oq ./master &amp;&amp; mkdir public</span><br><span class="line">RUN mv  MOIPA.github.io-master/* ./public</span><br><span class="line">RUN rm -rf MOIPA.github.io-master</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/landscape/next/g&#x27; _config.yml</span><br><span class="line"></span><br><span class="line">RUN npm install hexo-migrator-rss --save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置RSS订阅，提供订阅链接</span></span><br><span class="line">RUN [&quot;npm&quot;,&quot;install&quot;,&quot;hexo-generator-feed&quot;,&quot;--save&quot;]</span><br><span class="line"> </span><br><span class="line">RUN echo &quot;\n\</span><br><span class="line">Plugins:\n\</span><br><span class="line">- hexo-generate-feed\n&quot;\</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; _config.yml</span> </span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/#RSS/RSS/g&#x27; ./themes/next/_config.yml \</span><br><span class="line">&amp;&amp; sed -i &#x27;s/Muse/Gemini/g&#x27; ./themes/next/_config.yml &amp;&amp;\</span><br><span class="line">sed -i &#x27;s/url: #/url: /g&#x27; ./themes/next/_config.yml </span><br><span class="line"></span><br><span class="line">RUN hexo g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXPOSE 4000 </span><br><span class="line"></span><br><span class="line">VOLUME [&quot;/home/hexo/&quot;]</span><br><span class="line"></span><br><span class="line">CMD [&quot;hexo&quot;,&quot;server&quot;,&quot;-p&quot;,&quot;4000&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个版本的hexo配置了next主题，我的git上的public的gitio博客内容，和rss迁移内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动博客容器</span></span><br><span class="line">docker run -d --name trhexo -p 5555:4000 moipa/hexo:1.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 迁移所有博客</span></span><br><span class="line">docker exec -it trhexo /bin/bash</span><br><span class="line"></span><br><span class="line">hexo migrate rss http://39.108.159.175:4000/atom.xml</span><br></pre></td></tr></table></figure>

<h3 id="配置个人的专属hexo镜像"><a href="#配置个人的专属hexo镜像" class="headerlink" title="配置个人的专属hexo镜像"></a>配置个人的专属hexo镜像</h3><ol>
<li><p>将linux的公钥私钥复制到镜像中</p>
</li>
<li><p>将source/_posts文件夹改为git目录，文档从github上同步，在deploy脚本内写好git push的命令</p>
</li>
<li><p>每次新电脑只需要<code>docker pull moipa/hexo:2.x</code>到本地运行即可</p>
</li>
<li><p>生成了hexo admin的key，再次使用的时候可能需要注释掉，重新去admin界面生成</p>
</li>
<li><p>自动同步（图片和文档）git脚本写好了，可以在配置好admin界面后将这个脚本加上去，之后只需要点击deploy即可完成部署<br><img src="/images/pasted-129.png" alt="upload successful"></p>
</li>
</ol>
<h3 id="镜像说明"><a href="#镜像说明" class="headerlink" title="镜像说明"></a>镜像说明</h3><ol>
<li><p>镜像文件版本2.2，docker pull下载后即可使用</p>
</li>
<li><p>admin界面写日志，deploy按钮即可同步git</p>
</li>
<li><p>需要注意的是最好记住自己哪些日志可能冲突，需要提前同步一下，否则出现冲突要么自己merge conflict，要么重建容器</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker深入2</title>
    <url>/2020/01/23/Docker%E6%B7%B1%E5%85%A52/</url>
    <content><![CDATA[<h1 id="Docker深入2"><a href="#Docker深入2" class="headerlink" title="Docker深入2"></a>Docker深入2</h1><span id="more"></span>

<h2 id="portainer可视化界面安装"><a href="#portainer可视化界面安装" class="headerlink" title="portainer可视化界面安装"></a>portainer可视化界面安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer </span><br></pre></td></tr></table></figure>

<p>访问测试</p>
<p><img src="/images/pasted-96.png" alt="upload successful"></p>
<p>如果是在windos中 挂载数据卷需要换</p>
<p><img src="/images/pasted-97.png" alt="upload successful"></p>
<h2 id="Docker镜像探究"><a href="#Docker镜像探究" class="headerlink" title="Docker镜像探究"></a>Docker镜像探究</h2><p>镜像类似一个独立软件包，但这个软件包包含了代码，运行时的库，环境变量和配置文件。</p>
<p>得到镜像：从远程仓库，或者别人复制，或者自己做（DockerFile）</p>
<h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>下载镜像的时候可以看到分了很多层，其实就是<code>UnionFs文件系统</code>，它可以对文件系统的修改作为一次次的提交，类似于<code>git</code>（比如安装一个jenkins，先安装centos内核，安装库，安装jdk，最后安装jenkins本身，多个应用可能共有安装内核和库的行为），下载时候看到的一层一层的就是这个提交记录。假设两个镜像都用到了同样的几个记录，这几个记录就不用下载了。</p>
<p>Docker镜像需要bootfs:最底层的启动器包含bootloader和kernel（精简版内核），前者用于引导加载bootfs文件系统，加载内核。当boot完成后内核就存在在内存中了，此时内存使用权转移给内核，系统卸载bootfs</p>
<p>还有rootfs：rootfs就是在bootfs之上的各个系统的发行版（ubuntu，centos等）</p>
<h3 id="Docker镜像分层原理"><a href="#Docker镜像分层原理" class="headerlink" title="Docker镜像分层原理"></a>Docker镜像分层原理</h3><p>docker下载镜像的时候回下载多次记录，下载过的记录不再下载，可以通过<code>docker inspect</code>查看每层的记录</p>
<p>具体原理：和git一样，每层（ly:layer)认为一个文件记录，下一层可能新增，或者修改，或者删除了某些文件，这一层的操作为一个记录。</p>
<h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为新副本</span><br><span class="line"></span><br><span class="line">docker commit -m &quot;&quot; -a &quot;作者&quot; &lt;镜像名&gt;:[Tag]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tomcat为例，官方的镜像内webapps是没有东西的，可以手动将webapps.list内容拷贝过去，重新打包成一个镜像</p>
<p><img src="/images/pasted-98.png" alt="upload successful"></p>
<p>这个镜像现在可以发布给任何人了</p>
<h2 id="Docker的容器数据卷"><a href="#Docker的容器数据卷" class="headerlink" title="Docker的容器数据卷"></a>Docker的容器数据卷</h2><p>一个闭合的容器没有太大意义，比如配置多的nginx，每次修改配置需要取容器内部vim修改，可以通过容器内和容器外共享文件吗。答案是肯定的，将内部容器的一个目录挂载到主机上的一个目录，实现自动同步目录内容虽然本质是硬链接。</p>
<p>使用挂载卷，每次创建容器时输入<code>参数：-v</code>即可。</p>
<p>以centos为例，从镜像启动一个容器时：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v /d/DockerV:/home/ centos /bin/bash #启动时挂载卷</span><br><span class="line"></span><br><span class="line">docker inspect #可以查看挂载的卷</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-99.png" alt="upload successful"></p>
<p>查看挂载好的卷</p>
<p><img src="/images/pasted-100.png" alt="upload successful"></p>
<h3 id="具名挂载和匿名挂载（不指定主机目录的情况）"><a href="#具名挂载和匿名挂载（不指定主机目录的情况）" class="headerlink" title="具名挂载和匿名挂载（不指定主机目录的情况）"></a>具名挂载和匿名挂载（不指定主机目录的情况）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-v 容器内路径 </span><br><span class="line"><span class="meta">#</span><span class="bash">匿名挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash">例子 docker run -d -P --name nginx01 -v /etc/nginx nginx  <span class="comment"># -P 随机选择主机 端口</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有数据卷</span></span><br><span class="line">docker volume ls #会看到大部分卷是哈希数，因为当时挂载的时候没有起名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">具名挂载</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-102.png" alt="upload successful"></p>
<p>如果是具名挂载那么数据卷默认挂载到仓库</p>
<p><img src="/images/pasted-103.png" alt="upload successful"></p>
<h3 id="挂载数据卷的读写权限配置"><a href="#挂载数据卷的读写权限配置" class="headerlink" title="挂载数据卷的读写权限配置"></a>挂载数据卷的读写权限配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">加上参数 :rw 即可</span></span><br><span class="line">docker run -d -v myvolume:/etc/nginx:ro nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> rw:可读可写</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro:只可读</span></span><br></pre></td></tr></table></figure>

<h3 id="Dockfile-挂载数据卷"><a href="#Dockfile-挂载数据卷" class="headerlink" title="Dockfile 挂载数据卷"></a>Dockfile 挂载数据卷</h3><p>DockerFile只是用来构建docker镜像的脚本，每个命令都是一层修改(commit)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dockerfile里面的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dockerfile里面的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">以什么系统作为基础</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="meta">#</span><span class="bash">匿名挂载数据卷 这里的配置在运行这个镜像的时候会自动将两个卷挂载到宿主机</span></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] </span><br><span class="line"></span><br><span class="line">CMD echo &quot;---build finished---&quot;</span><br></pre></td></tr></table></figure>
<p>将这个文件用作为我们的构建脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f .\dockerfile -t tr/centos ./</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-104.png" alt="upload successful"></p>
<h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>就是创建一个卷，这个数据卷也运行在一个容器里。</p>
<p>假设有一个需求，需要几个容器之间做数据的同步，需要参数<code>--volumes-from #同步挂载点操作</code> 子容器挂载父容器（数据卷容器）</p>
<p>例子：启动三个容器（最好是自己构建的镜像）</p>
<p><img src="/images/pasted-105.png" alt="upload successful"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\DockerV\docker-volume1&gt; docker run -itd --name trcentos01 tr/centos /bin/bash</span><br><span class="line">e14d5b0f7558eff1028427bd47ded7d85dd1087010a6dab8ed777bca41e59b2b</span><br><span class="line">PS D:\DockerV\docker-volume1&gt; docker run -itd --name trcentos02 --volumes-from trcentos01 tr/centos /bin/bash</span><br><span class="line">9d89c8cffb07f14b51853a7d79f9b125ab339e00ed97638ce35a77fe42f516b8</span><br><span class="line">PS D:\DockerV\docker-volume1&gt;</span><br><span class="line"></span><br><span class="line">--itd ：后台运行centos但是不进入命令行</span><br></pre></td></tr></table></figure>
<p>这样两个容器内的两个卷数据完全同步了。且删除随便一个容器，卷内的数据也不会丢失。</p>
<h2 id="Dockfile"><a href="#Dockfile" class="headerlink" title="Dockfile"></a>Dockfile</h2><p>DockeFile是用来构建docker镜像的文件，一般开发完就得写，简单的很。</p>
<p>需要注意的是，dockerfile编写的时候不能在命令后面写注释。</p>
<p><img src="/images/pasted-106.png" alt="upload successful"></p>
<p>要注意的指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">onbuild: 这是一个特殊指令，它后面跟的是其他指令如run，copy等，而这些指令当前构建不会执行，只有以当前镜像为基础镜像来构建下一级镜像的时候才会执行</span><br><span class="line">cmd: 容器启动执行的一些命令,如果run的时候指定了参数，会覆盖原来的参数，和run不同，run是构建镜像过程中执行的命令，通常用来安装一些软件</span><br><span class="line">entrypoint: 容器启动执行的一些命令,如果run的时候指定了参数，会追加原来的参数</span><br></pre></td></tr></table></figure>

<p>例子：构建自己的centos</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER tangrui&lt;1540525748@qq.com&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">配置环境变量</span></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install cowsay</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;--build finished--&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>构建镜像：<code>docker build -f dockerfile -t tr/centos:2.0 .</code></p>
<p>查看构建历史：<code>docker history</code></p>
<h3 id="cmd和entrypoint用法"><a href="#cmd和entrypoint用法" class="headerlink" title="cmd和entrypoint用法"></a>cmd和entrypoint用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在dockerfile中cmd和entrypoin使用方式有三种：</span><br><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)</span><br><span class="line">CMD command param1 param2 (shell form)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">举例</span></span><br><span class="line">CMD ls -a</span><br><span class="line">CMD echo &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line">CMD [&quot;echo&quot;,&quot;hello&quot;]</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br></pre></td></tr></table></figure>
<p>使用的区别：在如果dockerfile内使用了cmd，那么<code>docker run ... ls -a</code>最后一个命令会覆盖之前dockerfile内的命令</p>
<p>如果使用了entrypoint，<code>docker run ... -al</code>那么会在里面的参数追加<code>al</code>参数</p>
<h3 id="Tomcat镜像"><a href="#Tomcat镜像" class="headerlink" title="Tomcat镜像"></a>Tomcat镜像</h3><ol>
<li>tomcat需要jdk和tomcat的压缩包</li>
<li>编写dockerfile文件(如果dockerfile名字就是<code>Dockerfile</code>则不需要指定文件了</li>
</ol>
<p>下载好文件后执行build即可</p>
<p><img src="/images/pasted-107.png" alt="upload successful"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER tangrui&lt;1540525748@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u311-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.56.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local/</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置javahome</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_311</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置tomcat</span></span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.56</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.56</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入系统环境变量PATH</span></span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暴露端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动tomcat</span></span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.56/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.56/logs/catalina.out</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">构建：docker build -t tr/tomcat .</span><br><span class="line">启动：docker run -itd -P -v /d/DockerV/myTomcat/TomcatHome/webapps:/usr/local/apache-tomcat-9.0.56/webapps -v /d/DockerV/myTomcat/TomcatHome/logs:/usr/local/apache-tomcat-9.0.56/logs --name trtomcat tr/tomcat</span><br></pre></td></tr></table></figure>

<p>至此tomcat已经完毕，可以放入一个项目到webapps内测试如图：</p>
<p><img src="/images/pasted-109.png" alt="upload successful"></p>
<p>访问测试：</p>
<p><img src="/images/pasted-110.png" alt="upload successful"></p>
<h2 id="Docker发布镜像"><a href="#Docker发布镜像" class="headerlink" title="Docker发布镜像"></a>Docker发布镜像</h2><p>命令行里使用 <code>docker push</code></p>
<p>建议先去官网点击用户下的安全设置，生成一个安全口令作为密码。</p>
<p><img src="/images/pasted-111.png" alt="upload successful"><br>拒绝是因为发送的docker镜像必须符合<code>用户名/...</code>的格式，可以通过<code>docker  tag</code>重命名镜像</p>
<p><img src="/images/pasted-112.png" alt="upload successful"></p>
<p>也推荐使用docker desktop</p>
<p><img src="/images/pasted-113.png" alt="upload successful"></p>
<h2 id="本地保存镜像"><a href="#本地保存镜像" class="headerlink" title="本地保存镜像"></a>本地保存镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save spring-boot-docker  -o  /home/tr/docker/spring-boot-docker.tar</span><br><span class="line"></span><br><span class="line">docker load -i spring-boot-docker.tar  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Emacs配置</title>
    <url>/2020/08/19/Emacs%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="emacs-for-windows配置"><a href="#emacs-for-windows配置" class="headerlink" title="emacs for windows配置"></a>emacs for windows配置</h3><p>下载的emacs版本在24以上，内置了插件管理软件</p>
<span id="more"></span>

<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><ol>
<li><p>官网下载emacs</p>
</li>
<li><p>由于在windows下使用，需要配置home目录，启动emacs后可以打开手册看到windows推荐配置</p>
<p> 第一种：windows+R 输入regedit打开注册表 建立如下目录<code>\HKEY_CURRENT_USER\Software\GNU</code>，新建字符串<code>HOME</code>,值为自己的目录</p>
<p>第二种：直接添加<code>HOME</code>环境变量，不推荐，用这个方法会导致很多其他依赖home的软件配置地址失效，如git，本来地址在c:/users/.ssd下，修改后到了emacs的home目录</p>
</li>
<li><p>基础学习：ctrl+h t 打开menu手册，简单学习emacs操作方式先</p>
</li>
<li><p>M+x : alt + x   </p>
</li>
<li><p>C+x: ctrl + x</p>
</li>
<li><p>RET: enter</p>
</li>
</ol>
<h4 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h4><ol>
<li>默认的网速比较慢，直接打开home目录下的.emacs文件，在文件头添加如下内容</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; set china source</span><br><span class="line">(setq package-archives &#x27;((&quot;tgnu&quot;   . &quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/&quot;)</span><br><span class="line">                         (&quot;melpa&quot; . &quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/&quot;)))</span><br><span class="line">(package-initialize)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  <code>package-initialize</code> 只需添加一次</p>
<h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>所有插件推荐去github或者官网查readme文档</p>
<h5 id="evil"><a href="#evil" class="headerlink" title="evil"></a>evil</h5><p>这个插件为<code>vim</code>快捷键插件，和emacs冲突的键位不多，不用太多配置即可直接上手</p>
<ol>
<li><p><code>M+x package-refresh-contents</code> 刷新来自melpa的内容，evil默认不在elpa内</p>
</li>
<li><p><code>M+x package-install &lt;RET&gt; evil &lt;RET&gt;</code> 直接安装，或者 <code>M+x list-packages</code> =&gt; <code>C+s evil</code>寻找，找到后键入 <code>I</code> 标识即将安装 键入<code>x</code> 执行安装</p>
</li>
<li><p>安装后编辑<code>.emacs</code>,输入如下内容</p>
</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(require &#x27;evil)</span><br><span class="line">(evil-mode 1)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>重启即可生效，简要说明下，下方状态栏内<code>&lt;N&gt;</code>标识vim模式，<code>ctrl+z</code>即可切换到emacs模式 此时标识为<code>&lt;E&gt;</code> ,其他标识如<code>&lt;V&gt;</code>是vim的其他模式，视图模式啊啥的。evil可以添加其他扩展支持，具体wiki</li>
</ol>
<h4 id="org"><a href="#org" class="headerlink" title="org"></a>org</h4><p>必装的东西，我用emacs就是为了这个和eww</p>
<ol>
<li><p><code>M+x package-install &lt;RET&gt; org &lt;RET&gt;</code> 直接安装，或者 <code>M+x list-packages</code> =&gt; <code>C+s org</code>寻找，找到后键入 <code>I</code> 标识即将安装 键入<code>x</code> 执行安装</p>
</li>
<li><p>无需配置，直接使用，新建文本:<code>C+x f</code>在文本内:<code>M+x org-mode</code>进入org-mode</p>
<p> <code>ctrl+shift+&lt;RET&gt;</code> 快速创建一个todo</p>
<p> <code>ctrl+c ctrl+t</code>快速切换todo状态</p>
<p> <code>C-c C-s</code> 选择时间</p>
</li>
<li><p>其余看官方文档</p>
</li>
</ol>
<h4 id="smex"><a href="#smex" class="headerlink" title="smex"></a>smex</h4><p>快速命令插件，命令代替各种奇葩快捷键</p>
<ol>
<li><p><code>M+x package-install &lt;RET&gt; smex &lt;RET&gt;</code> 直接安装，或者 <code>M+x list-packages</code> =&gt; <code>C+s smex</code>寻找，找到后键入 <code>I</code> 标识即将安装 键入<code>x</code> 执行安装</p>
</li>
<li><p>smex可以改变<code>M+x</code>快捷键，需要添加配置</p>
</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(require &#x27;smex)   ; Not needed if you use package.el</span><br><span class="line">(smex-initialize) ; Can be omitted. This might cause a (minimal) delay</span><br><span class="line">                  ; when Smex is auto-initialized on its first run.</span><br><span class="line">; bind keys</span><br><span class="line">(global-set-key (kbd &quot;M-x&quot;) &#x27;smex)</span><br><span class="line">(global-set-key (kbd &quot;M-X&quot;) &#x27;smex-major-mode-commands)</span><br><span class="line">;; This is your old M-x.</span><br><span class="line">(global-set-key (kbd &quot;C-c C-c M-x&quot;) &#x27;execute-extended-command)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>使用时<code>M+x</code>呼出的是smex，此模式下输入命令后会在ido交互内出现<code>&#123;...|..&#125;</code>命令提示，默认是7个推荐，按照使用频率排序，在输入提示模式下<code>C+s</code>/<code>C+r</code>切换命令，<code>SPACE</code>展示所有相关命令并切换</p>
<p> 如果想使用原来的<code>M+x</code> 键入<code>C-c C-c M-x</code>即可</p>
</li>
</ol>
<h4 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h4><p>只用helm-buffers-list代替<code>C-x b</code>，其他和smex有点覆盖，smex够用了暂时不折腾</p>
]]></content>
  </entry>
  <entry>
    <title>ErrorLog npm err</title>
    <url>/2019/05/02/ErrorLog-npm-err/</url>
    <content><![CDATA[<h3 id="errlog-npm-err"><a href="#errlog-npm-err" class="headerlink" title="errlog npm err"></a>errlog npm err</h3><h5 id="使用npm安装vue-cli时遇到的错误-在此记录"><a href="#使用npm安装vue-cli时遇到的错误-在此记录" class="headerlink" title="使用npm安装vue-cli时遇到的错误 在此记录"></a>使用npm安装vue-cli时遇到的错误 在此记录</h5><p>npm install -g npm@latest</p>
<p>似乎时更新的问题， 下次遇到再看吧</p>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Log</tag>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title>ErrorLogJDBC</title>
    <url>/2019/03/15/ErrorLogJDBC/</url>
    <content><![CDATA[<h1 id="Loading-class-com-mysql-jdbc-Driver’"><a href="#Loading-class-com-mysql-jdbc-Driver’" class="headerlink" title="Loading class `com.mysql.jdbc.Driver’."></a>Loading class `com.mysql.jdbc.Driver’.</h1><span id="more"></span>

<p>用了最新的mysql 连接驱动导致报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driverClass   = com.mysql.dbc.Driver</span><br><span class="line">jdbc.url      = jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = root123</span><br></pre></td></tr></table></figure>



<p>现在按照最新官方提示支持将com.mysql.jdbc.Driver  改为  com.mysql.cj.jdbc.Driver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driverClass   = com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url      = jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = root123</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>Eureka</title>
    <url>/2019/03/29/Eureka/</url>
    <content><![CDATA[<h3 id="SpringCloud–Eureka"><a href="#SpringCloud–Eureka" class="headerlink" title="SpringCloud–Eureka"></a>SpringCloud–Eureka</h3><ol>
<li>什么是eureka：服务注册和发现组件</li>
</ol>
<span id="more"></span>

<h4 id="配置Eureka-server"><a href="#配置Eureka-server" class="headerlink" title="配置Eureka-server"></a>配置Eureka-server</h4><ol>
<li>创建maven主工程且pom.xml如下</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建eureka-server，使用spring-initlizaor maven版本<br> pom如下</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>eureka-server的application.yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在Application文件里，在类上添加@EnableEurekaServer</li>
</ol>
<h4 id="配置Eureka-client"><a href="#配置Eureka-client" class="headerlink" title="配置Eureka-client"></a>配置Eureka-client</h4><ol>
<li><p>同上创建client工程，pom里面父亲为主工程，添加自己的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置client的application.yml</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-client</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在Application类中开启@EnableEurekaClient</li>
</ol>
<h4 id="Eureka-名词"><a href="#Eureka-名词" class="headerlink" title="Eureka 名词"></a>Eureka 名词</h4><ol>
<li><p>Register服务注册，EurekaClient想EUrekaServer注册时，会提供自己的元数据信息和圆口，ip等信息。</p>
</li>
<li><p>Renew 服务续约：eurekaclient每隔30s就发送一次心跳来进行续约，如果server90秒内没有收到心跳则会将这个client实例从注册列表中删除</p>
</li>
<li><p>FetchRegistries获取服务注册列表信息：client从server获取其他服务信息，从而远程调用，client和server可以使用json和xml数据格式进行通信</p>
</li>
<li><p>cancel服务下线：client在程序关闭时可以向eurekaserver发送下线请求，那么该客户端的示例信息从server服务注册列表中删除。需要调用代码</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DiscoverManager.getInstance().shutdownComponent();</span><br></pre></td></tr></table></figure></li>
<li><p>Eviction服务剔除：90秒没有发送到server心跳就被剔除</p>
</li>
</ol>
<h4 id="Eureka-概念"><a href="#Eureka-概念" class="headerlink" title="Eureka 概念"></a>Eureka 概念</h4><ol>
<li>EurekaClient实际上分为：ApplicationService，ApplicationClient</li>
<li>server通过在配置文件指向其他节点的defaultZone可以将对方视为伙伴节点，之后会同步节点之间的注册过了的服务</li>
</ol>
<h4 id="Eureka-继承在一个maven工程"><a href="#Eureka-继承在一个maven工程" class="headerlink" title="Eureka 继承在一个maven工程"></a>Eureka 继承在一个maven工程</h4><ol>
<li>client和server的配置大致相似，也和上面的差不多，下面是client的pom</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>给出主模块的pom</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h4><ol>
<li><p>我在示例中写了两个模块，每个模块生成了一个jar包，在server的模块的jar包目录处使用：</p>
<p> java -jar eureka-server-0.0.1-SNAPSHOT.jar –spring.profiles.active=peer2</p>
<p> java -jar eureka-server-0.0.1-SNAPSHOT.jar –spring.profiles.active=peer2</p>
<p> 这样通过使用这个命令，选择了对应的profile，启动了两个端口不同互相为同伴节点的server</p>
</li>
<li><p>这时候启动client，client向server：peer1注册，但是peer2很快也会同步</p>
</li>
<li><p>localhost:8761 查看结果</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign</title>
    <url>/2019/04/08/Feign/</url>
    <content><![CDATA[<h3 id="声明式调用Feign"><a href="#声明式调用Feign" class="headerlink" title="声明式调用Feign"></a>声明式调用Feign</h3><p>使用feign远程调度其他服务</p>
<span id="more"></span>


<h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-fegion-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-fegion-client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8765</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="EurekaFegionClientApplication-java"><a href="#EurekaFegionClientApplication-java" class="headerlink" title="EurekaFegionClientApplication.java"></a>EurekaFegionClientApplication.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tassa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaFegionClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaFegionClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="开启feign-下面使用"><a href="#开启feign-下面使用" class="headerlink" title="开启feign 下面使用"></a>开启feign 下面使用</h3><ol>
<li>FeignConfig.java</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Retryer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retryer <span class="title">feignRetryer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retryer.Default(<span class="number">100</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>EurekaClientFeign.java</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value:要消费的服务名  自动负载均衡</span></span><br><span class="line"><span class="comment"> *configuration:配置bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;eureka-client&quot;,configuration = FeignConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EurekaClientFeign</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * value这里的GetMapping指的是被调用放的url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">sayHiFromEurekaClientFeign</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span>String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>hi.java</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.converters.Auto;</span><br><span class="line"><span class="keyword">import</span> com.tr.service.HiService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HiService hiService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;,required = false)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hiService.sayHi(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>Floyd最短路径算法</title>
    <url>/2021/10/29/Floyd%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="FLOYD-最短路径算法"><a href="#FLOYD-最短路径算法" class="headerlink" title="FLOYD 最短路径算法"></a>FLOYD 最短路径算法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>佛洛依德最短路径实际上是使用了两个邻接矩阵遍历完成的 O(n^3)，一个邻接矩阵A用来保存点到点的路径权重，另一个B用来保存路径。</p>
<p>A的初始已经写好了点到点的直接距离，对于没有直连的点，内容都算作无穷。然后依次取中间点后再依次遍历通过这个中间点的距离，如果小于原来的A矩阵的内的距离，那么就覆写且将路径写入B矩阵。</p>
<h2 id="图解例子"><a href="#图解例子" class="headerlink" title="图解例子"></a>图解例子</h2><p><img src="/images/pasted-86.png" alt="upload successful"></p>
<p>根据这个图做两个矩阵A（存储点到点的距离），B（存储经过点）</p>
<p><img src="/images/pasted-87.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上图为例，录入后的矩阵A，A[0][1]表示0节点到1节点的距离为5，A[1][0]就表示节点1到节点0的距离，无穷表示无法连接。</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-88.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径Path，对于B[0][1]表示 0节点到1节点需要经过什么节点</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">现在开始从头遍历，先找出节点对（就是图中什么节点可以到什么节点）有：</span><br><span class="line"></span><br><span class="line">&lt;0,1&gt; &lt;0,2&gt; &lt;0,3&gt;</span><br><span class="line">&lt;1,0&gt; &lt;1,2&gt; &lt;1,3&gt;</span><br><span class="line">&lt;2,0&gt; &lt;2,1&gt; &lt;2,3&gt;</span><br><span class="line">&lt;3,0&gt; &lt;3,1&gt; &lt;3,2&gt;</span><br><span class="line"></span><br><span class="line">现在取中间节点0（挨个取0，1，2，3）:对于0节点来说0节点到某节点距离，使用0作为中间节点是无意义的，所以包含0节点的节点对都不看，从&lt;1,2&gt;开始，即1使用0节点作为中间节点到2 = 1到0的节点距离+ 0到2的节点距离，也就是 A[1,2] = A[1,0] + A[0,2]。如果这个距离是小于原来距离的那么就更新，这里4&gt;无穷所以不更新。</span><br><span class="line"></span><br><span class="line">每次算可能有点绕，这里有个技巧：假设还是算 A[1,2]以 X 作为中间节点，可以先找到 A[1,2]在图中的点，分别朝着两个 X 方向走（X 行和 X 列），看他们的和是否小于自己，小于就更新自己，且在B矩阵内更新B[1,2] = X。这里X可以是0，1，2，3节点。</span><br></pre></td></tr></table></figure>
<p>如此遍历更新两个矩阵得到最后结果：</p>
<p><img src="/images/pasted-89.png" alt="upload successful"></p>
<h2 id="查找代码实现"><a href="#查找代码实现" class="headerlink" title="查找代码实现"></a>查找代码实现</h2><p>现在我们得到了最后的更新结果，使用的话以<code>A[1][0]</code>为例，即1节点到0节点从A矩阵可以看到1节点到0节点距离6，根据Path矩阵，看到<code>Path[1][0] = 3</code>表示 1到0节点要经过3，再看1到3和3到0，<code>Path[1][3] = -1</code>表示1到3直连，查<code>Path[3][0] = 2</code> 表示3到0经过节点2，查看3-2和2-0结果是-1，所以最后路径是<code>1-3-2-0</code>，不难发现这个过程是递归的，代码实现较为简单如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印节点x到节点y 经过的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrixPath 邻接矩阵的路径矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> matrixPath[][])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrixPath[x][y] == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// -1表示直连 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;直连&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 要经过一个节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经过节点:&quot;</span> + matrixPath[x][y]);</span><br><span class="line">        <span class="comment">// 递归查找x与y到中间节点的中间节点</span></span><br><span class="line">        printPath(x, matrixPath[x][y], matrixPath);</span><br><span class="line">        printPath(matrixPath[x][y], y, matrixPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最短路径实现"><a href="#最短路径实现" class="headerlink" title="最短路径实现"></a>最短路径实现</h2><p>再看一下最短路径的过程会发现本质就是遍历更新两个表，从选取中间节点开始遍历，找到中间节点后遍历所有节点，对比节点的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成最短路径矩阵</span></span><br><span class="line"><span class="comment"> * 传入的矩阵都是方阵 即长宽一样的多维数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix     图的邻接矩阵表示，传入时已经写好了点到点的直接距离</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrixPath 图的路径矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floydGenerate</span><span class="params">(<span class="keyword">int</span> matrix[][], <span class="keyword">int</span> matrixPath[][])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化路径矩阵 -1表示直连 一开始所有点都算做直连，matrix保存了直连的距离，如果两个节点不能直连，那么算作距离无限大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixPath.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrixPath.length; j++) &#123;</span><br><span class="line">            matrixPath[i][j] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选取中间经过节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> passingByNode = <span class="number">0</span>; passingByNode &lt; matrix.length; passingByNode++)</span><br><span class="line">        <span class="comment">// 选取节点对(开始节点和结束节点) 0-1 0-2 0-3 ...这样的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> startNode = <span class="number">0</span>; startNode &lt; matrix.length; startNode++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> endNode = <span class="number">0</span>; endNode &lt; matrix.length; endNode++)</span><br><span class="line">                <span class="comment">// 计算开始节点到经过节点的值和经过节点到结束节点的值</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[startNode][passingByNode] + matrix[passingByNode][endNode] &lt; matrix[startNode][endNode]) &#123;</span><br><span class="line">                    matrix[startNode][endNode] = matrix[startNode][passingByNode] + matrix[passingByNode][endNode];</span><br><span class="line">                    matrixPath[startNode][endNode] = passingByNode;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Getting Start With Spark</title>
    <url>/2020/10/26/Getting-Start-With-Spark/</url>
    <content><![CDATA[<h3 id="Getting-Start-With-Spark"><a href="#Getting-Start-With-Spark" class="headerlink" title="Getting Start With Spark"></a>Getting Start With Spark</h3><p>Notes of <I><code>Manning spark in action second editon</code></I></p>
<span id="more"></span>

<h4 id="basic-concept"><a href="#basic-concept" class="headerlink" title="basic concept"></a>basic concept</h4><h5 id="1-1-what-is-spark"><a href="#1-1-what-is-spark" class="headerlink" title="1.1 what is spark"></a>1.1 what is spark</h5><p><img src="file:///home/tr/Pictures/Screenshot%20from%202020-10-26%2010-52-51.png" alt="spark work level"></p>
<h5 id="1-2-what-is-big-data"><a href="#1-2-what-is-big-data" class="headerlink" title="1.2 what is big data"></a>1.2 what is big data</h5><p> big data is the collection of datasets, available everywhere in the enterprise, aggregated in a single location, on which you can run basic analytics to more<br>advanced analytics, like machine and deep learning. Those bigger datasets can<br>become the basis for artificial intelligence (AI). Technologies, size, or number of computers are irrelevant to this concept. </p>
<h5 id="1-3-dataframe"><a href="#1-3-dataframe" class="headerlink" title="1.3 dataframe"></a>1.3 dataframe</h5><h6 id="1-3-1-Java-perspective"><a href="#1-3-1-Java-perspective" class="headerlink" title="1.3.1  Java perspective"></a>1.3.1  Java perspective</h6><p>just like a result set which contains data and api;</p>
<p>In Java, a dataframe is implemented as a Dataset<Row> (pronounced “a dataset of rows”).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> differences:</span><br><span class="line"> You do not browse through it with a next() method.</span><br><span class="line"> Its API is extensible through user-defined functions (UDFs). You can write or</span><br><span class="line">wrap existing code and add it to Spark. This code will then be accessible in a</span><br><span class="line">distributed mode. You will study UDFs in chapter 16.</span><br><span class="line"> If you want to access the data, you first get the Row and then go through the columns of the row with getters (similar to a ResultSet).</span><br><span class="line"> Metadata is fairly basic, as there are no primary or foreign keys or indexes in Spark.</span><br></pre></td></tr></table></figure>

<h6 id="1-3-2-RDBMS-perspective"><a href="#1-3-2-RDBMS-perspective" class="headerlink" title="1.3.2 RDBMS perspective"></a>1.3.2 RDBMS perspective</h6><p>just like a table which has columns and rows;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> differences:</span><br><span class="line"> Data can be nested, as in a JSON or XML document. Chapter 7 describes ingestion of those documents, and you will use those nested constructs in chapter 13.</span><br><span class="line"> You don’t update or delete entire rows; you create new dataframes.</span><br><span class="line"> You can easily add or remove columns.</span><br><span class="line"> There are no constraints, indices, primary or foreign keys, or triggers on the</span><br><span class="line">dataframe.</span><br></pre></td></tr></table></figure>


<h5 id="1-4-summary"><a href="#1-4-summary" class="headerlink" title="1.4 summary"></a>1.4 summary</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Spark is an analytics operating system; you can use it to process workloads and</span><br><span class="line">algorithms in a distributed way. And it’s not only good for analytics: you can use</span><br><span class="line">Spark for data transfer, massive data transformation, log analysis, and more.</span><br><span class="line"> Spark supports SQL, Java, Scala, R, and Python as a programming interface, but</span><br><span class="line">in this book, we focus on Java (and sometimes Python).</span><br><span class="line"> Spark’s internal main data storage is the dataframe. The dataframe combines</span><br><span class="line">storage capacity with an API.</span><br><span class="line"> If you have experience with JDBC development, you will find similarities with a</span><br><span class="line">JDBC ResultSet.</span><br><span class="line"> If you have experience with relational database development, you can compare</span><br><span class="line">a dataframe to a table with less metadata.</span><br><span class="line"> In Java, a dataframe is implemented as a Dataset&lt;Row&gt;.</span><br><span class="line"> You can quickly set up Spark with Maven and Eclipse. Spark does not need to be</span><br><span class="line">installed.</span><br><span class="line"> Spark is not limited to the MapReduce algorithm: its API allows a lot of algorithms to be applied to data.</span><br><span class="line"> Streaming is used more and more frequently in enterprises, as businesses want</span><br><span class="line">access to real-time analytics. Spark supports streaming.</span><br><span class="line"> Analytics have evolved from simple joins and aggregations. Enterprises want</span><br><span class="line">computers to think for us; hence Spark supports machine learning and deep</span><br><span class="line">learning.</span><br><span class="line"> Graphs are a special use case of analytics, but nevertheless, Spark supports</span><br><span class="line">them</span><br></pre></td></tr></table></figure>

<h5 id="2-1-mental-model"><a href="#2-1-mental-model" class="headerlink" title="2.1 mental model"></a>2.1 mental model</h5><p>A simple process in three steps: reading the CSV file, performing a simple<br>concatenation operation, and saving the resulting data in the database</p>
]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Git ssh</title>
    <url>/2020/01/31/Git-ssh/</url>
    <content><![CDATA[<h3 id="git-ssh"><a href="#git-ssh" class="headerlink" title="git ssh"></a>git ssh</h3><p> 迁移东西到新电脑了，好多指令和工具忘记了，记录……</p>
 <span id="more"></span>
<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><ol>
<li>下载 git for windows</li>
<li>默认的vim即可，不过也支持vsc，也不错</li>
<li>生成sshkey，ssh-keygen -t rsa -C “email”</li>
<li>默认c/../usr/.ssh/…pub 导入github控制</li>
</ol>
<p><img src="/images/pasted-12.png" alt="upload successful"></p>
<ol start="5">
<li><p>测试：ssh -T <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;</a></p>
</li>
<li><p>配置全局：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Firstname Lastname&quot; </span><br><span class="line">git config --global user.email &quot;your_email@youremail.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate配置</title>
    <url>/2019/03/07/Hibernate%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="使用maven-intellij配置基础环境"><a href="#使用maven-intellij配置基础环境" class="headerlink" title="使用maven+intellij配置基础环境"></a>使用maven+intellij配置基础环境</h3><hr>
<ol>
<li><p>修改intellij的自带maven源，改为国内镜像</p>
<p>地址为：IntelliJ IDEA 2018.3.4\plugins\maven\lib\maven3\conf</p>
</li>
<li><p>添加mirror节点 </p>
</li>
</ol>
<span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建maven工程选择创建模板web, 添加pom节点</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在main/resources下创建hibernate.cfg.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Configuration DTD//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;current_session_context_class&quot;</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://39.108.159.175/MyTest?characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>0800<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可以将向数据库发送的SQL语句显示出来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化SQL语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate的方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate的映射文件所在的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;Customer.hbm.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>匹配自己的表对象  main/resources/Customer.hbm.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Mapping DTD//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.tr.dao.Customer&quot;</span> <span class="attr">table</span>=<span class="string">&quot;cst_customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;cust_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_id&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--generator 主键生成策略--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_source&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_source&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_industry&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_industry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_level&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_level&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_linkman&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_linkman&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cust_mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_mobile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>xml</p>
]]></content>
      <categories>
        <category>Hibernate</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>InstantClient+PLSQL安装配置</title>
    <url>/2020/04/07/InstantClient-PLSQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="oracle的连接客户端安装配置"><a href="#oracle的连接客户端安装配置" class="headerlink" title="oracle的连接客户端安装配置"></a>oracle的连接客户端安装配置</h3><span id="more"></span>

<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>到官网或者找资源下载instantClient+PLSQL,注意版本</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li><p>instantclient下载后解压，在instantclient_12_2文件下创建NETWORK文件夹,在NETWORK下创建ADMIN文件夹</p>
</li>
<li><p>修改环境变量</p>
<p>  添加三个变量</p>
</li>
</ol>
<ul>
<li><p>ORACLE_HOME  D:\instantclient_11_2</p>
</li>
<li><p>TNS_ADMIN  变量值：D:\instantclient_12_2\NETWORK\ADMIN</p>
</li>
<li><p>变量名:  NLS_LANG   变量值:SIMPLIFIED CHINESE_CHINA.ZHS16GBK</p>
</li>
<li><p>修改Path变量，添加 %ORACLE_HOME%</p>
</li>
</ul>
<ol start="3">
<li><p>安装plsql</p>
<p> 下一步即可，安装完毕后在 工具–》首选项 或者 Configure–》Preferences中配置以下</p>
</li>
</ol>
<p><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>   最后重启连接即可
    </p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellij idea实用配置和快捷键</title>
    <url>/2020/05/12/Intellij-idea%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>IDE Features Trainer</code> ：官方推出的学习插件</p>
<p>配置文件地址，在idea目录下</p>
<ul>
<li>32位系统对应：idea.exe.vmoptions</li>
<li>64位系统对应：idea64.exe.vmoptions</li>
</ul>
<span id="more"></span>

<h4 id="JVM配置"><a href="#JVM配置" class="headerlink" title="JVM配置"></a>JVM配置</h4><p>推荐使用 IDEA 自带菜单中的 Help -&gt; Edit Custom VM Options 进行JVM个性化配置，直接修改会在下次更新丢失</p>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用参数推荐</span><br><span class="line"></span><br><span class="line">+ -Xms128m，16 G 内存的机器可尝试设置为 -Xms512m</span><br><span class="line">+ -Xmx750m，16 G 内存的机器可尝试设置为 -Xmx1500m</span><br><span class="line">+ -XX:MaxPermSize=350m，16G 内存的机器可尝试设置为 -XX:MaxPermSize=500m（P.S：2017 后的版本该参数被剔除）</span><br><span class="line">+ -XX:ReservedCodeCacheSize=225m，16G 内存的机器可尝试设置为 -XX:ReservedCodeCacheSize=500m</span><br></pre></td></tr></table></figure>

<h4 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h4><p><code>Help -&gt; Edit Custom Properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config，该属性主要用于指向 IntelliJ IDEA 的个性化配置目录，默认是被注释，打开注释之后才算启用该属性，这里需要特别注意的是斜杠方向，这里用的是正斜杠。</span><br><span class="line">idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system，该属性主要用于指向 IntelliJ IDEA 的系统文件目录，默认是被注释，打开注释之后才算启用该属性，这里需要特别注意的是斜杠方向，这里用的是正斜杠。如果你的项目很多，则该目录会很大，如果你的 C 盘空间不够的时候，还是建议把该目录转移到其他盘符下。</span><br><span class="line">idea.max.intellisense.filesize=2500，该属性主要用于提高在编辑大文件时候的代码帮助。IntelliJ IDEA 在编辑大文件的时候还是很容易卡顿的。</span><br><span class="line">idea.cycle.buffer.size=1024，该属性主要用于控制控制台输出缓存。有遇到一些项目开启很多输出，控制台很快就被刷满了没办法再自动输出后面内容，这种项目建议增大该值或是直接禁用掉，禁用语句 idea.cycle.buffer.size=disabled。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="常用必会快捷键"><a href="#常用必会快捷键" class="headerlink" title="常用必会快捷键"></a>常用必会快捷键</h4><h5 id="ctrl"><a href="#ctrl" class="headerlink" title="ctrl"></a>ctrl</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + W	递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 </span><br><span class="line">Ctrl + E	显示最近打开的文件记录列表 </span><br><span class="line">Ctrl + N	根据输入的 类名 查找类文件 </span><br><span class="line">Ctrl + G	在当前文件跳转到指定行处</span><br><span class="line">Ctrl + J	插入自定义动态代码模板 </span><br><span class="line">Ctrl + P	方法参数提示显示 </span><br><span class="line">Ctrl + U	前往当前光标所在的方法的父类的方法 / 接口定义 </span><br><span class="line">Ctrl + B	进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 </span><br><span class="line">Ctrl + K	版本控制提交项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + T	版本控制更新项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + F1	在光标所在的错误代码处显示错误信息 </span><br><span class="line">Ctrl + F3	调转到所选中的词的下一个引用位置 </span><br><span class="line">Ctrl + Tab	编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口,加shift是逆着选</span><br></pre></td></tr></table></figure>

<h5 id="alt"><a href="#alt" class="headerlink" title="alt"></a>alt</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alt + `  git操作必备</span><br><span class="line">Alt + F1	弹出所有工具栏，可以快速选择db等栏目  超好用！</span><br><span class="line">Alt + 1,2,3...9	显示对应数值的选项卡</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + Alt + L	格式化代码，可以对当前文件和整个包目录使用 </span><br><span class="line">Ctrl + Alt + O	优化导入的类，可以对当前文件和整个包目录使用 </span><br><span class="line">Ctrl + Alt + T	对选中的代码弹出环绕选项弹出层，可以很方便快捷的添加trycatch</span><br><span class="line">Ctrl + Alt + 左方向键	退回到上一个操作的地方 </span><br><span class="line">Ctrl + Alt + 右方向键	前进到上一个操作的地方 </span><br><span class="line">Ctrl + Alt + Enter 光标所在行上空出一行</span><br><span class="line">Shift + Enter 光标下空出一行</span><br><span class="line">Ctrl + Alt + S 打开系统设置</span><br><span class="line"></span><br><span class="line">Ctrl + Shift + N	通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 </span><br><span class="line">Ctrl + Shift + U	对选中的代码进行大 / 小写轮流转换 </span><br><span class="line">Ctrl + Shift + T	对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）</span><br><span class="line">Ctrl + Shift + C	复制当前文件磁盘路径到剪贴板 </span><br><span class="line">Ctrl + Shift + B	跳转到类型声明处</span><br><span class="line">Ctrl + Shift + / 代码块注释</span><br><span class="line">Ctrl + Shift + F7	高亮显示所有该选中文本，按Esc高亮消失 </span><br><span class="line">Ctrl + Shift + F12	编辑器最大化</span><br><span class="line">Ctrl + Shift + Enter	自动结束代码，行末自动添加分号</span><br><span class="line">Ctrl + Shift + Backspace	退回到上次修改的地方 </span><br><span class="line">Ctrl + Shift + 1,2,3...9	快速添加指定数值的书签</span><br></pre></td></tr></table></figure>

<h4 id="第三方VIM快捷键"><a href="#第三方VIM快捷键" class="headerlink" title="第三方VIM快捷键"></a>第三方VIM快捷键</h4><p> 常用的jkhl移动和p，y赋值粘贴即可，其他快捷键和idea冲突，建议在右下角设置全部还原为idea</p>
<p><img src="/images/pasted-25.png" alt="upload successful"></p>
<p><img src="/images/pasted-26.png" alt="upload successful"></p>
<h4 id="debug快捷键"><a href="#debug快捷键" class="headerlink" title="debug快捷键"></a>debug快捷键</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F7	F7	进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中 </span><br><span class="line">F8	F8	进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 </span><br><span class="line">F9	Command + Option + R	恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上 </span><br><span class="line">Alt + F8	Option + F8	选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果 </span><br><span class="line">Shift + F7 自动步入  特别好用</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 工程师之路 三</title>
    <url>/2021/03/02/Java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B9%8B%E8%B7%AF-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><span id="more"></span>

<h3 id="bit-byte-char"><a href="#bit-byte-char" class="headerlink" title="bit byte char"></a>bit byte char</h3><p>1 char = 2 byte = 16 bit</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>操作byte类型的主要操作类时OutputStream,InputStream的子类；不用缓冲区直接操作文件本身。</p>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>操作字符类型数据，主要操作类：Reader,Writer的子类，使用缓冲区，不关闭流就不输出实际内容。</p>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>OutputStreamWriter：Writer的子类，将字符流变为字节流</p>
<p>InputStreamReader：Reader的子类，将输入的字节流变为字符流</p>
<h3 id="Linux下的5种IO模型"><a href="#Linux下的5种IO模型" class="headerlink" title="Linux下的5种IO模型"></a>Linux下的5种IO模型</h3><h4 id="阻塞式IO模型"><a href="#阻塞式IO模型" class="headerlink" title="阻塞式IO模型"></a>阻塞式IO模型</h4><p>用户线程发出IO请求，内核查看数据是否准备就绪，没有就等待数据，用户线程处于阻塞态，交出CPU，数据就绪后，内核将数据拷贝到用户线程，并将结果返回到用户线程，这时用户线程变为就绪态等待分配cpu时间片。</p>
<h4 id="非阻塞IO模型"><a href="#非阻塞IO模型" class="headerlink" title="非阻塞IO模型"></a>非阻塞IO模型</h4><p>非阻塞线程的用户线程会在发出IO请求后即使没有数据也不会让出cpu除非时间片到了，相当于在cpu时间内不断轮询数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    data = socket.read();</span><br><span class="line">    <span class="keyword">if</span>(data!= error)&#123;</span><br><span class="line">        处理数据</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然这会导致cpu占用率高的问题。</p>
<h4 id="IO复用模型"><a href="#IO复用模型" class="headerlink" title="IO复用模型"></a>IO复用模型</h4><p>多路复用IO模型是目前用的最多的，也是Java NIO的方式。</p>
<p>这个模型中，有一个线程不断轮询多个socket状态，只有当socket有真正的读写事件时，才调用实际的IO读写操作，Java NIO中，通过selector.select()去查询每个通道是否有到达事件如果没有线程阻塞。一个线程可以管理多个socket，因此多路复用适合连接数比较多的情况，而且线程轮询每个socket状态实在内核态完成的，效率高。</p>
<h4 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h4><p>用户线程发起IO请求，给对应socket发送信号函数，然后用户线程继续执行，知道内核准备的数据好了发送信号返回用户线程，用户线程接受信号调用IO读写。</p>
<h4 id="异步IO模型"><a href="#异步IO模型" class="headerlink" title="异步IO模型"></a>异步IO模型</h4><p>用户线程发起read操作后就可以处理其他事情，内核等待数据准备完成，然后将数据拷贝到用户线程，完成后发送信号给用户线程通知read完成，也就是说用户线程只做了请求发送的动作就可以去使用数据了。</p>
<p>和信号驱动模型对比就是不需要用户线程去调用IO函数进行实际读写。</p>
<h3 id="BIO-NIO-AIO"><a href="#BIO-NIO-AIO" class="headerlink" title="BIO NIO AIO"></a>BIO NIO AIO</h3><p>Java中通过流的方式完成IO操作，所有的IO都被是为单个字节的移动，通过Stream对象一次移动一个字节，流可以和外部世界互动，也可以将对象转为字节，或者再转回来。</p>
<p>BIO： Java的Block IO 同步阻塞式IO，java.io包下实现。</p>
<p>NIO：NIO与普通的IO方式最大的区别时数据打包和传输方式，原来的IO以流的方式处理，NIO以块的方式处理。IO流一次一个字节处理，一个输入流产生一个字节的数据，一个输出流消费一个字节的数据，所以面向流的IO方式比较慢。</p>
<p>一个面向块的IO以块形式处理数据，每一个操作都在一次中产生或者消费一个数据库，速度要快得多。</p>
<p>并且NIO的方式时支持同步阻塞和同步非阻塞模式，比如来了100个网络连接调用accept等待响应，NIO会开一个线程会管理这个链接的读写请求，让主线程继续往下响应其他链接，就这样NIO通过一个管理线程轮询所有的链接（socket）的IO状态，某个socket数据准备好了那么会通知这个线程去处理数据。</p>
<p>AIO：异步非阻塞IO模型，真正的异步</p>
<h3 id="netty"><a href="#netty" class="headerlink" title="netty"></a>netty</h3><p>Netty是一个非阻塞I/O客户端-服务器框架，主要用于开发Java网络应用程序，如协议服务器和客户端。异步事件驱动的网络应用程序框架和工具用于简化网络编程，例如TCP和UDP套接字服务器。Netty包括了反应器编程模式的实现。Netty最初由JBoss开发，现在由Netty项目社区开发和维护。</p>
<p>除了作为异步网络应用程序框架，Netty还包括了对HTTP、HTTP2、DNS及其他协议的支持，涵盖了在Servlet容器内运行的能力、对WebSockets的支持、与Google Protocol Buffers的集成、对SSL/TLS的支持以及对用于SPDY协议和消息压缩的支持。自2004年以来，Netty一直在被积极开发</p>
<p>从版本4.0.0开始，Netty在支持NIO和阻塞Java套接字的同时，还支持使用NIO.2作为后端。</p>
<p>本质：JBoss做的一个Jar包</p>
<p>目的：快速开发高性能、高可靠性的网络服务器和客户端程序</p>
<p>优点：提供异步的、事件驱动的网络应用程序框架和工具</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射：程序在运行时能够获取自身的信息，在Java中，只要给定类的名字，就能通过反射机制获取属性和方法。</p>
<h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><ol>
<li><p>运行时判断任意一个对象所属的类</p>
</li>
<li><p>运行时判断任意一个类所具有的成员变量和方法</p>
</li>
<li><p>运行时任意调用一个对象的方法</p>
</li>
<li><p>运行时构造任意一个类的对象</p>
</li>
</ol>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Java的Class类时Java反射机制的基础，通过Class可以获得一个类的相关信息</p>
<p>每个类都会有一个Class对象，运行程序时，JVM首先检查是否所有要加载的类对应的Class对象都已经被加载，如果没有，会根据类名查找.class文件，并将其Class对象载入。</p>
<h3 id="反射-工厂实现IOC"><a href="#反射-工厂实现IOC" class="headerlink" title="反射+工厂实现IOC"></a>反射+工厂实现IOC</h3><p>首先不带反射的普通工厂模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂类 以后有其他新的水果类要修改工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fruit <span class="title">getInstance</span><span class="params">(String fruitName)</span></span>&#123;</span><br><span class="line">    	fruit f = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Apple&quot;</span>.equals(fruitName))&#123;</span><br><span class="line">        	t = <span class="keyword">new</span> Apple();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Orange&quot;</span>.equals(fruitName))&#123;</span><br><span class="line">        	t = <span class="keyword">new</span> Orange();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">    	fruit f = Factory.getInstance(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        f.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反射机制实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂类 以后有其他新的水果类要修改工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fruit <span class="title">getInstance</span><span class="params">(String className)</span></span>&#123;</span><br><span class="line">    	fruit f = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        	f = (fruit)Class.forName(className).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        fruit f=Factory.getInstance(<span class="string">&quot;Reflect.Apple&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(f!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            f.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">apple</span>=<span class="string">Reflect.Apple</span></span><br><span class="line"><span class="attr">orange</span>=<span class="string">Reflect.Orange</span></span><br></pre></td></tr></table></figure>
<p>编写操作属性文件类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">init</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getPro</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException</span>&#123;</span><br><span class="line">        Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">&quot;fruit.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(f.exists())&#123;</span><br><span class="line">            pro.load(<span class="keyword">new</span> FileInputStream(f));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pro.setProperty(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;Reflect.Apple&quot;</span>);</span><br><span class="line">            pro.setProperty(<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;Reflect.Orange&quot;</span>);</span><br><span class="line">            pro.store(<span class="keyword">new</span> FileOutputStream(f), <span class="string">&quot;FRUIT CLASS&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> <span class="keyword">throws</span> FileNotFoundException, IOException</span>&#123;</span><br><span class="line">        Properties pro=init.getPro();</span><br><span class="line">        fruit f=Factory.getInstance(pro.getProperty(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(f!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            f.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行以上代码可以看出反射动态生成对象的好处。</p>
<h3 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h3><p>IOC最基本的就是反射，使用这个方式，用户只要在spring中配置要生成的对象文件。提高灵活性和可维护性。只有用反射才能做出框架。</p>
<p>IOC容器的工作模式可以看作是工厂模式的升华，工厂要生成的对象都在配置文件中给出定义，然后利用反射机制生成对象。</p>
<h2 id="设计模式-代理模式"><a href="#设计模式-代理模式" class="headerlink" title="设计模式 代理模式"></a>设计模式 代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>定义一个简单接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceProxy</span> <span class="keyword">implements</span> <span class="title">HelloService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> HelloService target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServiceProxy</span><span class="params">(HelloService target)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;记录日志&quot;</span>);</span><br><span class="line">        target.say();</span><br><span class="line">        System.out.println(<span class="string">&quot;清理数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        HelloService target = <span class="keyword">new</span> HelloServiceImpl();</span><br><span class="line">        <span class="comment">//代理对象</span></span><br><span class="line">        HelloServiceProxy proxy = <span class="keyword">new</span> HelloServiceProxy(target);</span><br><span class="line">        proxy.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代理模式的所有角色，代理对象，目标对象，目标对象接口都已经在编译器确定了。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>静态代理会要写很多代码，动态代理则可以省去且在运行期动态生成。</p>
<p>有两种实现方式：</p>
<ol>
<li><p>JDK动态代理：在java.lang.reflect包中的proxy类和InvocationHandle接口提供了生成动态代理类的能力，但是代理对象必须实现一个或多个接口。</p>
</li>
<li><p>Cglib动态代理：code generation library，第三方的代码生成类库，许多apo框架都在用比如spring aop，底层是通过使用一个小而快的字节码处理框架ASM来转换字节码生成新的类。且目标类不需要实现接口。</p>
</li>
</ol>
<h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        PerformanceMonior.begin(target.getClass().getName()+<span class="string">&quot;.&quot;</span>+method.getName());</span><br><span class="line">        <span class="comment">//System.out.println(&quot;-----------------begin &quot;+method.getName()+&quot;-----------------&quot;);</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;-----------------end &quot;+method.getName()+&quot;-----------------&quot;);</span></span><br><span class="line">        PerformanceMonior.end();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">  MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(service);</span><br><span class="line">  UserService proxy = (UserService) handler.getProxy();</span><br><span class="line">  proxy.add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Cglib-动态代理"><a href="#Cglib-动态代理" class="headerlink" title="Cglib 动态代理"></a>Cglib 动态代理</h4><p>记得在maven添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;  </span><br><span class="line"> <span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span></span>&#123;  </span><br><span class="line">  <span class="comment">//设置需要创建子类的类  </span></span><br><span class="line">  enhancer.setSuperclass(clazz);  </span><br><span class="line">  enhancer.setCallback(<span class="keyword">this</span>);  </span><br><span class="line">  <span class="comment">//通过字节码技术动态创建子类实例  </span></span><br><span class="line">  <span class="keyword">return</span> enhancer.create();  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">//实现MethodInterceptor接口方法  </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args,  </span></span></span><br><span class="line"><span class="params"><span class="function">   MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">  System.out.println(<span class="string">&quot;前置代理&quot;</span>);  </span><br><span class="line">  <span class="comment">//通过代理类调用父类中的方法  </span></span><br><span class="line">  Object result = proxy.invokeSuper(obj, args);  </span><br><span class="line">  System.out.println(<span class="string">&quot;后置代理&quot;</span>);  </span><br><span class="line">  <span class="keyword">return</span> result;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoCGLib</span> </span>&#123;  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  CglibProxy proxy = <span class="keyword">new</span> CglibProxy();  </span><br><span class="line">  <span class="comment">//通过生成子类的方式创建代理类  </span></span><br><span class="line">  UserServiceImpl proxyImp = (UserServiceImpl)proxy.getProxy(UserServiceImpl.class);  </span><br><span class="line">  proxyImp.add();  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>Spring AOP 中的动态代理有两种方式，JDK动态代理和CGLIB动态代理</p>
<p>JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p>
<p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。</p>
<p>CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 工程师之路 二</title>
    <url>/2020/09/05/Java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B9%8B%E8%B7%AF-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><h3 id="Collection-和-Collections"><a href="#Collection-和-Collections" class="headerlink" title="Collection 和 Collections"></a>Collection 和 Collections</h3><span id="more"></span>

<p>Collection是一个集合接口，提供了对集合对象进行基本操作的通用接口，是list，set等的父接口。</p>
<p>Collections是一个包装类，包含各种有关集合操作的静态多态方法，此类不能实例化，就像一个工具类，服务于Collection框架。</p>
<h3 id="常用集合类"><a href="#常用集合类" class="headerlink" title="常用集合类"></a>常用集合类</h3><p><img src="/images/pasted-36.png" alt="upload successful"></p>
<p><img src="/images/pasted-37.png" alt="upload successful"></p>
<h4 id="Set和List"><a href="#Set和List" class="headerlink" title="Set和List"></a>Set和List</h4><p>Set和List都继承自Collection接口，都用来存储一组相同类型的元素。</p>
<p>list特点：元素有放入顺序，元素可重复。</p>
<p>set特点：元素无序，元素不可重复。</p>
<p>有些场景下set可以用来去重，set在元素插入时要方法来判断是否重复，这个方法决定了set中可以保存哪些元素</p>
<h4 id="ArrayList-amp-LinkedList-amp-Vector"><a href="#ArrayList-amp-LinkedList-amp-Vector" class="headerlink" title="ArrayList &amp; LinkedList &amp; Vector"></a>ArrayList &amp; LinkedList &amp; Vector</h4><p>这三个都是List接口的实现。主要区别在于实现方式不同，对不同操作有不同的效率。</p>
<p>ArrayList本质是个可变数组，LinkedList是一个双链表，添加删除元素性能更好，查询拉跨。</p>
<p>Vector和ArrayList类似，但是属于强同步类，适用于多线程情况，如果代码本身线程安全，ArrayList更高效。</p>
<p>Vector和ArrayList 在添加更多元素时会请求更大空间，Vector每次请求双倍空间，ArrayList每次对size增长50%。</p>
<p>LinkedList还实现了Queue接口，该接口比List接口提供了更多方法，offer(),peek(),poll()等。</p>
<p>开发的时候注意，ArrayList的初始容量很小，如果预估数据较大，最好分配一个较大的初始值。</p>
<p>注意:使用Arrays.asList获得的list不可CRUD，因为这不是真正的List，用ArrayList的构造器可以转为真正的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  List&lt;Integer&gt; fakeList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//        fakeList.add(1);</span></span><br><span class="line">        ArrayList&lt;Integer&gt; trueList = <span class="keyword">new</span> ArrayList&lt;&gt;(fakeList);</span><br><span class="line">        trueList.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="ArrayList-Vector-transient"><a href="#ArrayList-Vector-transient" class="headerlink" title="ArrayList Vector transient"></a>ArrayList Vector transient</h4><p>ArrayList使用了transient进行优化而Vector没有，这是为啥。</p>
<p>查看ArrayList源码会发现elementData被transient修饰了，这是因为elementData可能长度比较长，但是只存放了几个数据，后面的都为null，这种情况下，序列化的时候不需要后面的空数据，于是将elementData使用transient修饰，并且定义了两个方法实现自己可控制的序列化：writeObject和readObject方法。</p>
<p>虽然Vector也实现了WriteObject方法，但是里面可以看到 data = elementData.clone();会拷贝null值。但是Vector时多线程下靠谱的数据结构。</p>
<p>什么是fail-fast：</p>
<p>fail-fast 机制是java集合(Collection)中的一种错误机制。它只能被用来检测错误，因为JDK并不保证fail-fast机制一定会发生。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生fail-fast事件。</p>
<p>ArrayList的fast-fail：内部保存了一个modCount计数用来统计修改次数，还有一个expectedModCount用来保存当前线程修改次数，在遍历list的时候，在next方法里会调用checkForComodification方法查看是否合法，如果modCount！=expectedModCount 说明有其他线程动过数组了 那么就抛出异常。</p>
<h4 id="synchronizedList和Vector"><a href="#synchronizedList和Vector" class="headerlink" title="synchronizedList和Vector"></a>synchronizedList和Vector</h4><p>Vector来自java.util ，synchronizedList来自java.util.collections的一个静态内部类。</p>
<p>多线程的时候可以用Vector也可以用Collections.synchronizedList(List list)来返回一个线程安全的List</p>
<p>SynchronizedList的底层操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">       list.add(index, element);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到对于add方法，实际上只是在外面包了一个同步块。</p>
<ol>
<li>SynchronizedList有很好的拓展和兼容功能，它可以将所有的List子类转化为线程安全的类（ArrayList和LinkedList等）</li>
<li>使用SynchronizedList的时候，遍历时要手动进行同步处理</li>
<li>SynchronizedList可以指定锁定的对象</li>
</ol>
<h4 id="Set如何实现元素不重复"><a href="#Set如何实现元素不重复" class="headerlink" title="Set如何实现元素不重复"></a>Set如何实现元素不重复</h4><p>Set有两个，HashSet和TreeSet</p>
<ol>
<li><p>TreeSet使用二叉树实现，底层是TreeMap的keySet(),TreeMap里面是红黑树，所以数据都是自动排好序的不可以放入null。元素在插入TreeSet的时候调用compareTo() 方法，所以TreeSet中要实现Comparable接口。</p>
</li>
<li><p>HashSet根据哈希表实现，基本操作都是由HashMap实现的，向HashSet添加元素的时候先计算元素的hashCode，然后计算出这个元素的存储位置，为空就添加进去，不为空则调用equals方法，看是否相等，相等就不添加，否则调用冲突算法继续。</p>
</li>
</ol>
<h4 id="HashMap-HashTalbe-ConcurrentHashMap"><a href="#HashMap-HashTalbe-ConcurrentHashMap" class="headerlink" title="HashMap HashTalbe ConcurrentHashMap"></a>HashMap HashTalbe ConcurrentHashMap</h4><p>HashMap和HashTable区别：HashTable的方法是同步的所以HashTable线程安全。HashTable中KV都不可以null，而在HashMap中null可以作为键（只能存在一个）但是值可以有多个为null</p>
<p>HashTable中的hash数组大写初始是 11 增加方式：old*2+1</p>
<p>HashMap默认大小 16 每次扩容为2的指数 16</p>
<p>HashTable直接使用对象的HashCode，HashMap重新计算hash值</p>
<p>HashMap和ConcurrentHashMap：后者线程安全</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>HashMap实际上是将数组和链表组合在一起，每一个数组后面挂着一个链表，哈希碰撞的元素挂在同一个链表。</p>
<p>HashMap的容量：默认情况下大小是16，如果用户手动指定大小则会选择大于这个数的一个2次幂。7-》8。</p>
<p>什么时候扩容：</p>
<blockquote>
<blockquote>
<p>HashMap里面定义了size 表示一个数组的链表存放元素个数，capacity 总容量，loadFactor 装载因子，其实就是百分比（默认0.75)。threshold就是临界值，如果超过 threshold = loadFactor*capacity 那么就扩容。所以对于默认大小16的HashMap &gt;12的时候就扩容了。</p>
</blockquote>
</blockquote>
<p>怎么扩容：</p>
<blockquote>
<blockquote>
<p>每次扩容都要将内部所有元素重新Hash重新分配元素到相应的桶，如果只是简单增加容量的话，get的时候对新的容量取模的数不是原来存的数就会找不到存入的数。</p>
</blockquote>
</blockquote>
<p>先介绍个技巧：如何提高取模效率，用位运算&amp;替换取模%。这要求被取模数为2的幂<br>10 % 8 = 2; 10 &amp; 8 = 2;</p>
<p>那么为什么HashMap的容量一定要是2的幂呢?</p>
<blockquote>
<blockquote>
<p>这是因为一个元素存入HashMap，放入里面哪个桶之前肯定要知道数组下标，这个下表就是hash值对数组容量取模，所以为了取模运算快点，需要被取模数为2的幂。</p>
</blockquote>
</blockquote>
<p>为啥loadFactor不是1而是0.75呢？</p>
<blockquote>
<blockquote>
<p>假设负载因子为 1，默认最大容纳数量16，16满了才要扩容，如果这16个数分别存放在各个数组是最好的，但是显然，数据越多的时候，碰撞的概率越大。如果是0.75的话，13个就要扩容了，那么这12个数据碰撞的概率很显然小于16个数的碰撞概率。所以12的时候扩容是比较好的。0.75这个数字被认为是合理的，因为0.7左右数据的碰撞概率最低。</p>
</blockquote>
</blockquote>
<p>HashMap设置多少初始值合适？</p>
<blockquote>
<blockquote>
<p>如果不设置初始值，且目标数据过大的话，每次扩容都会全部重排内部元素，造成浪费。<br>传递的数据如果不是2的幂则会选择一个大于输入值的2的幂，在设置的时候要考虑到负载因子，举个反例：如果输入7 那么自动计算出大小为8，但是负载因子是0.75 也就是6个以后就会扩容，这显然是不科学的，现在比较推荐的算法是：预计大小/0.75 +1 = 设置大小。如放入7，7/0.75 +1 = 10.3 会被计算为 16</p>
</blockquote>
</blockquote>
<h4 id="如何遍历集合类-Collection"><a href="#如何遍历集合类-Collection" class="headerlink" title="如何遍历集合类 Collection"></a>如何遍历集合类 Collection</h4><ol>
<li>普通for循环</li>
<li>增强for循环</li>
<li>iterator迭代</li>
<li>stream迭代</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) System.out.println(it.next());</span><br><span class="line"><span class="comment">// iterator 还可以对数据进行删除操作</span></span><br><span class="line">Iterator&lt;Integer&gt; iterator = trueList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (iterator.next()==<span class="number">2</span>) iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        trueList.stream().forEach(System.out::println);</span><br><span class="line">       </span><br></pre></td></tr></table></figure>

<ul>
<li>Enumeration：这个比较古老，只能遍历Vector,HashTalbe这些古老集合。不建议使用。</li>
</ul>
<h4 id="为什么不能一边遍历集合一边增删"><a href="#为什么不能一边遍历集合一边增删" class="headerlink" title="为什么不能一边遍历集合一边增删"></a>为什么不能一边遍历集合一边增删</h4><p>首先集合类都有个fast-fail机制，这个前面讲过了，那么在for循环中，如果使用add方法添加元素，会修改modCount 这是实际修改值，一般一个list生成的时候是0，还有个expectedModCount 这是Iterator的成员变量，只有通过迭代器操作这个值才会变化，一般这两个值是相等的。在遍历的时候如果调用了list.remove(xx)而不是iterator.remove()的话，只会修改modCount，下次遍历的时候会调用这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现不一样抛出异常（ConcurrentModificationException）。</p>
<p>fail-safe:Java提供了一些安全的集合类，这样的集合在遍历时不是在集合内容上访问的，而是copy一个在复制体上遍历，java.util.concurrent包下的都是fail-safe的。可以在多线程下使用，也可以foreach中add/remove。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">CopyOnWriteArrayList&lt;String&gt; cowList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        add(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">        add(<span class="string">&quot;tzq&quot;</span>);</span><br><span class="line">        add(<span class="string">&quot;oth&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">cowList.forEach(x -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.equals(<span class="string">&quot;oth&quot;</span>)) cowList.remove(x);</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(cowList);</span><br></pre></td></tr></table></figure>

<h4 id="COW-Copy-On-Write"><a href="#COW-Copy-On-Write" class="headerlink" title="COW Copy-On-Write"></a>COW Copy-On-Write</h4><p>了解COW后会好奇，为啥都已经上锁了还要拷贝，直接操作原链表不好吗。这个Vector没啥区别啊感觉。</p>
<p>但其实不是，COW只有在写的时候会上锁，而且所有操作不是对原链表操作，而是对复制的容器进行操作，到需要写入的时候，上锁，将原链表的指针指向复制的链表。读的时候是不上锁的。</p>
<p>当然也有缺点：</p>
<ul>
<li><p>读的方法不加锁，或者读取的是修改前的数据，毕竟一个在读，可能有一个在写。</p>
</li>
<li><p>要拷贝，如果数据量大那就崩了，所以还是慎用</p>
</li>
</ul>
<p>一般COW用于读多写少的场景，比如读取白名单，商品类目访问和更新</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>switch 支持枚举类型（之前讲过switch只支持int整型，其实这里也是，只是将enum转为<code>switch(xx.ordinal())</code>）,枚举可以实现接口，枚举类不能被继承。</p>
<h3 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h3><ol>
<li><p>常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">	SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>绑定值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    SPRING(<span class="number">1</span>), SUMMER(<span class="number">2</span>), AUTUMN(<span class="number">3</span>), WINTER(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(<span class="keyword">int</span> code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>绑定值和名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;  </span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>, <span class="number">1</span>), GREEN(<span class="string">&quot;绿色&quot;</span>, <span class="number">2</span>), BLANK(<span class="string">&quot;白色&quot;</span>, <span class="number">3</span>), YELLO(<span class="string">&quot;黄色&quot;</span>, <span class="number">4</span>);  </span><br><span class="line">    <span class="comment">// 成员变量  </span></span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </span><br><span class="line">    <span class="comment">// 构造方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">        <span class="keyword">this</span>.index = index;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 普通方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (c.getIndex() == index) &#123;  </span><br><span class="line">                <span class="keyword">return</span> c.name;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// get set 方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> index;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.index = index;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="枚举实现单例"><a href="#枚举实现单例" class="headerlink" title="枚举实现单例"></a>枚举实现单例</h3><p>双重校验锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">        	<span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            	<span class="keyword">if</span>(singleton == <span class="keyword">null</span>) singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">	INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="枚举和线程安全"><a href="#枚举和线程安全" class="headerlink" title="枚举和线程安全"></a>枚举和线程安全</h3><ol>
<li><p>非枚举方式都要求自己实现线程安全，如同双重校验锁，枚举Java本身在底层实现了线程问题。</p>
</li>
<li><p>在一个类真正被使用的时候，静态资源的初始化，类的加载和初始化过程都是线程安全的，所以，创建一个enum类是线程安全的</p>
</li>
<li><p>双重校验锁可能会被序列化锁破坏，普通的Java类的反序列化中，会通过反射的方式调用类的默认构造函数来初始化对象，所以即使单例的构造函数私有，也会被破坏，由于反序列化后的对象是重新new出来的，这就破坏了单例。而enum的序列化只是将枚举对象的name属性输出到结果。</p>
</li>
</ol>
<h3 id="枚举的比较"><a href="#枚举的比较" class="headerlink" title="枚举的比较"></a>枚举的比较</h3><p>equals 和 == 没区别，compareTo只是比较enum的ordinal顺序大小</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 工程师之路 五</title>
    <url>/2021/03/24/Java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B9%8B%E8%B7%AF-%E4%BA%94/</url>
    <content><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><span id="more"></span>

<h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p>并发：即OS中学到的分时操作系统，单cpu采取不同的cpu调度算法也可以让不同任务”同时”进行。</p>
<p>并行：两个CPU同时执行进程</p>
<p>进程切换的原理请看OS篇</p>
<p>进程是OS分配资源的基本单位，线程是基本执行单位。同一进程下的不同线程共享进程资源。</p>
<p>JVM就是一个进程，多个线程共享JVM资源。且多个线程可以并发执行。</p>
<h2 id="线程的特点"><a href="#线程的特点" class="headerlink" title="线程的特点"></a>线程的特点</h2><h3 id="线程实体"><a href="#线程实体" class="headerlink" title="线程实体"></a>线程实体</h3><p>线程中的实体基本上不拥有系统资源，只是有一点必不可少的、能保证独立运行的资源。 线程的实体包括程序、数据和TCB。线程是动态概念，它的动态特性由线程控制块TCB（Thread Control Block）描述。TCB包括以下信息： （1）线程状态。 （2）当线程不运行时，被保存的现场资源。 （3）一组执行堆栈。 （4）存放每个线程的局部变量主存区。 （5）访问同一个进程中的主存和其它资源。 用于指示被执行指令序列的程序计数器、保留局部变量、少数状态参数和返回地址等的一组寄存器和堆栈。</p>
<h3 id="共享资源"><a href="#共享资源" class="headerlink" title="共享资源"></a>共享资源</h3><p>在同一进程中的各个线程，都可以共享该进程所拥有的资源，这首先表现在：所有线程都具有相同的地址空间（进程的地址空间），这意味着，线程可以访问该地址空间的每一个虚地址；此外，还可以访问进程所拥有的已打开文件、定时器、信号量机构等。由于同一个进程内的线程共享内存和文件，所以线程之间互相通信不必调用内核。</p>
<h2 id="线程实现模型"><a href="#线程实现模型" class="headerlink" title="线程实现模型"></a>线程实现模型</h2><p>即OS中的线程模型概念，内核与用户级线程的对应关系。</p>
<h3 id="使用内核线程实现"><a href="#使用内核线程实现" class="headerlink" title="使用内核线程实现"></a>使用内核线程实现</h3><p>内核线程即OS内核支持的线程，这种线程切换是由OS来操作的。OS通过调度器对线程进行调度，将线程的任务映射到各个CPU上。每个内核线程可以视为内核的分身，支持多线程的内核就叫多线程内核。</p>
<p>程序一般不适用内核线程，而是用内核线程的一种高级接口：轻量级进程（也就是我们通常指的线程），通常一个内核线程对应一个轻量级进程1：1的情况叫做一对一线程模型。</p>
<p><img src="/images/pasted-40.png" alt="upload successful"></p>
<p>由于内核线程的支持，即使有一个轻量级进程被阻塞了，也不会影响整个进程。但缺点是：使用内核线程实现轻量级线程导致各种线程操作（创建，同步）会用到系统调用，需要从用户态切换到内核态，浪费资源，且一个轻量级进程都需要一个内核线程支持，数量有限。</p>
<h3 id="用户线程实现"><a href="#用户线程实现" class="headerlink" title="用户线程实现"></a>用户线程实现</h3><p>广义上：如果一个线程只要不是内核线程都可以认为是用户线程</p>
<p>侠义上：用户线程完全建立在用户空间的线程库，系统内核无法感知线程的存在，线程的操作都在用户态，这种1：N的关系叫做一对多线程模型。</p>
<p>使用用户线程的优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都需要用户程序自己处理。线程的创建、切换和调度都是需要考虑的问题，而且由于操作系统只把处理器资源分配到进程，那诸如“阻塞如何处理”、“多处理器系统中如何将线程映射到其他处理器上”这类问题解决起来将会异常困难，甚至不可能完成。因而使用用户线程实现的程序一般都比较复杂 ，除了以前在不支持多线程的操作系统中（如DOS）的多线程程序与少数有特殊需求的程序外，现在使用用户线程的程序越来越少了，Java、Ruby等语言都曾经使用过用户线程，最终又都放弃使用它。</p>
<h3 id="内核线程和用户线程的混合实现"><a href="#内核线程和用户线程的混合实现" class="headerlink" title="内核线程和用户线程的混合实现"></a>内核线程和用户线程的混合实现</h3><p>线程除了依赖内核线程实现和完全由用户程序自己实现之外，还有一种将内核线程与用户线程一起使用的实现方式。在这种混合实现下，既存在用户线程，也存在轻量级进程。用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而操作系统提供支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级线程来完成，大大降低了整个进程被完全阻塞的风险。在这种混合模式中，用户线程与轻量级进程的数量比是不定的，即为N：M的关系，如图12-5所示，这种就是多对多的线程模型。</p>
<p>许多UNIX系列的操作系统，如Solaris、HP-UX等都提供了N：M的线程模型实现。</p>
<p><img src="/images/pasted-41.png" alt="upload successful"></p>
<h3 id="线程的6态转换"><a href="#线程的6态转换" class="headerlink" title="线程的6态转换"></a>线程的6态转换</h3><p>具体看OS篇</p>
<h3 id="Java设置线程优先级"><a href="#Java设置线程优先级" class="headerlink" title="Java设置线程优先级"></a>Java设置线程优先级</h3><p>Java虚拟机采用抢占式调度模型。也就是说他会给优先级更高的线程优先分配CPU。</p>
<p>虽然Java线程调度是系统自动完成的，但是我们还是可以“建议”系统给某些线程多分配一点执行时间，另外的一些线程则可以少分配一点——这项操作可以通过设置线程优先级来完成。</p>
<p>Java语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY），在两个线程同时处于Ready状态时，优先级越高的线程越容易被系统选择执行。</p>
<p>Java 线程优先级使用 1 ~ 10 的整数表示。默认的优先级是5。</p>
<blockquote>
<p>最低优先级 1：Thread.MIN_PRIORITY</p>
</blockquote>
<blockquote>
<p>最高优先级 10：Thread.MAX_PRIORITY</p>
</blockquote>
<blockquote>
<p>普通优先级 5：Thread.NORM_PRIORITY</p>
</blockquote>
<p>在Java中，可以使用Thread类的setPriority()方法为线程设置了新的优先级。getPriority()方法返回线程的当前优先级。当创建一个线程时，其默认优先级是创建该线程的线程的优先级。</p>
<p>以下代码演示如何设置和获取线程的优先：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadPriority;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;Main Thread  Priority:&quot;</span> + t.getPriority());</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread(t1) Priority:&quot;</span> + t1.getPriority());</span><br><span class="line">        t1.setPriority(Thread.MAX_PRIORITY - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread(t1) Priority:&quot;</span> + t1.getPriority());</span><br><span class="line"></span><br><span class="line">        t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        System.out.println(<span class="string">&quot;Main Thread  Priority:&quot;</span> + t.getPriority());</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread(t2) Priority:&quot;</span> + t2.getPriority());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change thread t2 priority to minimum</span></span><br><span class="line">        t2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread(t2) Priority:&quot;</span> + t2.getPriority());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上面的代码中，Java虚拟机启动时，就会通过main方法启动一个线程，JVM就会一直运行下去，直到以下任意一个条件发生：</p>
<p>调用了exit()方法，并且exit()有权限被正常执行。<br>所有的“非守护线程”都死了(即JVM中仅仅只有“守护线程”)。</p>
<h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p>Linux线程调度</p>
<p>在Linux中，线程是由进程来实现，线程就是轻量级进程（ lightweight process ），因此在Linux中，线程的调度是按照进程的调度方式来进行调度的，也就是说线程是调度单元。</p>
<p>Linux这样实现的线程的好处的之一是：线程调度直接使用进程调度就可以了，没必要再搞一个进程内的线程调度器。在Linux中，调度器是基于线程的调度策略（scheduling policy）和静态调度优先级（static scheduling priority）来决定那个线程来运行。</p>
<p>在Linux中，主要有三种调度策略。分别是：</p>
<p>SCHED_OTHER 分时调度策略，（默认的）</p>
<p>SCHED_FIFO 实时调度策略，先到先服务</p>
<p>SCHED_RR 实时调度策略，时间片轮转</p>
<p>Windows线程调度：</p>
<p>Windows 采用基于优先级的、抢占调度算法来调度线程。</p>
<p>用于处理调度的 Windows 内核部分称为调度程序，Windows 调度程序确保具有最高优先级的线程总是在运行的。由于调度程序选择运行的线程会一直运行，直到被更高优先级的线程所抢占，或终止，或时间片已到，或调用阻塞系统调用（如 I/O）。如果在低优先级线程运行时，更高优先级的实时线程变成就绪，那么低优先级线程就被抢占。这种抢占使得实时线程在需要使用 CPU 时优先得到使用。</p>
<p>Java线程调度：</p>
<p>可以看到，不同的操作系统，有不同的线程调度策略。但是，作为一个Java开发人员来说，我们日常开发过程中一般很少关注操作系统层面的东西。</p>
<p>主要是因为Java程序都是运行在Java虚拟机上面的，而虚拟机帮我们屏蔽了操作系统的差异，所以我们说Java是一个跨平台语言。</p>
<p>在操作系统中，一个Java程序其实就是一个进程。所以，我们说Java是单进程、多线程的！</p>
<p>前面关于线程的实现也介绍过，Thread类与大部分的Java API有显著的差别，它的所有关键方法都是声明为Native的，也就是说，他需要根据不同的操作系统有不同的实现。</p>
<p>在Java的多线程程序中，为保证所有线程的执行能按照一定的规则执行，JVM实现了一个线程调度器，它定义了线程调度模型，对于CPU运算的分配都进行了规定，按照这些特定的机制为多个线程分配CPU的使用权。</p>
<p>主要有两种调度模型：协同式线程调度和抢占式调度模型。</p>
<h4 id="协同式线程调度"><a href="#协同式线程调度" class="headerlink" title="协同式线程调度"></a>协同式线程调度</h4><p>协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上。协同式多线程的最大好处是实现简单，而且由于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是可知的，所以没有什么线程同步的问题。</p>
<h4 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h4><p>抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定。在这种实现线程调度的方式下，线程的执行时间是系统可控的，也不会有一个线程导致整个进程阻塞的问题。</p>
<p>系统会让可运行池中优先级高的线程占用CPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用CPU。处于运行状态的线程会一直运行，直至它不得不放弃CPU。</p>
<p>Java虚拟机采用抢占式调度模型。</p>
<p>虽然Java线程调度是系统自动完成的，但是我们还是可以“建议”系统给某些线程多分配一点执行时间，另外的一些线程则可以少分配一点——这项操作可以通过设置线程优先级来完成。Java语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY），在两个线程同时处于Ready状态时，优先级越高的线程越容易被系统选择执行。</p>
<p>不过，线程优先级并不是太靠谱，原因是Java的线程是通过映射到系统的原生线程上来实现的，所以线程调度最终还是取决于操作系统，虽然现在很多操作系统都提供线程优先级的概念，但是并不见得能与Java线程的优先级一一对应。</p>
<h3 id="debug-多线程代码"><a href="#debug-多线程代码" class="headerlink" title="debug 多线程代码"></a>debug 多线程代码</h3><p>IDEA的断点设置里，右击选择Thread</p>
<p><img src="/images/pasted-42.png" alt="upload successful"></p>
<p>执行代码时就会进入每一个线程。</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>Java中有两类线程：UserThread用户线程、DaemonThread守护线程。用户线程执行用户级任务，守护线程就是后台线程，用来执行后台任务，比如GC 垃圾回收器</p>
<p>这两种线程其实是没有什么区别的，唯一的区别就是Java虚拟机在所有“用户线程”都结束后就会退出。也就是如果JVM只剩下了守护线程那么JVM就会退出。</p>
<p>我们可以通过使用setDaemon()方法通过传递true作为参数，使线程成为一个守护线程。我们必须在启动线程之前调用一个线程的setDaemon()方法。否则，就会抛出一个java.lang.IllegalThreadStateException。</p>
<p>可以使用isDaemon()方法来检查线程是否是守护线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread();</span><br><span class="line">        System.out.println(t1.isDaemon()); <span class="comment">// false</span></span><br><span class="line">        t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(t1.isDaemon());<span class="comment">// true</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t1.setDaemon(<span class="keyword">false</span>);<span class="comment">// 抛出异常，JVM已退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码中设置了子线程为守护线程，所以当代码执行后只有子线程，JVM退出，无法设置。</p>
<h2 id="如何创建线程"><a href="#如何创建线程" class="headerlink" title="如何创建线程"></a>如何创建线程</h2><h3 id="继承Thread类创建线程"><a href="#继承Thread类创建线程" class="headerlink" title="继承Thread类创建线程"></a>继承Thread类创建线程</h3><p>继承Thread类并且重写run方法即可。注意的是：在主线程中，调用了子线程的Start()方法后，主线程是不会等待而是继续执行。也可以不调用Start()方法而直接调用run方法，这时候的run方法不过是个普通方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClassThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般用这个方法，继承的话只能继承一个，接口就无所谓了，两种方式创建的线程没区别基本。</p>
<p>但是这两种方式创建的线程是无法在执行完后返回值给主线程的。</p>
<p>如果想要获取子线程的值，要用Callable和FutureTask</p>
<h3 id="Callable-amp-FutureTask"><a href="#Callable-amp-FutureTask" class="headerlink" title="Callable &amp; FutureTask"></a>Callable &amp; FutureTask</h3><p>这两是JDK1.5之后的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreads</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        MyCallableThread myCallableThread = <span class="keyword">new</span> MyCallableThread();</span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(myCallableThread);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallableThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;doing something&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my callable thread&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-43.png" alt="upload successful"></p>
<p>FutureTask可用于异步获取执行结果或取消执行。FutureTask非常适合用于耗时的计算，主线程可以在启动FutureTask后去做其他事，在其余事情做完后调用get方法获取结果。</p>
<p>调用get方法会阻塞主线程，直到子线程返回值，可以通过isDone()来判断子线程是否执行完成。</p>
<p>可以改造代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       CallableThread callableThread = <span class="keyword">new</span> CallableThread();</span><br><span class="line">       FutureTask futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(callableThread);</span><br><span class="line">       <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;主线程先做其他重要的事情&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span>(!futureTask.isDone())&#123;</span><br><span class="line">           <span class="comment">// 继续做其他事儿</span></span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(future.get()); <span class="comment">// 可能会阻塞等待结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一般会将Callable放入线程池，让线程池执行Callable的代码。手动new Thread(futureTask)还是有开销的。</p>
<h3 id="线程池创建线程"><a href="#线程池创建线程" class="headerlink" title="线程池创建线程"></a>线程池创建线程</h3><p>Java提供的线程池创建线程方式，调用ThreadPoolExecutor即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">          <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">10</span>));</span><br><span class="line">      executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              System.out.println(Thread.currentThread().getName());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p>线程池本质是个HashSet，多余的任务存入阻塞队列中</p>
<h4 id="线程池的主要参数"><a href="#线程池的主要参数" class="headerlink" title="线程池的主要参数"></a>线程池的主要参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、corePoolSize（线程池基本大小）：当向线程池提交一个任务时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize时，（除了利用提交新任务来创建和启动线程（按需构造），也可以通过 prestartCoreThread() 或 prestartAllCoreThreads() 方法来提前启动线程池中的基本线程。）</p>
<p>2、maximumPoolSize（线程池最大大小）：线程池所允许的最大线程个数。当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽略该参数。</p>
<p>3、keepAliveTime（线程存活保持时间）当线程池中线程数大于核心线程数时，线程的空闲时间如果超过线程存活时间，那么这个线程就会被销毁，直到线程池中的线程数小于等于核心线程数。</p>
<p>4、workQueue（任务队列）：用于传输和保存等待执行任务的阻塞队列。</p>
<p>5、threadFactory（线程工厂）：用于创建新线程。threadFactory创建的线程也是采用new Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池内的线程编号）。</p>
<p>5、handler（线程饱和策略）：当线程池和队列都满了，再加入线程会执行此策略。</p>
<p>为什么使用阻塞队列：如果是非阻塞队列，需要线程不停判断是否有事件，一直占用CPU资源，不好。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 工程师之路 四</title>
    <url>/2021/03/10/Java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B9%8B%E8%B7%AF-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h2><span id="more"></span>

<p>序列化是将对象转换为可传输格式的过程，是一种数据持久化手段，一般广泛应用于网络传输，RMI和RPC场景。</p>
<p>反序列化就是逆操作，Java序列化特指JDK的序列化实现，这个实现不同于JSON序列化，是不跨语言的。</p>
<h3 id="Java对象的序列化"><a href="#Java对象的序列化" class="headerlink" title="Java对象的序列化"></a>Java对象的序列化</h3><p>Java内创建的对象都是存在于JVM的堆内存中，只有JVM处于运行态这些对象才会存在，一旦JVM停止运行，这些对象状态也随之消失。但是在真是场景中我们需要将这些对象持久化下来，并且在需要的时候将对象重新读取出来。对象序列化可以很容易的在JVM中的活动对象和字节数组之间进行调换。</p>
<h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><p>类通过实现java.io.Serializable接口以启用其序列化功能，当对一个对象进行序列化的时候，如果遇到不支持Serializable接口的对象，会抛出 NotSerializableException。</p>
<p>配置实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User1</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>序列化实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Initializes The Object</span></span><br><span class="line">        User1 user = <span class="keyword">new</span> User1();</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Write Obj to File</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;tempFile&quot;</span>));</span><br><span class="line">            oos.writeObject(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(oos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Read Obj from File</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;tempFile&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            User1 newUser = (User1) ois.readObject();</span><br><span class="line">            System.out.println(newUser);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(ois);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileUtils.forceDelete(file);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Externalizable接口"><a href="#Externalizable接口" class="headerlink" title="Externalizable接口"></a>Externalizable接口</h3><p>Externalizable继承了Serializable接口，且定义了两个新的方法：writeExternal()和readExternal()，使用Externalizable接口进行序列化的时候要重写writeExternal()和readExternal()方法。</p>
<h3 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h3><p>序列化时将对象状态信息转为可存储或可传输的形式，虚拟机是否支持反序列化不仅取决于类的路径和代码一致，还要求两个类的序列化ID是否一致，即serialVersionUID</p>
<p>反序列化时：JVM将传递过来的serialVersionUID与本地对应的实体类的UID进行比较，相同即可反序列化。</p>
<p>这样是为了安全，因为文件存储的内容可能被篡改。</p>
<h3 id="Java序列化缺陷"><a href="#Java序列化缺陷" class="headerlink" title="Java序列化缺陷"></a>Java序列化缺陷</h3><ol>
<li><p>不能跨语言，如果两个不同语言编写的程序进行通讯，用Java序列化是无法完成序列化和反序列化的。</p>
</li>
<li><p>不安全，Java的反序列化实质是通过ObjectInputStream类调用readObject()方法实现的，这个方法本质是个构造器，可以将实现了Serializable接口的类都实例化，所以在反序列化过程中该方法会执行任意代码。<br>以下是攻击代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set root = <span class="keyword">new</span> HashSet();  </span><br><span class="line">Set s1 = root;  </span><br><span class="line">Set s2 = <span class="keyword">new</span> HashSet();  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;  </span><br><span class="line">   Set t1 = <span class="keyword">new</span> HashSet();  </span><br><span class="line">   Set t2 = <span class="keyword">new</span> HashSet();  </span><br><span class="line">   t1.add(<span class="string">&quot;test&quot;</span>); <span class="comment">//使t2不等于t1  </span></span><br><span class="line">   s1.add(t1);  </span><br><span class="line">   s1.add(t2);  </span><br><span class="line">   s2.add(t1);  </span><br><span class="line">   s2.add(t2);  </span><br><span class="line">   s1 = t1;  </span><br><span class="line">   s2 = t2;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>创建循环对象链，然后将序列化后的对象传输到程序中反序列化，这种情况会导致 hashCode 方法被调用次数呈次方爆发式增长, 从而引发栈溢出异常。</p>
</li>
<li><p>序列化后的流很大</p>
</li>
<li><p>序列化性能差 太慢</p>
</li>
</ol>
<h3 id="序列化对单例的破坏"><a href="#序列化对单例的破坏" class="headerlink" title="序列化对单例的破坏"></a>序列化对单例的破坏</h3><p>实现一个双重校验锁的单例，对其序列化再反序列化，查看是否同一个对象。</p>
<p>双重校验锁单例看上一篇<br>验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//Write Obj to file</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;tempFile&quot;</span>));</span><br><span class="line">        oos.writeObject(Singleton.getSingleton());</span><br><span class="line">        <span class="comment">//Read Obj from file</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;tempFile&quot;</span>);</span><br><span class="line">        ObjectInputStream ois =  <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        Singleton newInstance = (Singleton) ois.readObject();</span><br><span class="line">        <span class="comment">//判断是否是同一个对象</span></span><br><span class="line">        System.out.println(newInstance == Singleton.getSingleton());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如何解决反序列化对单例的破坏呢：在单例类中定义readResolve即可添加方法到单例中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>原理：调用栈挺多的，实质就是在底层方法里有个判断目标对象是否有readResolve方法，如果有，就通过反射的方式调用readResolve方法返回一个对象用于反序列化最终返回对象。所以单例的readResolve方法直接返回自身。</p>
<h3 id="Apache-Commons-Collections的反序列化漏洞"><a href="#Apache-Commons-Collections的反序列化漏洞" class="headerlink" title="Apache-Commons-Collections的反序列化漏洞"></a>Apache-Commons-Collections的反序列化漏洞</h3><p>这个漏洞只出现在3.2.1版本以下</p>
<h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>Commons Collections中提供了一个Transformer接口，主要是用来进行类型转换，这个接口有一个实现类：InvokerTransformer，里面有个transform方法，核心代码就三行，通过反射将传入的对象进行实例化。然后执行其iMethodName方法。</p>
<p><img src="/images/pasted-38.png" alt="upload successful"></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>定义其他注解的注解</p>
<p>元注解有六个:@Target（表示该注解可以用于什么地方）、@Retention（表示再什么级别保存该注解信息）、@Documented（将此注解包含再javadoc中）、@Inherited（允许子类继承父类中的注解）、@Repeatable（1.8新增，允许一个注解在一个元素上使用多次）、@Native（1.8新增，修饰成员变量，表示这个变量可以被本地代码引用，常常被代码生成工具使用）。</p>
<h3 id="Java常用注解"><a href="#Java常用注解" class="headerlink" title="Java常用注解"></a>Java常用注解</h3><p>@Override 表示覆写父类方法</p>
<p>@Deprecated 表示当前方法已过时</p>
<p>@SuppressWarnings 表示关闭一些警告信息</p>
<p>@SafeVarargs 表示专门为抑制堆污染警告提供的</p>
<p>@FunctionalInterface 表示用来指定某个接口必须是函数式接口</p>
<h3 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a>Spring常用注解</h3><p>@Configuration：会将一个类作为IoC容器，它的某个方法头上如果注册了@Bean就会作为这个Spring容器中的Bean。</p>
<p>@Scope 作用域</p>
<p>@Lazy(true) 延迟初始化</p>
<p>@Service 标注业务层组件</p>
<p>@Controller 标注控制层组件</p>
<p>@Repository 标注数据访问组件，即DAO组件</p>
<p>@Component 泛指组件，当组件不好归类的时候可以用这个注解</p>
<p>@PostConstruct用于指定初始化方法（用在方法上）</p>
<p>@PreDestory用于指定销毁方法（用在方法上）</p>
<p>@DependsOn：定义Bean初始化及销毁时的顺序</p>
<p>@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常</p>
<p>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。如下： @Autowired @Qualifier(“personDaoBean”) 存在多个实例配合使用</p>
<p>@Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配。</p>
<p>@PostConstruct 初始化注解</p>
<p>@PreDestroy 摧毁注解 默认 单例 启动就加载</p>
<h3 id="如何定义注解"><a href="#如何定义注解" class="headerlink" title="如何定义注解"></a>如何定义注解</h3><p>注解和接口的定义差不多，注解多了个@符号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAuth&#123;</span><br><span class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;tr&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以定义成员变量，还可以添加默认值，实例如上。</p>
<p>Target: 指定注解修饰什么东西（类，方法，字段）</p>
<p>Rentention: 指定修饰的注解保留多长时间，分别SOURCE（注解仅存在于源码中，在class字节码文件中不包含）,CLASS（默认的保留策略，注解会在class字节码文件中存在，但运行时无法获取）,RUNTIME（注解会在class字节码文件中存在，在运行时可以通过反射获取到）三种类型，* 如果想要在程序运行过程中通过反射来获取注解的信息需要将Retention设置为RUNTIME ！*</p>
<p>Documented：指定被修饰的注解类将被javadoc工具提取成文档。</p>
<p>Inherited：指定注解是否有继承性</p>
<h3 id="通过反射使用自定义注解"><a href="#通过反射使用自定义注解" class="headerlink" title="通过反射使用自定义注解"></a>通过反射使用自定义注解</h3><p>如何获取类的方法，字段上的注解，以及获取注解的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clz = bean.getClass();</span><br><span class="line">Method[] methods = clz.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.isAnnotationPresent(EnableAuth.class)) &#123;</span><br><span class="line">        String name = method.getAnnotation(EnableAuth.class).name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnableAuth</span></span><br><span class="line">    <span class="keyword">private</span> String stra;</span><br><span class="line">    <span class="keyword">private</span> String strb;</span><br><span class="line">    <span class="keyword">private</span> String strc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String str1,String str2,String str3)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.stra = str1;</span><br><span class="line">        <span class="keyword">this</span>.strb = str2;</span><br><span class="line">        <span class="keyword">this</span>.strc = str3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化全都赋值无注解</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;无注解&quot;</span>,<span class="string">&quot;无注解&quot;</span>,<span class="string">&quot;无注解&quot;</span>);</span><br><span class="line">        <span class="comment">//解析注解</span></span><br><span class="line">        doAnnoTest(person);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doAnnoTest</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class clazz = obj.getClass();</span><br><span class="line">        Field[] declareFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:declareFields) &#123;</span><br><span class="line">            <span class="comment">//检查该字段是否使用了某个注解</span></span><br><span class="line">            <span class="keyword">if</span>(field.isAnnotationPresent(EnableAuth.class))&#123;</span><br><span class="line">                EnableAuth anno = field.getAnnotation(EnableAuth.class);</span><br><span class="line">                <span class="keyword">if</span>(anno!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    String fieldName = field.getName();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Method setMethod = clazz.getDeclaredMethod(<span class="string">&quot;set&quot;</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + fieldName.substring(<span class="number">1</span>),String.class);</span><br><span class="line">                        <span class="comment">//获取注解的属性</span></span><br><span class="line">                        String annoValue = anno.value();</span><br><span class="line">                        <span class="comment">//将注解的属性值赋给对应的属性</span></span><br><span class="line">                        setMethod.invoke(obj,annoValue);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型是JDK5引入的新特性，允许在定义类和接口的时候使用类型参数。</p>
<p>泛型最大的好处是复用，比如一个List接口，可以将String，Integer等类型放入，如果不用泛型，存String要写一个对应的接口，使用泛型就可以解决这个问题。</p>
<h3 id="Java的类型擦除"><a href="#Java的类型擦除" class="headerlink" title="Java的类型擦除"></a>Java的类型擦除</h3><p>Java语言中的泛型只在程序源码中存在，在编译后的字节码文件中，就已经被替换为原来的原生类型（Raw Type，也称为裸类型）了，并且在相应的地方插入了强制转型代码，因此对于运行期的Java语言来说，ArrayList<Integer>与ArrayList<String>就是同一个类。所以说泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。</p>
<p>  类型擦除指的是通过类型参数合并，将泛型类型实例关联到同一份字节码上。编译器只为泛型类型生成一份字节码，并将其实例关联到这份字节码上。类型擦除的关键在于从泛型类型中清除类型参数的相关信息，并且再必要的时候添加类型检查和类型转换的方法。 类型擦除可以简单的理解为将泛型java代码转换为普通java代码，只不过编译器更直接点，将泛型java代码直接转换成普通java字节码。 类型擦除的主要过程如下： 1.将所有的泛型参数用其最左边界（最顶级的父类型）类型替换。 2.移除所有的类型参数。</p>
<h3 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h3><p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test&quot;</span>);  </span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;1&quot;</span>);  </span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;name&quot;</span>));  </span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;age&quot;</span>));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>反编译：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();  </span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test&quot;</span>);  </span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;1&quot;</span>); </span><br><span class="line">    System.out.println((String) map.get(<span class="string">&quot;name&quot;</span>));  </span><br><span class="line">    System.out.println((String) map.get(<span class="string">&quot;age&quot;</span>));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>可以看到泛型类型都转为了基本类型</p>
<h3 id="泛型带来的问题"><a href="#泛型带来的问题" class="headerlink" title="泛型带来的问题"></a>泛型带来的问题</h3><h4 id="泛型不可重载"><a href="#泛型不可重载" class="headerlink" title="泛型不可重载"></a>泛型不可重载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTypes</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;invoke method(List&lt;String&gt; list)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;invoke method(List&lt;Integer&gt; list)&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>代码中可以看到，两个重载函数唯一区别是<code>List&lt;String&gt;</code> 和 <code>List&lt;Integer&gt;</code> 但是在编译后泛型类型都会被擦除变为原始类型，导致两个方法变为一样的方法，所以编译不通过。</p>
<h4 id="泛型的catch"><a href="#泛型的catch" class="headerlink" title="泛型的catch"></a>泛型的catch</h4><p>还是由于类型擦除问题，catch多个自定义泛型类的时候可能会重复。</p>
<h4 id="泛型的静态变量"><a href="#泛型的静态变量" class="headerlink" title="泛型的静态变量"></a>泛型的静态变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        GT&lt;Integer&gt; gti = <span class="keyword">new</span> GT&lt;Integer&gt;();</span><br><span class="line">        gti.<span class="keyword">var</span>=<span class="number">1</span>;</span><br><span class="line">        GT&lt;String&gt; gts = <span class="keyword">new</span> GT&lt;String&gt;();</span><br><span class="line">        gts.<span class="keyword">var</span>=<span class="number">2</span>;</span><br><span class="line">        System.out.println(gti.<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GT</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">var</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nothing</span><span class="params">(T x)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案是——2！由于经过类型擦除，所有的泛型类实例都关联到同一份字节码上，泛型类的所有静态变量是共享的。</p>
<h3 id="使用泛型注意点总结"><a href="#使用泛型注意点总结" class="headerlink" title="使用泛型注意点总结"></a>使用泛型注意点总结</h3><p>泛型本质就是一个java提供的语法糖，在虚拟机中只有普通类和普通方法，所有泛型类的类型参数在编译的时候都会被擦除</p>
<p>创建泛型对象的时候要指明类型让编译器尽早做参数检查。</p>
<p>所有静态变量是被泛型类的所有实例共享的</p>
<p>泛型的类型参数不能用在catch里</p>
<p>尽量不要使用原始态类型（Map 不指定泛型类型）可能导致ClassCastException</p>
<h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><p>限定通配符和非限定通配符</p>
<ul>
<li><? extends T> ：可以赋值给任意T及T的子类集合，上界为T，取出来的类型带有泛型限制，向上强制转型为T。null 可以表示任何类型，所以null除外，任何元素都不得添加进<? extends T>集合内。</li>
<li><? super T> : 可以复制T及任何T的父类集合，下界为T。再生活中，投票选举类似于<? super T>的操作。选举投票时，你只能往里投票，取数据时，根本不知道时是谁的票，相当于泛型丢失。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExtends</span><span class="params">(List&lt;? extends Fruit&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报错,extends为上界通配符,只能取值,不能放.</span></span><br><span class="line">        <span class="comment">//因为Fruit的子类不只有Apple还有Banana,这里不能确定具体的泛型到底是Apple还是Banana，所以放入任何一种类型都会报错</span></span><br><span class="line">        <span class="comment">//list.add(new Apple());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以正常获取</span></span><br><span class="line">        Fruit fruit = list.get(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuper</span><span class="params">(List&lt;? <span class="keyword">super</span> Fruit&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//super为下界通配符，可以存放元素，但是也只能存放当前类或者子类的实例，以当前的例子来讲，</span></span><br><span class="line">        <span class="comment">//无法确定Fruit的父类是否只有Food一个(Object是超级父类)</span></span><br><span class="line">        <span class="comment">//因此放入Food的实例编译不通过</span></span><br><span class="line">        list.add(<span class="keyword">new</span> Apple());</span><br><span class="line"><span class="comment">//        list.add(new Food());</span></span><br><span class="line"></span><br><span class="line">        Object object = list.get(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; apples = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;Food&gt; foods = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        putFruits(foods);</span><br><span class="line">        eatFruits(apples);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putFruits</span><span class="params">(List&lt;? <span class="keyword">super</span> Fruit&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eatFruits</span><span class="params">(List&lt;? extends Fruit&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>&lt;? extends Fruit&gt;</code>虽然不能添加元素，但可以在初始化的时候，接受一个已经定义好的list，而该list存放的类型一定相同，因此，List&lt;? extends T&gt;可直接接受一个定义好的list。</p>
<p><code>&lt;? super T&gt;</code>:专门用来存，存的数据只能是本身或者子类，指向的时候只能指向父类</p>
<p><code>&lt;? extends T&gt;</code>: 专门用来消费，得到的类型都是本身，指向的时候只能指向子类</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>自定义异常最好继承Exception</p>
<h3 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h3><p>一般操作文件io，数据库链接比较耗费资源，用完后应该及时关闭，一般我们是在try catch finally的finally里面调用close方法释放资源。</p>
<p>但是从jdk7开始提供了更好的方法：try-with-resources，新的syntax sugar，在try后面接上对io流的定义即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;c:\\ test.xml&quot;</span>))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// handle exception</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="finally和return的执行顺序"><a href="#finally和return的执行顺序" class="headerlink" title="finally和return的执行顺序"></a>finally和return的执行顺序</h3><p>假如try里面有个return 那么后面的finally会不会执行，什么时候执行？</p>
<p>如果try里有return 那么finally的代码还是会执行，return表示整个方法的返回，所以finally会在return之前执行。</p>
<p>但是return前执行的finally块内，对数据的修改效果对于引用类型和值类型会不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 修改值类型</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;  <span class="comment">// 返回 0，finally内的修改效果不起作用</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ret++;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 修改引用类型</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] f2()&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;  <span class="comment">// 返回 [1]，finally内的修改效果起了作用</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ret[<span class="number">0</span>]++;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><h3 id="SimpleDateFormat的线程安全问题"><a href="#SimpleDateFormat的线程安全问题" class="headerlink" title="SimpleDateFormat的线程安全问题"></a>SimpleDateFormat的线程安全问题</h3><p>强制：SimpleDateFormat 是线程不安全的，一般不要定义为static变量，如果定义static变量必须加锁或者使用DateUtils工具类。</p>
<p>Date类型转为String并且指定输出格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Date转String</span></span><br><span class="line">Date data = <span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">String dataStr = sdf.format(data);</span><br><span class="line">System.out.println(dataStr);</span><br></pre></td></tr></table></figure>

<p>String 转Date：<code>sdf.parse(dataStr);</code></p>
<p>时区问题：由于存在时区，不同地区时间不同，可以在代码中手动设置时区，获得当地时间，如中国的时间是GTM+8</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">sdf.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;America/Los_Angeles&quot;</span>));</span><br><span class="line">System.out.println(sdf.format(Calendar.getInstance().getTime()));</span><br></pre></td></tr></table></figure>

<p>为什么会导致线程不安全？：</p>
<p>因为观察源码可以发现，<br><img src="/images/pasted-39.png" alt="upload successful"></p>
<p>calendar.setTime(date)是没有线程安全保证的，所以当设置SimpleDateForat为静态变量时，所有子线程都可以访问，可能A线程刚刚设置完calendar.setTime(date)就被B线程再调用修改时间了。</p>
<p>如何解决？</p>
<ol>
<li><p>使用局部变量。</p>
</li>
<li><p>或者一定要将SimpleDateFormat作为共享变量的话，加同步锁。<br><code>synchronized(simpleDateFormat)&#123;...</code></p>
</li>
<li><p>或者使用使用ThreadLocal</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用ThreadLocal定义一个全局的SimpleDateFormat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; simpleDateFormatThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line">String dateString = simpleDateFormatThreadLocal.get().format(calendar.getTime());</span><br></pre></td></tr></table></figure>

<p>如果是Java8. 换成DateTimeFormatter即可，线程安全。</p>
<h3 id="为什么选择ThreadLocal"><a href="#为什么选择ThreadLocal" class="headerlink" title="为什么选择ThreadLocal"></a>为什么选择ThreadLocal</h3><p>ThreadLocal使同一变量在每一个线程中有各自的副本，不就意味着这个变量是不共享数据的，那不共享数据的话，为什么我不把这个变量变成自定义线程类的成员域，如果可以，ThreadLocal类的作用是啥?</p>
<p>Spring采用Threadlocal的方式，来保证单个线程中的数据库操作使用的是同一个数据库连接，同时，采用这种方式可以使业务层使用事务时不需要感知并管理connection对象，通过传播级别，巧妙地管理多个事务配置之间的切换，挂起和恢复。</p>
<p>其实本质是将变量的值都存在thread中，为什么不将变量定义为线程的成员变量呢，还是因为资源节省，每个线程都用成员变量而不用单例的话会造成大量浪费。而且假如有链路的话，需要共享一些变量比如用户信息，这时候如果定义成线程成员变量，那么不同线程请求得将信息传递过去，但是如果使用静态变量那么直接import后不需要传参直接threadlocal获取。</p>
<h3 id="Java8时间处理"><a href="#Java8时间处理" class="headerlink" title="Java8时间处理"></a>Java8时间处理</h3><p>在Java8中， 新的时间及⽇期API位于java.time包中， 该包中有哪些重要的类。 分别代表了什么？</p>
<p>Instant： 时间戳</p>
<p>Duration： 持续时间， 时间差</p>
<p>LocalDate： 只包含⽇期， ⽐如： 2016-10-20</p>
<p>LocalTime： 只包含时间， ⽐如： 231210</p>
<p>LocalDateTime： 包含⽇期和时间， ⽐如： 2016-10-20 231421</p>
<p>Period： 时间段</p>
<p>ZoneOffset： 时区偏移量， ⽐如： +8:00</p>
<p>ZonedDateTime： 带时区的时间</p>
<p>Clock： 时钟， ⽐如获取⽬前美国纽约的时间</p>
<p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>
<h4 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line"><span class="keyword">int</span> year = today.getYear();</span><br><span class="line"><span class="keyword">int</span> month = today.getMonthValue();</span><br><span class="line"><span class="keyword">int</span> day = today.getDayOfMonth();</span><br><span class="line">System.out.printf(<span class="string">&quot;Year : %d Month : %d day : %d t %n&quot;</span>, year,month, day);</span><br></pre></td></tr></table></figure>

<h4 id="创建指定日期"><a href="#创建指定日期" class="headerlink" title="创建指定日期"></a>创建指定日期</h4><p><code>LocalDate date = LocalDate.of(2018, 01, 01);</code></p>
<h4 id="格式化时间-时间戳转换"><a href="#格式化时间-时间戳转换" class="headerlink" title="格式化时间+时间戳转换"></a>格式化时间+时间戳转换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime = Instant.ofEpochMilli(<span class="number">1617257935413L</span>).atZone(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDateTime();</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">String time = localDateTime.format(formatter);</span><br><span class="line">System.out.println(time);</span><br><span class="line">System.out.println(LocalDateTime.of(<span class="number">2021</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>).toInstant(ZoneOffset.ofHours(<span class="number">8</span>)).toEpochMilli());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate nowDate = LocalDate.now();</span><br><span class="line"><span class="comment">//判断闰年</span></span><br><span class="line"><span class="keyword">boolean</span> leapYear = nowDate.isLeapYear();</span><br></pre></td></tr></table></figure>

<h4 id="计算日期间天数和月数"><a href="#计算日期间天数和月数" class="headerlink" title="计算日期间天数和月数"></a>计算日期间天数和月数</h4><p><code>Period period = Period.between(LocalDate.of(2018, 1, 5),LocalDate.of(2018, 2, 5)); </code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java工程师之路 一</title>
    <url>/2020/06/09/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B9%8B%E8%B7%AF-%E5%A4%A7%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象三大基本特征"><a href="#面向对象三大基本特征" class="headerlink" title="面向对象三大基本特征"></a>面向对象三大基本特征</h3><ol>
<li>封装 这个不用多说</li>
<li>继承 子类可以继承父类，对父类进行拓展，有两种继承：实现继承（直接使用父类方法），接口继承（重写父类属性和方法），实际代码编写中应该慎用继承，除非真是<code>is-a</code>关系 否则别用，用组合。</li>
<li>多态 一个类的实例在不同情况下有不同表现，最常见就是子类传入父类参数中，运行调用父类时，实际的操作是其子类完成</li>
</ol>
<h3 id="面向对象5大基本原则-SOLID"><a href="#面向对象5大基本原则-SOLID" class="headerlink" title="面向对象5大基本原则 SOLID"></a>面向对象5大基本原则 SOLID</h3><span id="more"></span>

<ol>
<li><p>S：Single-Responsibility Principle 单一职责原则，一个类就做好一件事就好了，提高内聚降低耦合</p>
</li>
<li><p>O：Open-Closed Principle 开闭原则，类应该对扩展开发，对修改封闭，人话就是来了新需求不改动原来代码，直接对现在的代码进行拓展。举例来说，就是写类的时候让这个类继承一个父类或者接口，实现的时候覆写这个类或实现接口，下次有新的需求，不改动原来的子类，重新弄一个继承这个接口或者类的子类，来满足需求。</p>
</li>
<li><p>L：Liskov-Substitution Principle 里氏替换原则，子类必须能替换父类，为什么这样，因为继承是侵入性的，父类修改了变量或者方法，不满足替换原则的子类也会被变动，如果满足替换原则，父类随便怎么动都不会影响子类，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+子类必须实现父类的抽象方法，但不得重写（覆盖）父类的非抽象（已实现）方法。</span><br><span class="line">+子类中可以增加自己特有的方法。</span><br><span class="line">当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</span><br><span class="line">+当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</span><br></pre></td></tr></table></figure>
<p>举例：一个长方形类，有一个子类正方形类,如果正方形类里头重写了计算面积方法（边的平方），那么则无法满足原则，因为重写了非抽象方法</p>
</li>
<li><p>I：Interface-Segregation Principle 接口隔离原则，核心就是多个小接口，不要<code>fat interface</code>肥接口，接口应该单一的负责某件事。</p>
</li>
<li><p>D：Dependecy-Inversion Principle 依赖倒置原则，核心就是模块间只依赖接口，不依赖具体。</p>
</li>
</ol>
<h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>重载：Java的一个语法特性而已，有人觉得算多态，但只有在编译的时候会去判断调用哪个方法。</p>
<p>重写：运行时绑定，多态的体现，子类覆写父类方法，只有在运行的时候根据变量所指向的实际对象的类型调用方法。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>java里有三种变量：类变量（区），成员变量（堆），局部变量（栈）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variables</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 类变量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 成员变量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 局部变量</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>public：不解释</p>
<p>private：不解释</p>
<p>protected：只有类本身，统一包的其他类和子类能访问，其他包但不是子类的都不可以。</p>
<p>default：只有自己和其他包的类可以访问，其他包包括子类不可以访问</p>
<h3 id="语言无关性"><a href="#语言无关性" class="headerlink" title="语言无关性"></a>语言无关性</h3><p>我们知道java可以write once run anywhere 这是靠jvm实现的，java编译为字节码，由jvm运行这些字节码文件，所以Java还是语言无关的，因为只要能弄出class文件，管他用什么语言写出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JVM支持：</span><br><span class="line">1. Kotli</span><br><span class="line">2. Groovy</span><br><span class="line">3. Scala</span><br><span class="line">4. Jruby</span><br><span class="line">5. Jython</span><br><span class="line">6. Fantom</span><br><span class="line">7. Clojure（Lisp）</span><br><span class="line">8. Rhino</span><br><span class="line">9. Ceylon</span><br></pre></td></tr></table></figure>
<h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递**"></a>值传递和引用传递**</h3><p>什么是实参和形参：</p>
<p>形参：定义函数名和函数体的时候使用的参数，用来接受调用该函数传过来的参数</p>
<p>实参：调用有参函数时，主调函数传递过去的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  ParamTest pt = <span class="keyword">new</span> ParamTest();</span><br><span class="line">  pt.sout(<span class="string">&quot;Hollis&quot;</span>);<span class="comment">//实际参数为 Hollis</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sout</span><span class="params">(String name)</span> </span>&#123; <span class="comment">//形式参数为 name</span></span><br><span class="line">  System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值传递：调用函数的时候将实际参数复制一份到函数中，这样对复制过来的参数随意修改不会修改实际参数</p>
<p>引用传递：调用函数的时候不是拷贝参数，而是将参数的地址传递过去，那么被调函数对这个参数修改会影响实际参数</p>
<p><em>值传递和引用传递根本区别在于是否创建副本</em></p>
<p>Java中只用值传递！</p>
<p>Java的求值策略：很多人误以为Java的对象传递是引用传递，实际上官方文档指出了，java就是值传递，只不过是把对象的引用当作值传递给方法，也就是说Java会将对象的地址的拷贝传递给被调函数，这个地址就是形式参数。这个方法是：传共享对象调用</p>
<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>byte 一个字节 正负<br>short 2字节 正负<br>int 4个字节 正负<br>long 8个字节 正负</p>
<p>Java中每个类型都有范围，如果溢出不会抛出异常，也没有提示所以同类型运算一定要注意数据溢出问题</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>要给浮点数由两个数m和e表示：a = m* be m是尾数，b是基（操作系统给的基）p是保存的位数。</p>
<p>注意：不能用浮点数表示金额，计算机中保存的小数其实是十进制小数的近似值，并不是准确值，使用<code>BigDecimal</code>或者<code>Long</code>来表示金额</p>
<h2 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h2><h4 id="为啥要有基本类型："><a href="#为啥要有基本类型：" class="headerlink" title="为啥要有基本类型："></a>为啥要有基本类型：</h4><p>Java中存在基本类型（内置类型），之所以存在这些类型是因为在Java中new一个对象是存在堆里的，通过栈的引用使用这些对象，所以对象比较消耗资源，对于经常用的的数据类型 int之类的，每次new的话比较笨重。提供的基本数据类型每次创建都在栈中存储，更加高效</p>
<h4 id="为啥要有包装类型："><a href="#为啥要有包装类型：" class="headerlink" title="为啥要有包装类型："></a>为啥要有包装类型：</h4><p>不同于scala 万物对象的概念，Java中的内置类型非对象，在遇到集合类的时候是无法将基础类型放入集合中的，为了解决这种问题，Java提供了和基本数据类型对应的包装类 都处于 <code>java.lang</code>包下，每个包装类多了一些属性和方法，更加方便操作。</p>
<h4 id="拆箱和装箱"><a href="#拆箱和装箱" class="headerlink" title="拆箱和装箱"></a>拆箱和装箱</h4><p>有了基本类型和包装类型，肯定有要在其中转换的时候，包装类转基本类型就是拆箱，反之装箱（boxing），在Java5之前需要手动操作装箱：<code>Integer i = new Integer(10);</code></p>
<p>在SE5中，为了方便开发，Java提供的自动拆箱和装箱功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;<span class="comment">// 自动装箱</span></span><br><span class="line"><span class="keyword">int</span> b = i; <span class="comment">// 自动拆箱</span></span><br></pre></td></tr></table></figure>

<h4 id="自动拆装箱的实现原理"><a href="#自动拆装箱的实现原理" class="headerlink" title="自动拆装箱的实现原理"></a>自动拆装箱的实现原理</h4><p>有如下自动拆装箱代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer integer = <span class="number">1</span>; <span class="comment">// boxing</span></span><br><span class="line"><span class="keyword">int</span> i = integer; <span class="comment">//unboxing</span></span><br></pre></td></tr></table></figure>
<p>反编译后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer integer = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> i = integer.intValue();</span><br></pre></td></tr></table></figure>
<p>可以看出自动装箱都是调用的<code>XXX.valueOf()</code>，自动拆箱通过<code>XXX.xxxValue()</code>实现</p>
<h4 id="啥时候自动帮你拆装箱"><a href="#啥时候自动帮你拆装箱" class="headerlink" title="啥时候自动帮你拆装箱"></a>啥时候自动帮你拆装箱</h4><ol>
<li><p>数据进集合的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>); <span class="comment">// 没有报错，auto boxing</span></span><br></pre></td></tr></table></figure></li>
<li><p>包装类和基本类型比较的时候</p>
</li>
</ol>
<p>包装类会先拆箱成基本类型然后进行比较</p>
<ol start="3">
<li>包装类型的运算</li>
</ol>
<p>两个包装类型进行运算也会自动拆箱成基本类型</p>
<ol start="4">
<li>三目运算符</li>
</ol>
<p><code>int k = flag ? i.intValue() : j;</code><br>只要当第二(i)和第三位（j）操作数为基本类型和对象的时候，对象就会拆箱。这时候如果i为null 那么拆箱会导致NPE问题</p>
<ol start="5">
<li>函数参数和返回值</li>
</ol>
<p>***NOTE： 一定要注意 在unboxing的时候如果包装类为null 会导致NPE 空指针异常</p>
<h4 id="面试会考的玩意：自动拆装箱和缓存"><a href="#面试会考的玩意：自动拆装箱和缓存" class="headerlink" title="***面试会考的玩意：自动拆装箱和缓存"></a>***面试会考的玩意：自动拆装箱和缓存</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        Integer integer1 = <span class="number">3</span>;</span><br><span class="line">        Integer integer2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (integer1 == integer2)</span><br><span class="line">            System.out.println(<span class="string">&quot;integer1 == integer2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;integer1 != integer2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Integer integer3 = <span class="number">300</span>;</span><br><span class="line">        Integer integer4 = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (integer3 == integer4)</span><br><span class="line">            System.out.println(<span class="string">&quot;integer3 == integer4&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;integer3 != integer4&quot;</span>);</span><br><span class="line">            </span><br><span class="line">结果：</span><br><span class="line">integer1 == integer2</span><br><span class="line">integer3 != integer4</span><br></pre></td></tr></table></figure>

<p><code>==</code>用来比较对象引用 <code>equals</code>用来比较值，正常人会认为上面两个都是false，但是在SE5中Java为了节省内存，通过让整型对象使用相同对象实现了缓存和重用</p>
<p>只适用于 -128 ~ +127 只适用于自动拆装箱，手动用构造函数的对象不适用</p>
<p>事实上这个范围可以在<code>java.lang.Integer.IntegerCache.high</code>中设置最大值</p>
<p>缓存不止存在于Integer，Byte、Short、Long的缓存范围和Integer一样，只有Character的缓存范围是0~127</p>
<h4 id="如何正确定义返回值：isSuccess-success"><a href="#如何正确定义返回值：isSuccess-success" class="headerlink" title="如何正确定义返回值：isSuccess/success"></a>如何正确定义返回值：isSuccess/success</h4><p>日常开发中定义布尔类型变量，比如RPC接口，会定义是否成功字段，一般有四种方式来定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> success</span><br><span class="line"><span class="keyword">boolean</span> isSuccess</span><br><span class="line">Boolean success</span><br><span class="line">Boolean isSuccess</span><br></pre></td></tr></table></figure>
<ol>
<li>success还是isSuccess</li>
</ol>
<p>阿里巴巴开发手册中规定任何布尔类型都不可加is，否则会导致序列化错误：定义为boolean isSuccess 的属性 它的方法也是 isSuccess(),RPC框架反向解析的时候以为对应的属性是success 导致获取不到。</p>
<p>自己在idea中生成两个属性试一下就知道了。首先关于getter和setter，如果是普通的参数就要生成get和set方法。但是如果是布尔类型，那么方法则是：is…和set…</p>
<p>所以如果命名boolean isSuccess 那么对应方法就是 isIsSuccess() 和 setIsSuccess(); 但是生成的是isSuccess()和setSuccess，如果普通情况下没什么问题，但是在序列化的时候就会出现问题。</p>
<p>如果实体类定义了 boolean isSuccess 在JSON序列化的时候，fastJson和jackson会序列化为：<code>&#123;&quot;xx&quot;:&quot;xx&quot;,&quot;success&quot;:true&#125;</code>，这是因为这两个工具在序列化的时候会通过反射获取所有的getter方法，的到了isSuccess方法后，根据Java的setter/getter命名原则，认为success是属性。而Gson结果是<code>&#123;&quot;isSuccess&quot;:true&#125;</code>说明Gson遍历属性而不是getter方法</p>
<p>***结论： 用success 不要+is 可以导致很多灵异状况</p>
<ol start="2">
<li>boolean还是Boolean</li>
</ol>
<p>现在还剩下两个情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> success</span><br><span class="line">Boolean success</span><br></pre></td></tr></table></figure>
<p>首先这两个区别 基本类型的默认值是false，包装类的是null</p>
<p>阿里巴巴规范中：所有的POJO必须使用包装类，RPC方法返回值和参数使用包装类，推荐局部变量使用基本数据类型。</p>
<p>举个例子：如果调用RPC服务返回值，如果返回值是基本类型，那么如果调用失败或者异常退出，返回的值是0 而不是null。这是有问题的！ 如果使用包装类接受，拿到null值计算的时候会抛出异常提示用户，而不是用默认值计算误导用户。</p>
<p>总结： RPC的返回值和POJO中尽量使用包装类 定义的布尔类型不要+ is</p>
<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><h4 id="字符串不可变"><a href="#字符串不可变" class="headerlink" title="字符串不可变"></a>字符串不可变</h4><p><code>String s = &quot;abcd&quot;</code> 这个s保存了String对象的引用（堆中）。<code>String s2 = s</code> 这个s2保存了相同的引用值。<code>s = s.concat(&quot;ef&quot;)</code> 这时候s保存的是新建的对象的引用</p>
<p>一旦一个String对象在堆中创建出来，就再也无法被修改，注意的是String的所有类方法都不是修改字符串，而是生成新的对象返回。如果需要一个可修改字符串对象，使用：<code>StringBuffer</code> or <code>StringBuilder</code>否则有大量时间浪费在GJ上</p>
<h4 id="substring-原理"><a href="#substring-原理" class="headerlink" title="substring 原理"></a>substring 原理</h4><p>substring(int begin,int end)在不同版本是不同的，这是个字符串截取方法，左闭右开</p>
<p>在JDK6中：String是通过字符串数组实现的，String类中包含三个成员变量：char value[],int offset,int count,调用subString的时候会创建新的String对象，但是这个值依旧指向原来堆中的这个char数组，只不过count和offset不同。</p>
<p>这个版本这么操作会导致问题，如果一个很长的字符串做了截取操作，只截取了很短一点，这个截取的对象还是指向原来的那一长串，会导致原来的长的String对象无法释放，可能导致内存泄漏，所以在JDK6中会使用以下方法重新生成一个字符串：<code>x = x.substring(x,y)+&quot;&quot;</code><br>这个问题已经被记录在了java的bug database中</p>
<p>JDK7：现在这个问题得到了解决，可以在堆中生成新的数组了</p>
<h4 id="replaceFirst-replaceAll-replace-区别"><a href="#replaceFirst-replaceAll-replace-区别" class="headerlink" title="replaceFirst,replaceAll,replace 区别"></a>replaceFirst,replaceAll,replace 区别</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文字替换（全部） </span></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;正则表达式&quot;</span>); </span><br><span class="line">Matcher matcher = pattern.matcher(<span class="string">&quot;正则表达式 Hello World,正则表达式 Hello World&quot;</span>); </span><br><span class="line"><span class="comment">//替换所有符合正则的数据 </span></span><br><span class="line">System.out.println(matcher.replaceAll(<span class="string">&quot;Java&quot;</span>)); </span><br><span class="line">System.out.println(<span class="string">&quot;abac&quot;</span>.replace(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;\a&quot;</span>)); <span class="comment">//\ab\ac</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>replaceAll替换所有符合正则的文字</p>
</li>
<li><p>replaceFirst 替换第一个符合正则的</p>
</li>
<li><p>replace 替换字符串</p>
</li>
</ol>
<h4 id="String-对-的重载"><a href="#String-对-的重载" class="headerlink" title="String 对 + 的重载"></a>String 对 + 的重载</h4><p>String s = “a”+”b” 编译器会变成：String s = “ab”</p>
<p>建议使用StringBuilder的append方法，最后调用toString() 效率更高，特别是在循环中，使用+的话每次循环Java都会new一个StringBuilder进行append 然后toString返回对象</p>
<h4 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h4><p>最大区别是StringBuffer是线程安全的，它的append方法前面加了synchronized</p>
<p>平时开发不是循环就用+就好了，如果并发下要用StringBuffer</p>
<h4 id="数字转字符"><a href="#数字转字符" class="headerlink" title="数字转字符"></a>数字转字符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">String i1 = <span class="string">&quot;&quot;</span>+i</span><br><span class="line">String i2 = String.valueOf(i);</span><br><span class="line">String i3 = Integer.toString(i);</span><br></pre></td></tr></table></figure>

<p>最后两个没区别，最糟糕的是使用+，会生成一个StringBuilder 调用append 然后toString()</p>
<h4 id="switch-对String的支持"><a href="#switch-对String的支持" class="headerlink" title="switch 对String的支持"></a>switch 对String的支持</h4><h5 id="switch-和-整型"><a href="#switch-和-整型" class="headerlink" title="switch 和 整型"></a>switch 和 整型</h5><p>switch 对int的判断是直接比较整数的值</p>
<h5 id="switch-和-char"><a href="#switch-和-char" class="headerlink" title="switch 和 char"></a>switch 和 char</h5><p>实际上比较的是ascall码，编译器会将char转为int</p>
<h5 id="switch-和-字符串"><a href="#switch-和-字符串" class="headerlink" title="switch 和 字符串"></a>switch 和 字符串</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">switchDemoString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;world&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反编译：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">switchDemoString</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">switchDemoString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">switch</span>((s = str).hashCode())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">99162322</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">113318802</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>))</span><br><span class="line">                System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch 是通过 字符串的equals方法和hashcode方法实现的，返回的哈希值实际是int类型，之所以再次使用equals方法确保一样是因为哈希值可能会碰撞，实际上对string的switch确实性能没有整型或者字符型高，但是也没有那么差，i那位就多了一个equals方法，而且hashcode方法是有缓存的，在循环中不会有太大开销。</p>
<h4 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h4><p><code>String str = &quot;abc&quot;</code> 这种叫做字面量。</p>
<p>jvm为了减少相同字符串的重复创建，会单独开辟一个内存用来保存字符串常量，这个内存区叫做字符串常量池。当代码中有以上这种命名方法时，会先检查字符串常量池，看有没有相同内容的，有就返回这个字符串对象的引用，否则创建新的字符串对象，把引用让如字符串常量池。</p>
<p>此机制：字符串驻留或字符串池化</p>
<p>字符串常量池位置：JDK7以前放在永久代，7中放在堆，8中移除了永久代，元空间代替了永久代，就放在了元空间。</p>
<h4 id="Class常量池"><a href="#Class常量池" class="headerlink" title="Class常量池"></a>Class常量池</h4><p>Java一共有三种常量池：字符串常量池，Class常量池，运行时常量池</p>
<h5 id="class文件"><a href="#class文件" class="headerlink" title="class文件"></a>class文件</h5><p>可以通过<code>javap -v helloworld.class</code>查看常量池</p>
<p>如果将java代码如下编译为class文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;Hollis&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的HelloWorld.class ,用16进制打开，<code>vim HelloWorld.class</code> <code>:%!xxd</code>即可查看内容。</p>
<p>Class常量池其实就是Class文件中的资源库，Class文件包含了类的版本，字段，方法，接口，还有一个常量池，里面存放了各种字面量和符号引用。</p>
<p>不容的Class文件里的常量个数肯定不一样，所以在Class文件的入口会设置两个字节的常量池容量计数器，记录常量个数，常量池计数是从1开始的。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cafe babe  0000    0034    0011        0400...</span><br><span class="line">魔数     次版本号 主版本号 常量池计数   常量池数据区</span><br></pre></td></tr></table></figure>

<p>常量池里存了：</p>
<ul>
<li><p>字面量：int a = 123 这个123就是字面量，即整数，字符，浮点数</p>
</li>
<li><p>符号引用：类和接口的全名，字段的名称和描述，方法的名称和描述</p>
</li>
</ul>
<h5 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h5><p>Class和字符串常量池不同，这是Class文件中包含的各种常量，是在JVM运行加载的时候使用，而字符串常量池不过是在运行中动态在元空间创建的数据。</p>
<p>Javac编译的时候并不像C那样有链接，而是在JVM加载class文件的时候动态链接，虚拟机运行的时候需要从常量池获取对应的符号引用，再在类创建时翻译到具体的内存地址。</p>
<p>class是用来保存常量的一个地方，JVM载入文件时需要把常量池里的常量加载到内存里。</p>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池存储在方法区，每当一个类或者接口被创建，就会存储至对应的运行时常量池，包括了不同常量：数值字面量，方法或者字段的引用。jdk1.8中没有了永久代，只有元空间，而方法区存在永久代或者元空间，所以现在的运行时常量池也在元空间。</p>
<p>运行时常量池包含 Class常量池的常量，字符串常量池的内容</p>
<h4 id="三个常量池的关系"><a href="#三个常量池的关系" class="headerlink" title="三个常量池的关系"></a>三个常量池的关系</h4><p>虚拟机启动时，会将各个Class文件的常量池载入到运行时常量池（元空间内），所以Class常量池只是一个暂时存放数据的地方，类似硬盘，启动的时候从里面取数据加载到内存。</p>
<p>字符串常量池就类似运行时常量池的分支，加载时，对于class文件里的常量池，里面是字符串的部分都会被装入字符串常量池</p>
<h4 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h4><p>显式使用常量池，使用这个方法会将字符串内容放入字符串常量池(如果找不到相同字符串)。</p>
<p><code>String str = &quot;ab&quot;.intern();</code></p>
<h4 id="String的长度"><a href="#String的长度" class="headerlink" title="String的长度"></a>String的长度</h4><p>定义时的长度限制：</p>
<p>之前已经了解了，String类实际由三个部分组成，byte bytes[], int offset, int length。</p>
<p>这里面的length是整型，所以String定义的时候最大长度是int的最大范围：2^31-1。</p>
<p>但是实际不可能真的能定义到这么长，这是因为我们定义的字符串都要保存进字符串常量池中，字符串常量池本身就是有限制的，这个大小是2字节：2^16-1 = 65535 但是真正编译的时候javac规定了 &gt; 65535就会抛出异常编译失败。所以我们真正的最大值是 65534</p>
<p>运行时的长度限制：int的范围，可以写一个for循环试试。所以在开发中要注意，如果对大的图片或者文本做加密 base64或者其他，容易让string超出范围。</p>
<h2 id="Java的关键字"><a href="#Java的关键字" class="headerlink" title="Java的关键字"></a>Java的关键字</h2><h4 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h4><p>Java中的集合类 ArrayList和Vector都是通过数组实现的，只在定义element时不同，Arraylist使用了transient</p>
<p><code>private transient Object[] elememntData</code></p>
<p>意思就是被transient修饰的值在序列化的时候会被忽视，反序列化后，被修饰的变量或被设置为默认值 int 就是0，对象就是null</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><code>if(A instanceof ArrayList)</code> 用来测试是否是右边类的实例。</p>
<h4 id="volatile-重要"><a href="#volatile-重要" class="headerlink" title="volatile 重要"></a>volatile 重要</h4><p>volatile 被认为时轻量级的 synchronized，volatile只能修饰变量。如果一个变量可能被多个线程访问，就可以修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>cpu和内存之间是存在多级缓存的 L1cache L2chache。但是缓存之间会存在缓存不一致问题，比如一个双核cpu: CORE ONE 对应的 L1Cache 和 CORE TWO 对应的 L1Cache 里面存了同样的变量，这两个缓存的这个变量可能不同步。写回主存的时候可能会覆写。</p>
<p>但是对于volatile变量，从cache获得这个变量进行写的时候JVM会向cpu发一条lock前缀的指令将这个缓存中的变量先写回主存。但是其他的缓存可能还存的旧值，所以为了在多处理器下的各个缓存保持一致，会实现<code>缓存一致性协议</code>。</p>
<p><code>缓存一致性协议</code>: 最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p>
<p>这样，当一个volatile变量被修改，会被立刻刷回主存，并通知其他cache的缓存行状态为无效。这样就可以包装volatile的变量在所有cache中是可见的。</p>
<p>可见性：一个线程修改了这个变量，其他线程能立刻看到。通过缓存一致性解决了。</p>
<p>有序性：cpu是会对输入代码乱序执行的。比如对a+1和对b+1这两个指令是随机执行的。volatile会让cpu顺序执行。比如volatile修饰a变量， 执行a+1 a-1,这两个指令只要是有a出现的cpu不会变动顺序，一个一个执行。</p>
<p>原子性：一个操作要么全部执行完，要么不执行。对于volatile来说无法保证原子性。</p>
<p>为什么volatile无法保证原子性：对于i++这样的操作，cpu不是一步完成的，是分作读取，自增， 写入这三步骤，被volatile修饰的变量修改写入可以作为原子操作。当两个线程同时执行i++,假设A线程读取了i的值，B线程也同时读取了i的值，这时候他们都将i复制到了自己的工作内存，假如A修改了值，虽然满足可见性，其他线程的这个值都变了，但是对于B线程来说除非再读取一次主存内容，不然工作内存的i还是原来的值。总之两个cpu各自读取了值，共同写入cache中，这时候无所谓可见性。</p>
<p>load-compute-store-其他线程可见，这四步，前面三步是不安全的</p>
<h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p>synchronized 可以修饰方法，代码块，被修饰的这些同一时间只能被一个线程访问。</p>
<h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><blockquote>
<blockquote>
<p>方法级的同步是隐式的。同步方法的常量池中会有一个ACC_SYNCHRONIZED标志。当某个线程要访问某个方法的时候，会检查是否有ACC_SYNCHRONIZED，如果有设置，则需要先获得监视器锁，然后开始执行方法，方法执行之后再释放监视器锁。这时如果其他线程来请求执行方法，会因为无法获得监视器锁而被阻断住。值得注意的是，如果在方法执行过程中，发生了异常，并且方法内部并没有处理该异常，那么在异常被抛到方法外面之前监视器锁会被自动释放。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>同步代码块使用monitorenter和monitorexit两个指令实现。可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无论是ACC_SYNCHRONIZED还是monitorenter、monitorexit都是基于Monitor实现的，在Java虚拟机(HotSpot)中，Monitor是基于C++实现的，由ObjectMonitor实现。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>ObjectMonitor类中提供了几个方法，如enter、exit、wait、notify、notifyAll等。sychronized加锁的时候，会调用objectMonitor的enter方法，解锁的时候会调用exit方法</p>
</blockquote>
</blockquote>
<p>monitorenter 和 monitorexit都是原子性的操作。加锁解锁，死锁，和cpu调度问题都是操作系统原理，默认都掌握了。</p>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>final变量：变量会变成常量</p>
<p>final方法：子类无法覆写</p>
<p>final类：无法被继承</p>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>修饰变量和方法，也可以形成静态代码块。</p>
<p>静态变量：一个类的静态变量不属于任何类的对象或者实例，不是线程安全的，所以一般用final修饰静态变量，如果静态变量不是private，可以通过类名.变量名访问。</p>
<p>静态方法：和静态变量一样只属于类，静态方法稚嫩该调用静态变量和静态方法，静态方法一般是用来给其他类使用的公共方法所以不需要创建实例。</p>
<p>静态代码块：一组指令在类加载的时候在内存中由Java ClassLoader执行。一般用来初始化类的静态变量，在类装载的时候创建静态资源，Java不允许在静态块中使用非静态变量。</p>
<p>静态类：挺少用的，大部分用来作配置。</p>
<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>Java的预留关键字 和 final相似 不怎么用</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins执行SSH的自动部署Docker的脚本</title>
    <url>/2019/04/22/Jenkins%E6%89%A7%E8%A1%8CSSH%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Docker%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="公司大佬写的脚本-学习"><a href="#公司大佬写的脚本-学习" class="headerlink" title="公司大佬写的脚本 学习"></a>公司大佬写的脚本 学习</h3><p>jenkins自动部署时使用</p>
<p><img src="/images/pasted-3.png" alt="upload successful"></p>
<p>脚本如下</p>
<span id="more"></span>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: build_image.sh [[[ -s server_name] [-b [master | release]] [-v version] | [-h]&#x27;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        -s | --server )  <span class="built_in">shift</span></span><br><span class="line">                         server_name=<span class="variable">$1</span></span><br><span class="line">                         ;;</span><br><span class="line">        -b | --branch )  <span class="built_in">shift</span></span><br><span class="line">                         branch_name=<span class="variable">$1</span></span><br><span class="line">                         ;;</span><br><span class="line">        -v | --version ) <span class="built_in">shift</span></span><br><span class="line">                         version=<span class="variable">$1</span></span><br><span class="line">                         ;;</span><br><span class="line">        -h | --<span class="built_in">help</span> )    usage</span><br><span class="line">                         <span class="built_in">exit</span></span><br><span class="line">                         ;;</span><br><span class="line">        * )              usage</span><br><span class="line">                         <span class="built_in">echo</span> <span class="string">&quot;Error script parameters!&quot;</span></span><br><span class="line">                         <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$server_name</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The server name cannot empty, please input your project server name!&quot;</span></span><br><span class="line">    usage; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    branch_name=<span class="string">&quot;release&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> != <span class="string">&quot;master&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$branch_name</span>&quot;</span> != <span class="string">&quot;release&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error branch name, the right name should be &#x27;master&#x27; or &#x27;â &#x27;release&#x27;&quot;</span></span><br><span class="line">    usage; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check version number</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$version</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    version=<span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    version=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;version&#125;</span>&quot;</span> | sed -ne <span class="string">&#x27;s/[^0-9]*\(\([0-9]\.\)\&#123;0,4\&#125;[0-9][^.]\)\([^ ]*\).*/\1\3/p&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$version</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        version=<span class="string">&quot;latest&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">LAST_RUNNING_IMAGE=$(sudo docker ps -a | grep <span class="variable">$server_name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">LAST_IMAGE=$(sudo docker images -a | grep <span class="variable">$server_name</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop the previous image and remove it</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;LAST_RUNNING_IMAGE&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    sudo docker stop <span class="variable">$LAST_RUNNING_IMAGE</span></span><br><span class="line">    sudo docker rm <span class="variable">$LAST_RUNNING_IMAGE</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;LAST_IMAGE&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    sudo docker rmi <span class="variable">$LAST_IMAGE</span> --force</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">DEPLOY_PATH=<span class="string">&quot;/root/education-platform-deploy&quot;</span></span><br><span class="line">SERVER_PATH=<span class="variable">$&#123;DEPLOY_PATH&#125;</span>/<span class="variable">$&#123;server_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$SERVER_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   mkdir <span class="variable">$SERVER_PATH</span></span><br><span class="line">   rm <span class="variable">$SERVER_PATH</span>/*</span><br><span class="line">   cp <span class="variable">$DEPLOY_PATH</span>/Dockerfile <span class="variable">$SERVER_PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$SERVER_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   JAR_FILE=<span class="string">&quot;<span class="variable">$&#123;DEPLOY_PATH&#125;</span>/<span class="variable">$&#123;server_name&#125;</span>-<span class="variable">$&#123;version&#125;</span>.jar&quot;</span></span><br><span class="line">   mv <span class="variable">$JAR_FILE</span> <span class="variable">$SERVER_PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">IMAGE_NAME=<span class="string">&quot;online-edu/<span class="variable">$&#123;server_name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$version</span>&quot;</span> = <span class="string">&quot;latest&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    IMAGE=<span class="string">&quot;<span class="variable">$&#123;IMAGE_NAME&#125;</span>:<span class="variable">$&#123;branch_name&#125;</span>-<span class="variable">$&#123;version&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    DATE=$(date <span class="string">&#x27;+%Y%m%d%H%M%S&#x27;</span>)</span><br><span class="line">    IMAGE=<span class="string">&quot;<span class="variable">$&#123;IMAGE_NAME&#125;</span>:<span class="variable">$&#123;branch_name&#125;</span>-<span class="variable">$&#123;version&#125;</span>-<span class="variable">$&#123;DATE&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build a new image and run it.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sudo docker build -t <span class="variable">$IMAGE</span> <span class="variable">$SERVER_PATH</span>&quot;</span></span><br><span class="line">sudo docker build -t <span class="variable">$IMAGE</span> <span class="variable">$SERVER_PATH</span></span><br><span class="line">sudo docker run --detach --interactive --tty --net=host --name=<span class="variable">$server_name</span> <span class="string">&quot;<span class="variable">$&#123;IMAGE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Jenkins</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>git配置</title>
    <url>/2019/03/07/LEARN-GIT/</url>
    <content><![CDATA[<h2 id="LEARN-GIT-through-blog"><a href="#LEARN-GIT-through-blog" class="headerlink" title="LEARN GIT  through  blog"></a>LEARN GIT  <em>through  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000">blog</a></em></h2><hr>
<h3 id="install-the-git-bash"><a href="#install-the-git-bash" class="headerlink" title="install the git bash"></a>install the git bash</h3><p>linux: pacman -S git</p>
<hr>
<span id="more"></span>

<h3 id="basic-operation"><a href="#basic-operation" class="headerlink" title="basic operation"></a>basic operation</h3><ol>
<li><h4 id="single-simple-file-git"><a href="#single-simple-file-git" class="headerlink" title="single simple file git"></a>single simple file git</h4></li>
</ol>
<blockquote>
<ol>
<li><p>mkdir learn</p>
</li>
<li><p>cd learn</p>
</li>
<li><p>git init ,git config –global user.name=””,….user.email=”” ;  <strong>init repo and set name,pwd:</strong> </p>
</li>
<li><p>vim learn : <strong>create a file and use git to commit</strong> </p>
</li>
<li><p>git commit -m “writed some thing” : <strong>commit information</strong></p>
</li>
</ol>
</blockquote>
<ol start="2">
<li><h4 id="multiple-file"><a href="#multiple-file" class="headerlink" title="multiple file"></a>multiple file</h4></li>
</ol>
<blockquote>
<ol>
<li>git add file1</li>
<li>git add file2</li>
<li>git commit -m “multiply files”</li>
</ol>
</blockquote>
<ol start="3">
<li><h4 id="changed-file"><a href="#changed-file" class="headerlink" title="changed file"></a>changed file</h4></li>
</ol>
<blockquote>
<ol>
<li>git status :   <strong>if the file is changed,use this command to see status</strong></li>
<li>git diff readme.txt  : <strong>see the details of the chang</strong></li>
<li>git add readme.txt : <strong>upload</strong></li>
<li>git commit -m “changed”</li>
</ol>
</blockquote>
<ol start="4">
<li><h4 id="check-repo-history"><a href="#check-repo-history" class="headerlink" title="check repo history"></a>check repo history</h4></li>
</ol>
<blockquote>
<ol>
<li>git log</li>
</ol>
</blockquote>
<ol start="5">
<li><h4 id="roll-back"><a href="#roll-back" class="headerlink" title="roll back"></a>roll back</h4></li>
</ol>
<blockquote>
<ol>
<li>git reset –hard HEAD^         <strong>^:means your previous version==&gt;  ^^two previous version ==&gt; HEAD^^^ == HEAD~3</strong></li>
</ol>
</blockquote>
<ol start="6">
<li><h4 id="roll-to-future-version"><a href="#roll-to-future-version" class="headerlink" title="roll to future version"></a>roll to future version</h4></li>
</ol>
<blockquote>
<ol>
<li><p>git reset –hard 1094a  (if you remember the id of the target version)</p>
<p>regret and don’t know the version id: <strong>git reflog</strong>  </p>
<ol start="2">
<li>git reflog : command history</li>
</ol>
</li>
</ol>
</blockquote>
<ol start="7">
<li><h4 id="redo-after-commiting-or-adding-amp-amp-not-pushing-to-the-remote-repository"><a href="#redo-after-commiting-or-adding-amp-amp-not-pushing-to-the-remote-repository" class="headerlink" title="redo after commiting or adding &amp;&amp; not pushing to the remote repository"></a>redo after commiting or adding &amp;&amp; not pushing to the remote repository</h4></li>
</ol>
<blockquote>
<ol>
<li>git checkout – readme.txt  <strong>(!!!not –readme.txt  It means switching to another branch)</strong></li>
<li>or use: git reset HEAD readme.txt</li>
</ol>
</blockquote>
<ol start="8">
<li><h4 id="delete-file"><a href="#delete-file" class="headerlink" title="delete file"></a>delete file</h4></li>
</ol>
<blockquote>
<ol>
<li>rm test.txt</li>
<li>git rm test.txt</li>
<li>git commit -m “”</li>
</ol>
</blockquote>
<hr>
<h3 id="remote-repository"><a href="#remote-repository" class="headerlink" title="remote repository"></a>remote repository</h3><ol>
<li><h4 id="how-to-connect-to-a-remote-reposity"><a href="#how-to-connect-to-a-remote-reposity" class="headerlink" title="how to connect to a remote reposity"></a>how to connect to a remote reposity</h4><ol>
<li> ssh-keygen -t ras -C “<a href="mailto:&#x74;&#x61;&#115;&#x73;&#x61;&#x73;&#115;&#x69;&#110;&#x40;&#115;&#x69;&#110;&#97;&#46;&#99;&#x6f;&#109;">&#x74;&#x61;&#115;&#x73;&#x61;&#x73;&#115;&#x69;&#110;&#x40;&#115;&#x69;&#110;&#97;&#46;&#99;&#x6f;&#109;</a>“ :  <strong>default directory is /user/home/.ssh</strong></li>
</ol>
<p><strong>​    then copy the id_ras.pub to you github !</strong></p>
<ol start="2">
<li>git remote add origin <a href="https://github.com/MOIPA/tmp.git">https://github.com/MOIPA/tmp.git</a></li>
<li><strong>git push -u origin master</strong>     //push content to remote server do it when every local changed </li>
</ol>
</li>
<li><h4 id="how-to-git-clone"><a href="#how-to-git-clone" class="headerlink" title="how to git clone"></a>how to git clone</h4><ol>
<li>git clone <a href="http://github.com/MPOIA/javaEE">http://github.com/MPOIA/javaEE</a></li>
</ol>
</li>
<li><h4 id="how-to-clone-specific-branch"><a href="#how-to-clone-specific-branch" class="headerlink" title="how to clone specific branch"></a>how to clone specific branch</h4><ol>
<li>git clone -b “branch” “url”</li>
</ol>
</li>
<li><h4 id="how-to-pull-specific-branch"><a href="#how-to-pull-specific-branch" class="headerlink" title="how to pull specific branch"></a>how to pull specific branch</h4><ol>
<li>git checkout -b 本地分支名 origin/远程分支名</li>
</ol>
</li>
</ol>
<h3 id="branches"><a href="#branches" class="headerlink" title="branches"></a>branches</h3><ol>
<li>git checkout -b branchName(-b : create a branch and switch to it)<br>​    -b :equals two command:<br>​            a: git branch bname<br>​            b: git checkout bname</li>
<li>git branch (see branches)</li>
<li>connflicts: solve it in person<br>​    a:git status : show conflicted files<br>b:vim conflicted files: show details<br>c: git log –graph –pretty=oneline –abbrev-commit  :show branches merge status</li>
<li>git merge –no-ff : use this argument can show merge history in git graph command</li>
<li> force delete unmerged branches : git branch -D bName</li>
</ol>
<h3 id="git-stash-used-to-store-the-context"><a href="#git-stash-used-to-store-the-context" class="headerlink" title="git stash (used to store the context)"></a>git stash (used to store the context)</h3><ol>
<li>when developing in dev branch, a bug in master branch need to be solved.     2. git stash in dev branch     3. git checkout -b issue-101 to create a bugfix branch     4. after fixed, git checkout master then: git merge -m “bug fix issue 101” issue-101     5. git checkout dev , git stash pop to continue    **conclusion: it is used for clean git , because you can’t push when have some unfinished work **</li>
</ol>
<h3 id="git-push-amp-git-pull"><a href="#git-push-amp-git-pull" class="headerlink" title="git push &amp; git pull"></a>git push &amp; git pull</h3><ol>
<li><p>git push origin(default name of remote repository) &lt;branch&gt;(can be master or other banch name)     2. if push failed,use <strong>git pull</strong> to get the newest update and solve the conflict     3. git pull  : if failed and shows no tracking information use **git branch –set-upstream-to=origin/&lt;branch&gt; localBranchName</p>
<pre><code>          ​            it failed because u don&#39;t connect ur local dev to remote dev
</code></pre>
<p>team work:</p>
<p>when work with a team, members only can get master branch and it’s default name is origin<br>now if we want to get a remote branch like dev: <strong>git checkout -b &lt;lbname&gt; origin/&lt;bname&gt;</strong></p>
<h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3></li>
<li><p>make the git history become a straight line</p>
</li>
</ol>
<hr>
<h3 id="TAG-convient-for-managing-one-tag-means-one-release"><a href="#TAG-convient-for-managing-one-tag-means-one-release" class="headerlink" title="TAG  convient for managing (one tag means one release)"></a>TAG  convient for managing (one tag means one release)</h3><ol>
<li><h4 id="create-tag"><a href="#create-tag" class="headerlink" title="create tag"></a>create tag</h4><ol>
<li>git tag v1.0</li>
<li>git tag : show tags</li>
</ol>
</li>
<li><h4 id="create-tag-for-old-version"><a href="#create-tag-for-old-version" class="headerlink" title="create tag for old version"></a>create tag for old version</h4><ol>
<li>git tag v0.1 &lt;71180d&gt;</li>
</ol>
</li>
<li><h4 id="show-tag-details"><a href="#show-tag-details" class="headerlink" title="show tag details"></a>show tag details</h4><ol>
<li>git show &lt;v0.1&gt;</li>
</ol>
</li>
<li><h4 id="create-a-tag-with-a-readme"><a href="#create-a-tag-with-a-readme" class="headerlink" title="create a tag with a readme"></a>create a tag with a readme</h4><ol>
<li>git tag -a v0.8 -m “merged something” &lt;0123d&gt;</li>
</ol>
</li>
<li><h4 id="delete-a-tag"><a href="#delete-a-tag" class="headerlink" title="delete a tag"></a>delete a tag</h4><ol>
<li>git tag -d v0.1</li>
</ol>
</li>
<li><h4 id="push-tag-to-remote"><a href="#push-tag-to-remote" class="headerlink" title="push tag to remote"></a>push tag to remote</h4><ol>
<li>git push origin v1.0  :push one tag</li>
<li>git push origin –tags :push all tags</li>
</ol>
</li>
<li><h4 id="delete-tag-of-remote"><a href="#delete-tag-of-remote" class="headerlink" title="delete tag of remote"></a>delete tag of remote</h4><ol>
<li>git tag -d v1.0  (delete on local first)</li>
<li>git push origin :refs/tags/v0.9   (inform remote)</li>
</ol>
</li>
</ol>
<h3 id="if-want-to-synchronize-my-respository-to-github-and-gitee"><a href="#if-want-to-synchronize-my-respository-to-github-and-gitee" class="headerlink" title="if want to synchronize my respository to github and gitee"></a>if want to synchronize my respository to github and gitee</h3><ol>
<li>git remote -v </li>
<li>git remote rm origin</li>
<li>git remote add github <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;</a>:MOIPA/REpo.git</li>
<li>git remote add gitee <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#x2e;&#x63;&#111;&#109;</a>:MOIPA/REpo.git </li>
</ol>
<p>** if want to push to these two server **</p>
<ol>
<li>git push github master</li>
<li>git push gitee master</li>
</ol>
<hr>
<h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><ol>
<li>git config –global color.ui true (high light color)</li>
<li>config some files won’t commited to git<br>   a: create a file .gitignore (store somefile names which will not be committed)<br>   b: the file module can be download at <em><a href="https://github.com/github/gitignore">officialSite</a></em></li>
<li>configure alias:<br>  ​    git config –global alias.&lt;st&gt; status</li>
<li><strong>one good example:</strong><br>   git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</li>
<li><strong>notice</strong><br> all the configure are stored in .git/config</li>
</ol>
<hr>
<h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h3><ol>
<li><h4 id="switch-to-ssh-instead-of-https"><a href="#switch-to-ssh-instead-of-https" class="headerlink" title="switch to ssh instead of https"></a>switch to ssh instead of https</h4><ol>
<li>git remote -v : see connection </li>
<li>git remote rm oringin :clear connection</li>
<li>git remote add oringin <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a>:MOIPA/REpo.git</li>
</ol>
</li>
<li><h4 id="error-when-test-SSH-connection"><a href="#error-when-test-SSH-connection" class="headerlink" title="error when test SSH connection"></a>error when test SSH connection</h4><ol>
<li>ssh -t github.com  : denied</li>
<li>solution : ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</li>
<li>then git push -u origin master</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>LayUi 数据表格</title>
    <url>/2020/04/21/LayUi-%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h3 id="LayUi-数据表格学习"><a href="#LayUi-数据表格学习" class="headerlink" title="LayUi 数据表格学习"></a>LayUi 数据表格学习</h3><p>数据绑定，动态数据绑定，监听</p>
<span id="more"></span>


<p>引入官方css和js</p>
<h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p>**的layui官方，文档给的例子居然不能用。</p>
<ol>
<li><p>前端页面中写出table即可</p>
<pre><code> &lt;table id=&quot;pic-mod-table&quot;&gt;&lt;/table&gt;
 
</code></pre>
</li>
<li><p>后端初始化数据</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图模信息展示</span></span><br><span class="line">   table.render(&#123;</span><br><span class="line">       <span class="attr">elem</span>: <span class="string">&#x27;#pic-mod-table&#x27;</span></span><br><span class="line">       ,<span class="attr">height</span>: <span class="number">312</span></span><br><span class="line">       ,<span class="attr">url</span>: applicationUtil.gatewayURL+<span class="string">&#x27;/pssc-graph/graph/graph-name&#x27;</span> <span class="comment">//数据接口</span></span><br><span class="line">       ,<span class="attr">response</span>: &#123;</span><br><span class="line">           <span class="attr">statusCode</span>: <span class="number">200</span> <span class="comment">//规定成功的状态码，默认：0</span></span><br><span class="line">           ,<span class="attr">countName</span>: <span class="string">&#x27;totalCount&#x27;</span> <span class="comment">//规定数据总数的字段名称，默认：count</span></span><br><span class="line">           ,<span class="attr">dataName</span>: <span class="string">&#x27;list&#x27;</span> <span class="comment">//规定数据列表的字段名称，默认：data</span></span><br><span class="line">       &#125;</span><br><span class="line">       ,<span class="attr">limit</span>: <span class="number">20</span></span><br><span class="line">       ,<span class="attr">parseData</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123; <span class="comment">//res 即为原始返回的数据</span></span><br><span class="line">           <span class="built_in">console</span>.log(res.data.list);</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="string">&quot;code&quot;</span>: res.code, <span class="comment">//解析接口状态</span></span><br><span class="line">               <span class="string">&quot;msg&quot;</span>: res.msg, <span class="comment">//解析提示文本</span></span><br><span class="line">               <span class="string">&quot;totalCount&quot;</span>: res.data.totalCount, <span class="comment">//解析数据长度</span></span><br><span class="line">               <span class="comment">// &quot;count&quot;: 19, //解析数据长度</span></span><br><span class="line">               <span class="string">&quot;list&quot;</span>: res.data.list <span class="comment">//解析数据列表</span></span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">       ,<span class="attr">totalRow</span>:<span class="literal">true</span></span><br><span class="line">       ,<span class="attr">page</span>: <span class="literal">true</span> <span class="comment">//开启分页</span></span><br><span class="line">       ,<span class="attr">cols</span>: [[ <span class="comment">//表头</span></span><br><span class="line">           &#123;<span class="attr">field</span>: <span class="string">&#x27;objId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">fixed</span>: <span class="string">&#x27;left&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>&#125;</span><br><span class="line">           ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模标识&#x27;</span>&#125;</span><br><span class="line">           ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphName&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模名称&#x27;</span>&#125;</span><br><span class="line">           ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphType&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模类型&#x27;</span>&#125;</span><br><span class="line">           ,&#123;<span class="attr">field</span>: <span class="string">&#x27;createTime&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;创建时间&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>&#125;</span><br><span class="line">           ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphVersion&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模版本&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>&#125;</span><br><span class="line">       ]]</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p>如果不用数据接口：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">layui.use(<span class="string">&#x27;table&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> table = layui.table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图模信息展示</span></span><br><span class="line">    table.render(&#123;</span><br><span class="line">        <span class="attr">elem</span>: <span class="string">&#x27;#pic-mod-table&#x27;</span></span><br><span class="line">        ,<span class="attr">height</span>: <span class="number">312</span></span><br><span class="line">        ,<span class="attr">url</span>: applicationUtil.gatewayURL+<span class="string">&#x27;/pssc-graph/graph/graph-name&#x27;</span> <span class="comment">//数据接口</span></span><br><span class="line">        <span class="comment">// ,parseData: function(res)&#123; //res 即为原始返回的数据</span></span><br><span class="line">        <span class="comment">//     console.log(res.data.list);</span></span><br><span class="line">        <span class="comment">//     return &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;code&quot;: res.code, //解析接口状态</span></span><br><span class="line">        <span class="comment">//         &quot;msg&quot;: res.msg, //解析提示文本</span></span><br><span class="line">        <span class="comment">//         &quot;count&quot;: res.data.totalCount, //解析数据长度</span></span><br><span class="line">        <span class="comment">//         // &quot;count&quot;: 19, //解析数据长度</span></span><br><span class="line">        <span class="comment">//         &quot;data&quot;: res.data.list //解析数据列表</span></span><br><span class="line">        <span class="comment">//     &#125;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        ,<span class="attr">page</span>: <span class="literal">true</span> <span class="comment">//开启分页</span></span><br><span class="line">        ,<span class="attr">cols</span>: [[ <span class="comment">//表头</span></span><br><span class="line">            &#123;<span class="attr">field</span>: <span class="string">&#x27;objId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">fixed</span>: <span class="string">&#x27;left&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模标识&#x27;</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphName&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模名称&#x27;</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphType&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模类型&#x27;</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">field</span>: <span class="string">&#x27;createTime&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;创建时间&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">field</span>: <span class="string">&#x27;graphVersion&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模版本&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]]</span><br><span class="line">        ,<span class="attr">data</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;objId&quot;</span>: <span class="string">&quot;AC8B1950-A1AE-4455-9165-5C1B53BBB04C&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphId&quot;</span>: <span class="string">&quot;灵武变525绒化线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphName&quot;</span>: <span class="string">&quot;灵武变525绒化线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphType&quot;</span>: <span class="string">&quot;黑图&quot;</span>,</span><br><span class="line">                <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-04-20 14:05:48&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphVersion&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="string">&quot;graphCount&quot;</span>: <span class="number">4</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;objId&quot;</span>: <span class="string">&quot;36096914-967B-4ADD-BAB4-FF8A87FE69AF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphId&quot;</span>: <span class="string">&quot;上前城变524上丽二回线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphName&quot;</span>: <span class="string">&quot;上前城变524上丽二回线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphType&quot;</span>: <span class="string">&quot;黑图&quot;</span>,</span><br><span class="line">                <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-04-15 17:47:28&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphVersion&quot;</span>: <span class="number">46</span>,</span><br><span class="line">                <span class="string">&quot;graphCount&quot;</span>: <span class="number">42</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;objId&quot;</span>: <span class="string">&quot;685B5AF2-603A-4823-AAC0-94574159DFD2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphId&quot;</span>: <span class="string">&quot;金沙渠变515金林一回线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphName&quot;</span>: <span class="string">&quot;金沙渠变515金林一回线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphType&quot;</span>: <span class="string">&quot;黑图&quot;</span>,</span><br><span class="line">                <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-04-15 17:45:47&quot;</span>,</span><br><span class="line">                <span class="string">&quot;graphVersion&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="string">&quot;graphCount&quot;</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>数据接口json格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;totalCount&quot;</span>: <span class="number">40</span>,</span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;totalPage&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;currPage&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;objId&quot;</span>: <span class="string">&quot;7CD70357-39B2-4241-BB1B-FA0F8D05D58D&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphId&quot;</span>: <span class="string">&quot;10kV燕鸽变528大新线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphName&quot;</span>: <span class="string">&quot;10kV燕鸽变528大新线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphType&quot;</span>: <span class="string">&quot;黑图&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span>: <span class="string">&quot;2020-04-14 16:10:49&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphVersion&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;graphCount&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;objId&quot;</span>: <span class="string">&quot;1128F8B4-947D-4111-9AE0-1B77E05DB0C0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphId&quot;</span>: <span class="string">&quot;10kV兴泾变523芦植线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphName&quot;</span>: <span class="string">&quot;10kV兴泾变523芦植线单线图.sln&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphType&quot;</span>: <span class="string">&quot;黑图&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span>: <span class="string">&quot;2020-04-14 16:10:38&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;graphVersion&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;graphCount&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p><code>table.render(ele....,,);</code></p>
<p><code>elem：&quot;#id&quot;</code>: 对应html的标签</p>
<p><code>height</code>: 自设定高度</p>
<p><code>url</code>: 后端数据接口</p>
<p><code>method</code>: 可选post或者get</p>
<p><code>where</code>: post负载的数据</p>
<p><code>dataType:&quot;json&quot;</code>: 传入的数据类型</p>
<p><code>page:true</code>: 开启分页</p>
<p><code>limit:20</code>: 分页数量</p>
<p><code> done:function (res,curr,count) &#123;&#125;</code>: 渲染完成执行的回调函数</p>
<h4 id="表格自适应问题"><a href="#表格自适应问题" class="headerlink" title="表格自适应问题"></a>表格自适应问题</h4><ul>
<li><p><code>height</code> 参数如若填写为 <code>&#39;full-20&#39;</code> 可以自动变为自适应，这是官方自带的参数，表示除了表格外留出20像素，<code>&#39;full-xx&#39;</code>根据自己页面调节。然而这种方式存在一个缺点，当页面存在两个数据表格上下布局时只能存在一个。</p>
</li>
<li><p><code>height</code> ：推荐的自适应。将<code>height</code>写为一个页面大小的比例值，然后监听页面拉伸事件，代码如下：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">layui.use([<span class="string">&#x27;form&#x27;</span>, <span class="string">&#x27;table&#x27;</span>, <span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;upload&#x27;</span>,<span class="string">&#x27;restClient&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> form = layui.form;</span><br><span class="line">    <span class="keyword">var</span> allHeight = $(<span class="string">&#x27;.layui-body&#x27;</span>).height()-<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">var</span> offsetPercent = (allHeight-<span class="number">70</span>)/allHeight</span><br><span class="line">    allHeight *= offsetPercent;</span><br><span class="line">    <span class="keyword">var</span> halfHeight = allHeight/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> lay_off_size = halfHeight</span><br><span class="line">    $(<span class="string">&#x27;.layui-upload-list&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, allHeight*<span class="number">0.994</span>-$(<span class="string">&quot;#upload&quot;</span>).height());</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自适应问题</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        allHeight =$(<span class="string">&#x27;.layui-body&#x27;</span>).height()-<span class="number">15</span>;</span><br><span class="line">        offsetPercent = (allHeight-<span class="number">70</span>)/allHeight</span><br><span class="line">        allHeight *= offsetPercent;</span><br><span class="line">        halfHeight = allHeight/<span class="number">2</span>;</span><br><span class="line">        $(<span class="string">&#x27;.layui-upload-list&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, allHeight*<span class="number">0.994</span>-$(<span class="string">&quot;#upload&quot;</span>).height());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// resize all table</span></span><br><span class="line">        table.reload(<span class="string">&#x27;pic-mod-table&#x27;</span>, &#123;</span><br><span class="line">           <span class="attr">height</span>:halfHeight</span><br><span class="line">        &#125;);</span><br><span class="line">        table.reload(<span class="string">&#x27;task-pic-mod-table&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">height</span>:halfHeight</span><br><span class="line">        &#125;);</span><br><span class="line">        table.reload(<span class="string">&#x27;his-pic-mod-table&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">height</span>:halfHeight</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//监听行单击图模事件</span></span><br><span class="line">    table.on(<span class="string">&#x27;row(pic-mod-table)&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// (obj.tr) //得到当前行元素对象</span></span><br><span class="line">        <span class="comment">// layer.msg(JSON.stringify(obj.data));</span></span><br><span class="line">        <span class="comment">// 渲染历史表格</span></span><br><span class="line">        his_table_render(obj.data,halfHeight);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 图模历史版本信息展示</span></span><br><span class="line">    <span class="keyword">var</span> his_table_render = <span class="function"><span class="keyword">function</span> (<span class="params">data,height</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// layer.msg(data);</span></span><br><span class="line">        table.render(&#123;</span><br><span class="line">            <span class="attr">elem</span>: <span class="string">&#x27;#his-pic-mod-table&#x27;</span></span><br><span class="line">            <span class="comment">// , height: 312</span></span><br><span class="line">            , <span class="attr">url</span>: applicationUtil.gatewayURL + <span class="string">&#x27;/pssc-graph/graph/show-history&#x27;</span> <span class="comment">//数据接口</span></span><br><span class="line">            , <span class="attr">where</span>: data   <span class="comment">// 对象参数</span></span><br><span class="line">            , <span class="attr">page</span>: <span class="literal">true</span> <span class="comment">//开启分页</span></span><br><span class="line">            , <span class="attr">response</span>: &#123;</span><br><span class="line">                <span class="attr">statusCode</span>: <span class="number">200</span> <span class="comment">//规定成功的状态码，默认：0</span></span><br><span class="line">                , <span class="attr">countName</span>: <span class="string">&#x27;totalCount&#x27;</span> <span class="comment">//规定数据总数的字段名称，默认：count</span></span><br><span class="line">                , <span class="attr">dataName</span>: <span class="string">&#x27;list&#x27;</span> <span class="comment">//规定数据列表的字段名称，默认：data</span></span><br><span class="line">            &#125;</span><br><span class="line">            , <span class="attr">height</span>: height</span><br><span class="line">            , <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            , <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">            , <span class="attr">limit</span>: <span class="number">20</span></span><br><span class="line">            , <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">            , <span class="attr">parseData</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">//res 即为原始返回的数据</span></span><br><span class="line">                <span class="comment">// console.log(res.data.list);</span></span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="string">&quot;code&quot;</span>: res.code, <span class="comment">//解析接口状态</span></span><br><span class="line">                    <span class="string">&quot;msg&quot;</span>: res.msg, <span class="comment">//解析提示文本</span></span><br><span class="line">                    <span class="string">&quot;totalCount&quot;</span>: res.data.totalCount, <span class="comment">//解析数据长度</span></span><br><span class="line">                    <span class="comment">// &quot;count&quot;: 19, //解析数据长度</span></span><br><span class="line">                    <span class="string">&quot;list&quot;</span>: res.data.list <span class="comment">//解析数据列表</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            , <span class="attr">cols</span>: [[ <span class="comment">//表头</span></span><br><span class="line">                &#123;<span class="attr">field</span>: <span class="string">&#x27;id&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">fixed</span>: <span class="string">&#x27;left&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>,<span class="attr">width</span>:<span class="string">&#x27;5%&#x27;</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                , &#123;<span class="attr">field</span>: <span class="string">&#x27;objId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模ID&#x27;</span>,<span class="attr">width</span>:<span class="string">&#x27;20%&#x27;</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模标识&#x27;</span>,<span class="attr">width</span>:<span class="string">&#x27;20%&#x27;</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                , &#123;</span><br><span class="line">                    <span class="attr">field</span>: <span class="string">&#x27;graphName&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模名称&#x27;</span>,<span class="attr">width</span>:<span class="string">&#x27;20%&#x27;</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span> ,<span class="attr">templet</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;&lt;span style=&quot;color: #339A96;&quot;&gt;&#x27;</span> + d.graphName + <span class="string">&#x27;&lt;/span&gt;&#x27;</span></span><br><span class="line">                        <span class="comment">// return &#x27;&lt;button class=&quot;layui-btn&quot; lay-submit lay-filter=&quot;search-graph&quot; onclick=&quot;showGraph()&quot;&gt;&#x27; + d.graphName + &#x27;&lt;/button&gt;&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphType&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模类型&#x27;</span>,<span class="attr">width</span>:<span class="string">&#x27;8%&#x27;</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                , &#123;<span class="attr">field</span>: <span class="string">&#x27;createTime&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;创建时间&#x27;</span>,<span class="attr">width</span>:<span class="string">&#x27;15%&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphVersion&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模版本&#x27;</span>, <span class="attr">width</span>:<span class="string">&#x27;13%&#x27;</span>,<span class="attr">sort</span>: <span class="literal">true</span>,<span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">            ]]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端layui界面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图模导入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../assets/libs/layui/css/layui.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../assets/module/admin.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../assets/css/theme.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;layui-body&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 0px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin:10px;margin-top:0px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-left:10px;padding-top:5px;padding-bottom: 0px;padding-right: 10px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-fluid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding:0px;margin: 0px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md8&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 2px;&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;search-text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;图像名称&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px;&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">lay-submit</span> <span class="attr">lay-filter</span>=<span class="string">&quot;search-graph&quot;</span>&gt;</span>查询</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;</span>重置</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: -14px;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;pic-mod-table&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;pic-mod-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span><span class="attr">style</span>=<span class="string">&quot;margin-top: 11px;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;his-pic-mod-table&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;his-pic-mod-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md4&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--                &lt;label class=&quot;layui-form-label&quot;&gt;添加附件：&lt;/label&gt;--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filePath&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filePath&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline shangc_txt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px;padding-left: 10px;width: 100%&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload-svg-btn&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon&quot;</span>&gt;</span><span class="symbol">&amp;#xe67c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>选择文件</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload-list&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #D9D9D9;width: 98%&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding:0px;margin: 0px;overflow-y: auto;margin-top: 2px;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件大小<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;upload-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-disabled&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/libs/layui/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/libs/jquery/jquery-3.2.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/js/applicationUtil.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/graph.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LayUi</category>
      </categories>
      <tags>
        <tag>LayUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui事件监听</title>
    <url>/2020/06/13/Layui%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<h3 id="Layui事件监听"><a href="#Layui事件监听" class="headerlink" title="Layui事件监听"></a>Layui事件监听</h3><span id="more"></span>

<ol>
<li>官方提供了elemen.on和filter操作，但是公司统一监听为如下形式。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">data-method</span>=<span class="string">&quot;functionConfig&quot;</span> <span class="attr">title</span>=<span class="string">&quot;功能配置&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px;&quot;</span>&gt;</span>功能配置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;form&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">..................</span><br><span class="line"> $(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;.btn,.layui-btn&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> othis = $(<span class="built_in">this</span>), method = othis.data(<span class="string">&#x27;method&#x27;</span>);</span><br><span class="line">            active[method] ? active[method].call(<span class="built_in">this</span>, othis) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> active=&#123;</span><br><span class="line">     <span class="attr">functionConfig</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui字符数组超出表格问题</title>
    <url>/2020/06/20/Layui%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E8%B6%85%E5%87%BA%E8%A1%A8%E6%A0%BC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="内容溢出问题"><a href="#内容溢出问题" class="headerlink" title="内容溢出问题"></a>内容溢出问题</h3><span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.layui-table-cell</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: initial;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.layui-table-cell</span>, <span class="selector-class">.layui-table-tool-panel</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: initial;</span></span><br><span class="line"><span class="css">            <span class="comment">/*为了让字母和数字也换行*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">word-break</span>: break-word;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LayUi</category>
      </categories>
      <tags>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui时间判断和前端转义</title>
    <url>/2020/06/09/Layui%E6%97%B6%E9%97%B4%E5%88%A4%E6%96%AD%E5%92%8C%E5%89%8D%E7%AB%AF%E8%BD%AC%E4%B9%89/</url>
    <content><![CDATA[<h4 id="Layui-前端防止sql注入"><a href="#Layui-前端防止sql注入" class="headerlink" title="Layui 前端防止sql注入"></a>Layui 前端防止sql注入</h4><span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.cmsId1 = a.cmsId1.replace(<span class="regexp">/null|select|update|delete|exec|count|&#x27;|&quot;|=|;|&gt;|&lt;|%|-/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="built_in">console</span>.log(d);<span class="keyword">return</span> <span class="string">&#x27;\\\\&#x27;</span>+d&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="时间判断"><a href="#时间判断" class="headerlink" title="时间判断"></a>时间判断</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid&quot;</span>&gt;</span>现场送电时间<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                                               <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;Wdate layui-input planOffStartTime-style pssc-color&quot;</span></span></span><br><span class="line"><span class="tag">                                                      <span class="attr">id</span>=<span class="string">&quot;sceneStartDate&quot;</span></span></span><br><span class="line"><span class="tag">                                                      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;WdatePicker(&#123;dateFmt:&#x27;yyyy-MM-dd HH:mm:ss&#x27;,startDate:&#x27;%y-%M-%d 00:00:00&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                                                  isShowToday:false,onpicked: active.getSendStartTime&#125;)&quot;</span> <span class="attr">data-form</span>=<span class="string">&quot;formed&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">                                           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getTOutageStartTime</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;#stopEndDate&quot;</span>).val() == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;#stopEndDate&quot;</span>).val() != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>($(<span class="string">&quot;#outageStartTime&quot;</span>).val()) &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>($(<span class="string">&quot;#stopEndDate&quot;</span>).val())) &#123;</span><br><span class="line">                layer.msg(<span class="string">&#x27;停电结束时间应大于停电开始时间！&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">icon</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">time</span>: <span class="number">2000</span></span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">&quot;#outageStartTime&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getTOutageEndTime</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;#outageStartTime&quot;</span>).val() == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;#outageStartTime&quot;</span>).val() != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>($(<span class="string">&quot;#outageStartTime&quot;</span>).val()) &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>($(<span class="string">&quot;#stopEndDate&quot;</span>).val())) &#123;</span><br><span class="line">                layer.msg(<span class="string">&#x27;停结束时间应大于停电开始时间！&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">icon</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">time</span>: <span class="number">2000</span></span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">&quot;#stopEndDate&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LayUi</category>
      </categories>
      <tags>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题 02 array + 回溯</title>
    <url>/2021/04/08/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%98-02-array-%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="Combination-Sum-39"><a href="#Combination-Sum-39" class="headerlink" title="Combination Sum 39"></a>Combination Sum 39</h1><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSum39</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> Solution().combinationSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>&#125;, <span class="number">9</span>);</span><br><span class="line">        lists.forEach(System.out::println);</span><br><span class="line">        System.out.println(lists.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目：用给的数组 拼成目标数，数组的数可以被使用多次</span></span><br><span class="line"><span class="comment">     * Input: candidates = [2,3,6,7], target = 7</span></span><br><span class="line"><span class="comment">     * Output: [[2,2,3],[7]]</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：留一个list用于记录使用过的数，递归，每次遍历数组的数，用target减去，如果为0说明路径可行，添加</span></span><br><span class="line"><span class="comment">     * 但是只这样的话，结果会有重复，为了不重复，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            generatePath(Arrays.stream(candidates).sorted().toArray(), <span class="number">0</span>, target, <span class="keyword">new</span> LinkedList&lt;&gt;(), res);</span><br><span class="line"><span class="comment">//            res.stream().forEach(x -&gt; x.sort(Comparator.comparingInt(x2 -&gt; x2)));</span></span><br><span class="line"><span class="comment">//            return res.stream().distinct().collect(Collectors.toList());</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generatePath</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> start, <span class="keyword">int</span> target, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; allPath)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> deletedLastPath = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target - candidates[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    path.add(candidates[i]);</span><br><span class="line">                    allPath.add(<span class="keyword">new</span> LinkedList&lt;&gt;(path));</span><br><span class="line">                    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target - candidates[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    path.add(candidates[i]);</span><br><span class="line">                    generatePath(candidates, i, target - candidates[i], path, allPath);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!deletedLastPath) &#123;</span><br><span class="line">                        <span class="comment">// 本层结束后删除本层添加的节点</span></span><br><span class="line">                        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                        deletedLastPath = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Combination-Sum-II-40"><a href="#Combination-Sum-II-40" class="headerlink" title="Combination Sum II 40"></a>Combination Sum II 40</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSumII40</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> Solution().combinationSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, <span class="number">2</span>);</span><br><span class="line">        lists.forEach(System.out::println);</span><br><span class="line">        System.out.println(lists.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目：用给的数组 拼成目标数，数组的数可以使用一次  39题的加强版</span></span><br><span class="line"><span class="comment">     * Input: candidates = [2,3,6,7], target = 7</span></span><br><span class="line"><span class="comment">     * Output: [[2,2,3],[7]]</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：留一个list用于记录使用过的数，递归，每次遍历数组的数，用target减去，如果为0说明路径可行，添加</span></span><br><span class="line"><span class="comment">     * 但是只这样的话，结果会有重复，为了不重复，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 和 39 题对比 ，为了防止重复 先排序，后再在循环中跳过重复字符。</span></span><br><span class="line"><span class="comment">     * 为了每个字符只使用一次，排序后下一层传递的开始值为当前值+1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Runtime: 6 ms, faster than 28.62% of Java online submissions for Combination Sum II.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 39.5 MB, less than 22.30% of Java online submissions for Combination Sum II.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            generatePath(Arrays.stream(candidates).sorted().toArray(), <span class="number">0</span>, target, <span class="keyword">new</span> LinkedList&lt;&gt;(), res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generatePath</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> start, <span class="keyword">int</span> target, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; allPath)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target - candidates[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    path.add(candidates[i]);</span><br><span class="line">                    allPath.add(<span class="keyword">new</span> LinkedList&lt;&gt;(path));</span><br><span class="line">                    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target - candidates[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    path.add(candidates[i]);</span><br><span class="line">                    generatePath(candidates, i + <span class="number">1</span>, target - candidates[i], path, allPath);</span><br><span class="line">                    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 为了防止重复 跳到最后一个不一致的</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; candidates.length - <span class="number">1</span> &amp;&amp; candidates[i] == candidates[i + <span class="number">1</span>]) i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="First-Missing-Positive-41"><a href="#First-Missing-Positive-41" class="headerlink" title="First Missing Positive 41"></a>First Missing Positive 41</h1><p>hard题</p>
<p>网上找的图<br><img src="/images/pasted-47.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">               <span class="comment">// 换</span></span><br><span class="line">               <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span> &amp;&amp; nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= nums.length &amp;&amp; nums[i] != nums[nums[i] - <span class="number">1</span>]) &#123;</span><br><span class="line">                   swap(nums, i, nums[i] - <span class="number">1</span>);</span><br><span class="line">                   i--;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 桶排序后的数组顺序遍历不满足nums[i]= i+1的就是</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> nums.length + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> tmp = nums[a];</span><br><span class="line">           nums[a] = nums[b];</span><br><span class="line">           nums[b] = tmp;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题 03 动规 指针</title>
    <url>/2021/04/09/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%98-03-%E5%8A%A8%E8%A7%84-%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="Trapping-rain-water-hard"><a href="#Trapping-rain-water-hard" class="headerlink" title="Trapping rain water   -hard"></a>Trapping rain water   -hard</h1><p>三种解题方法和思路，最好的80%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrappingRainWater42</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution3().trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 涉及数组 动规 双指针</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：首先找到最高点，分别向左右两边找第二高的点，找到第二高的点，将第二高的值减去包裹的所有高度，</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Runtime: 2 ms, faster than 21.28% of Java online submissions for Trapping Rain Water.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 38.3 MB, less than 86.97% of Java online submissions for Trapping Rain Water.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> doTrap(height, <span class="number">0</span>, height.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doTrap</span><span class="params">(<span class="keyword">int</span>[] height, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt;= end - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> heighestIndex = findMaxIndex(height, start, end, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> totalWater = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> leftSecondHeightIndex = findMaxIndex(height, start, heighestIndex - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> rightSecondHeightIndex = findMaxIndex(height, heighestIndex + <span class="number">1</span>, end, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 找到左边包含水源</span></span><br><span class="line">            <span class="keyword">if</span> (leftSecondHeightIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = leftSecondHeightIndex + <span class="number">1</span>; i &lt;= heighestIndex - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    totalWater += height[leftSecondHeightIndex] - height[i];</span><br><span class="line">                &#125;</span><br><span class="line">                totalWater += doTrap(height, start, leftSecondHeightIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到右边包含水源</span></span><br><span class="line">            <span class="keyword">if</span> (rightSecondHeightIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = heighestIndex + <span class="number">1</span>; i &lt;= rightSecondHeightIndex - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    totalWater += height[rightSecondHeightIndex] - height[i];</span><br><span class="line">                &#125;</span><br><span class="line">                totalWater += doTrap(height, rightSecondHeightIndex, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> totalWater;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 找到最高点的下标</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> direction 靠近哪边的最高点，因为可能有高度相同， 1：表示靠近右边的最大值，0表示靠近左边的最大值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMaxIndex</span><span class="params">(<span class="keyword">int</span>[] height, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> direction)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 相邻的两个墙壁找最高无意义</span></span><br><span class="line">            <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="keyword">if</span> (direction == <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = start;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (height[tmp] &lt; height[i]) tmp = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = end;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = end; i &gt;= start; i--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (height[tmp] &lt; height[i]) tmp = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一种太慢，换种，两个指针，一个头，一个尾 都不为0，左指针又走到比自身大的，右指针左走到比自己大的，分别计算两个指针刚刚和现在的位置包含的水量。</span></span><br><span class="line"><span class="comment">     * 直到左右指针相遇结束</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Runtime: 2 ms, faster than 21.28% of Java online submissions for Trapping Rain Water.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 38.3 MB, less than 86.97% of Java online submissions for Trapping Rain Water.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> totalWater = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> startPoint = <span class="number">0</span>, endPoint = height.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> recordStart, recordEnd;</span><br><span class="line">            <span class="keyword">while</span> (startPoint &lt; endPoint) &#123;</span><br><span class="line">                <span class="comment">// 直到比自己大</span></span><br><span class="line">                recordStart = startPoint;</span><br><span class="line">                recordEnd = endPoint;</span><br><span class="line">                <span class="comment">// 指针走的时候会有递减的情况 如果指针一次走到底了 那么需要重置指针 让另一个指针走</span></span><br><span class="line">                <span class="keyword">while</span> (startPoint &lt; endPoint - <span class="number">1</span> &amp;&amp; height[recordStart] &gt;= height[startPoint + <span class="number">1</span>]) startPoint++;</span><br><span class="line">                startPoint++;</span><br><span class="line">                <span class="comment">// reset</span></span><br><span class="line">                <span class="keyword">if</span> (startPoint &gt;= endPoint &amp;&amp; height[recordStart] &gt; height[startPoint]) startPoint = recordStart;</span><br><span class="line">                <span class="keyword">while</span> (startPoint &lt; endPoint - <span class="number">1</span> &amp;&amp; height[recordEnd] &gt;= height[endPoint - <span class="number">1</span>]) endPoint--;</span><br><span class="line">                endPoint--;</span><br><span class="line">                <span class="keyword">if</span> (startPoint &gt;= endPoint &amp;&amp; height[endPoint] &lt; height[recordEnd]) endPoint = recordEnd;</span><br><span class="line">                <span class="comment">// 分别计算水量</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = recordStart + <span class="number">1</span>; i &lt; startPoint; i++) &#123;</span><br><span class="line">                    totalWater += height[recordStart] - height[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = endPoint + <span class="number">1</span>; i &lt; recordEnd; i++) &#123;</span><br><span class="line">                    totalWater += height[recordEnd] - height[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> totalWater;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上面那个思路稍微修改下即可 80%  不重置指针，而是先找到最大值，左指针和右指针最高只能找到最大值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Runtime: 1 ms, faster than 81.80% of Java online submissions for Trapping Rain Water.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 38 MB, less than 99.27% of Java online submissions for Trapping Rain Water.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> totalWater = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> startPoint = <span class="number">0</span>, endPoint = height.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> recordStart, recordEnd;</span><br><span class="line">            <span class="comment">// 找到最大值 左右指针只能走到最大值</span></span><br><span class="line">            <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[maxIndex] &lt; height[i]) maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (startPoint &lt; endPoint) &#123;</span><br><span class="line">                <span class="comment">// 直到比自己大</span></span><br><span class="line">                recordStart = startPoint;</span><br><span class="line">                recordEnd = endPoint;</span><br><span class="line">                <span class="comment">// 指针走的时候会有递减的情况 如果指针一次走到底了 那么需要重置指针 让另一个指针走</span></span><br><span class="line">                <span class="keyword">while</span> (startPoint &lt; maxIndex &amp;&amp; height[recordStart] &gt;= height[startPoint + <span class="number">1</span>]) startPoint++;</span><br><span class="line">                <span class="keyword">if</span> (startPoint &lt; maxIndex) startPoint++;</span><br><span class="line">                <span class="keyword">while</span> (endPoint &gt; maxIndex &amp;&amp; height[recordEnd] &gt;= height[endPoint - <span class="number">1</span>]) endPoint--;</span><br><span class="line">                <span class="keyword">if</span> (endPoint &gt; maxIndex) endPoint--;</span><br><span class="line">                <span class="comment">// 分别计算水量</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = recordStart + <span class="number">1</span>; i &lt; startPoint; i++) &#123;</span><br><span class="line">                    totalWater += height[recordStart] - height[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = endPoint + <span class="number">1</span>; i &lt; recordEnd; i++) &#123;</span><br><span class="line">                    totalWater += height[recordEnd] - height[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> totalWater;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="JumpGame-II-45-medium"><a href="#JumpGame-II-45-medium" class="headerlink" title="JumpGame II 45 medium"></a>JumpGame II 45 medium</h1><p>动规和贪心的解决方案</p>
<p>贪心算法：</p>
<p><img src="/images/pasted-48.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpGameII45</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution2().jump(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题：</span></span><br><span class="line"><span class="comment">     * Given an array of non-negative integers nums, you are initially positioned at the first index of the array.</span></span><br><span class="line"><span class="comment">     * Each element in the array represents your maximum jump length at that position.</span></span><br><span class="line"><span class="comment">     * Your goal is to reach the last index in the minimum number of jumps.</span></span><br><span class="line"><span class="comment">     * You can assume that you can always reach the last index.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 当前位置值为最大跳跃步数，如何移动最小次数跳到最后</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：先用动态规划的思想，从低到高，从最后开始算最优跳跃次数 -1表示无法到达终点</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Runtime: 0 ms, faster than 100.00% of Java online submissions for Jump Game II.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 36.3 MB, less than 85.37% of Java online submissions for Jump Game II.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[] jumpTimes = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">            Arrays.fill(jumpTimes, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    jumpTimes[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 每位再遍历后面的次数 选最小的</span></span><br><span class="line">                <span class="keyword">int</span> min = jumpTimes[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nums[i]; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i + j &lt; nums.length &amp;&amp; min &gt; jumpTimes[i + j] &amp;&amp; jumpTimes[i + j] != -<span class="number">1</span>) min = jumpTimes[i + j];</span><br><span class="line">                &#125;</span><br><span class="line">                jumpTimes[i] = min + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> jumpTimes[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改造成贪心算法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：选择能跳到的范围内的，最远下一次跳跃距离</span></span><br><span class="line"><span class="comment">     * 当前的currentJumpEnd记录能跳到的最远位置，在当前位置和最远位置里面挑出跳的最远的方案：max，i==currentPosi表明已经找到最大跳远距离了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> jumpTimes = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> currentJumpEnd = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 记录能跳的最远位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                max = Math.max(max, i + nums[i]);</span><br><span class="line">                <span class="keyword">if</span> (i == currentJumpEnd) &#123;</span><br><span class="line">                    jumpTimes++;</span><br><span class="line">                    currentJumpEnd = max;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> jumpTimes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Rotate-image"><a href="#Rotate-image" class="headerlink" title="Rotate image"></a>Rotate image</h1><p>medium</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateImage48</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Solution().rotater2(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Runtime: 3 ms, faster than 100.00% of Java online submissions for Rotate Image.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 39 MB, less than 48.87% of Java online submissions for Rotate Image.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 从第一列开始</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; matrix.length; j++) &#123;</span><br><span class="line">                    swap(matrix, i, j, j, i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix.length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                    swap(matrix, i, j, i, matrix.length - <span class="number">1</span> - j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.stream(matrix).forEach(x -&gt; System.out.println(Arrays.toString(x)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> newI, <span class="keyword">int</span> newJ)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = matrix[newI][newJ];</span><br><span class="line">            matrix[newI][newJ] = matrix[i][j];</span><br><span class="line">            matrix[i][j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotater2</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 从第一列开始</span></span><br><span class="line">            StringBuffer out = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            out.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">            <span class="comment">// 列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                out.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = matrix.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    out.append(matrix[j][i]);</span><br><span class="line">                    <span class="keyword">if</span> (j!=<span class="number">0</span>) out.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                out.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (i != matrix.length-<span class="number">1</span>) out.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            System.out.println(out.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题 04 动规</title>
    <url>/2021/04/09/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%98-04-%E5%8A%A8%E8%A7%84/</url>
    <content><![CDATA[<h1 id="Maxium-subarray"><a href="#Maxium-subarray" class="headerlink" title="Maxium subarray"></a>Maxium subarray</h1><p>easy</p>
<span id="more"></span>
<p> 感觉动态规划切割问题的时候要将问题切割到每一个或者第一个开始。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumSubarray53</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().maxSubArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目：</span></span><br><span class="line"><span class="comment">     * Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span></span><br><span class="line"><span class="comment">     * Output: 6</span></span><br><span class="line"><span class="comment">     * Explanation: [4,-1,2,1] has the largest sum = 6.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 动态规划：将问题切割到小问题上，从第一个元素开始，dp[i]表示以i结尾的最大连续子序和大小</span></span><br><span class="line"><span class="comment">     * dp[i] = max&#123;nums[i],dp[i-1]+nums[i]&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Subarray.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 38.4 MB, less than 99.75% of Java online submissions for Maximum Subarray.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 记录上一个最大子序和</span></span><br><span class="line">            <span class="keyword">int</span> lastMaxSubArray = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// 全部最大子序和</span></span><br><span class="line">            <span class="keyword">int</span> max = lastMaxSubArray;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                lastMaxSubArray = Math.max(lastMaxSubArray + nums[i], nums[i]);</span><br><span class="line">                max = Math.max(max, lastMaxSubArray);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Spiral-Matrix"><a href="#Spiral-Matrix" class="headerlink" title="Spiral Matrix"></a>Spiral Matrix</h1><p>medium</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiralMatrix54</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().spiralOrder(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>&#125;, &#123;<span class="number">4</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题：</span></span><br><span class="line"><span class="comment">     * Given an m x n matrix, return all elements of the matrix in spiral order.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span></span><br><span class="line"><span class="comment">     * Output: [1,2,3,6,9,8,7,4,5]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Runtime: 0 ms, faster than 100.00% of Java online submissions for Spiral Matrix.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 37 MB, less than 66.66% of Java online submissions for Spiral Matrix.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            doSpiralARound(matrix, <span class="number">0</span>, <span class="number">0</span>, matrix[<span class="number">0</span>].length, matrix.length, list);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSpiralARound</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> length, <span class="keyword">int</span> height, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || height &lt;= <span class="number">0</span> || x &gt; matrix.length - <span class="number">1</span> || y &gt; matrix[<span class="number">0</span>].length - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 上行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                res.add(matrix[x][y + i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height; i++) &#123;</span><br><span class="line">                res.add(matrix[x + i][y + length - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (height &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 下行</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    res.add(matrix[x + height - <span class="number">1</span>][y + i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 左列</span></span><br><span class="line">                <span class="keyword">if</span> (length &gt; <span class="number">1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = height - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    res.add(matrix[x + i][y]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            doSpiralARound(matrix, x + <span class="number">1</span>, y + <span class="number">1</span>, length - <span class="number">2</span>, height - <span class="number">2</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title="Jump Game"></a>Jump Game</h1><p>medium </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpGame55</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().canJump(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目：判断是否能到终点，和JumpGameII54差不多 这个是简单版本 都用贪心算法即可</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Runtime: 1 ms, faster than 83.87% of Java online submissions for Jump Game.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 40.8 MB, less than 75.58% of Java online submissions for Jump Game.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 当前跳跃的最远点</span></span><br><span class="line">            <span class="keyword">int</span> currentMaxJump = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 可以跳的最远步数 对比取最大值</span></span><br><span class="line">            <span class="keyword">int</span> canMaxJump = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                canMaxJump = Math.max(nums[i] + i, canMaxJump);</span><br><span class="line">                <span class="comment">// 遍历完成 开始跳</span></span><br><span class="line">                <span class="keyword">if</span> (i == currentMaxJump) &#123;</span><br><span class="line">                    currentMaxJump = canMaxJump;</span><br><span class="line">                    canMaxJump = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> currentMaxJump &gt;= nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题05 array</title>
    <url>/2021/04/12/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%9805-array/</url>
    <content><![CDATA[<h1 id="Merge-intervals"><a href="#Merge-intervals" class="headerlink" title="Merge intervals"></a>Merge intervals</h1><span id="more"></span>
<p>medium</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目：合并有交集的集合</span></span><br><span class="line"><span class="comment">     * Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</span></span><br><span class="line"><span class="comment">     * Output: [[1,6],[8,10],[15,18]]</span></span><br><span class="line"><span class="comment">     * Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals.length == <span class="number">1</span>) <span class="keyword">return</span> intervals;</span><br><span class="line"><span class="comment">//            Arrays.sort(intervals, Comparator.comparingInt(x -&gt; x[0]));</span></span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; sorted = Arrays.stream(intervals).sorted(Comparator.comparingInt(x -&gt; x[<span class="number">0</span>])).collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sorted.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sorted.get(i)[<span class="number">1</span>] &gt;= sorted.get(i + <span class="number">1</span>)[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span>[] ints = &#123;sorted.get(i)[<span class="number">0</span>], Math.max(sorted.get(i + <span class="number">1</span>)[<span class="number">1</span>], sorted.get(i)[<span class="number">1</span>])&#125;;</span><br><span class="line">                    sorted.set(i, ints);</span><br><span class="line">                    sorted.remove(i + <span class="number">1</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sorted.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Insert-intervals"><a href="#Insert-intervals" class="headerlink" title="Insert intervals"></a>Insert intervals</h1><p>medium 思路：先确定左端点，在确定右端点，在端点之外的都添加到结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] insert2(<span class="keyword">int</span>[][] intervals, <span class="keyword">int</span>[] newInterval) &#123;</span><br><span class="line">           List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">           <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">               res.add(newInterval);</span><br><span class="line">               <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 找到开始合并的数组</span></span><br><span class="line">           <span class="keyword">int</span> newS = newInterval[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">int</span> newE = newInterval[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">int</span> posi = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> (posi &lt; intervals.length &amp;&amp; newS &gt;= intervals[posi][<span class="number">0</span>]) posi++;</span><br><span class="line">           posi--;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; posi; i++) res.add(intervals[i]);</span><br><span class="line">           <span class="keyword">if</span> (posi &gt;= intervals.length) res.add(newInterval);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (posi &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (intervals[posi][<span class="number">1</span>] &lt; newS) &#123;</span><br><span class="line">                       posi++;</span><br><span class="line">                       res.add(intervals[posi - <span class="number">1</span>]);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       newS = Math.min(newS, intervals[posi][<span class="number">0</span>]);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> posi++;</span><br><span class="line">               <span class="comment">// 确定右端点</span></span><br><span class="line">               <span class="keyword">while</span> (posi &lt; intervals.length &amp;&amp; intervals[posi][<span class="number">1</span>] &lt; newE) posi++;</span><br><span class="line">               <span class="keyword">if</span> (posi &lt; intervals.length &amp;&amp; intervals[posi][<span class="number">0</span>] &lt;= newE) newE = intervals[posi++][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">               res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;newS, newE&#125;);</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = posi; i &lt; intervals.length; i++) &#123;</span><br><span class="line">                   res.add(intervals[i]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h1 id="GenerateMatrix"><a href="#GenerateMatrix" class="headerlink" title="GenerateMatrix"></a>GenerateMatrix</h1><p>medium 生成矩阵 一次AC，思路是每次都填充好外边一圈，然后调用函数反复填充外边一圈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateMatrix59</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ints = <span class="keyword">new</span> Solution().generateMatrix(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] anInt : ints) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(anInt));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Input: n = 3</span></span><br><span class="line"><span class="comment">     * Output: [[1,2,3],[8,9,4],[7,6,5]]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">            <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">            doGenerate(matrix, <span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> matrix;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> matrix 要生产的矩阵</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> start  起始位置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> nums   填充数量</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> num    填充的数字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGenerate</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> start, <span class="keyword">int</span> nums, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// nums &lt;=0 结束</span></span><br><span class="line">            <span class="keyword">if</span> (nums &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 填充第一行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">                matrix[start][start + i] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                matrix[start + i + <span class="number">1</span>][start + nums - <span class="number">1</span>] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                matrix[start + nums - <span class="number">1</span>][start + nums - <span class="number">2</span> - i] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums - <span class="number">2</span>; i++) &#123;</span><br><span class="line">                matrix[start + nums - <span class="number">2</span> - i][start] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            doGenerate(matrix, ++start, nums - <span class="number">2</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题07 array + matrix</title>
    <url>/2021/05/13/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%9807-array/</url>
    <content><![CDATA[<h1 id="Plus-One"><a href="#Plus-One" class="headerlink" title="Plus One"></a>Plus One</h1><p>easy </p>
<p><img src="/images/pasted-68.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusOne66</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(<span class="keyword">new</span> Solution().plusOne(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == digits.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    digits[i] += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (digits[i] == <span class="number">10</span>) &#123;</span><br><span class="line">                        digits[i] = <span class="number">0</span>;</span><br><span class="line">                        carry++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    digits[i] += carry;</span><br><span class="line">                    <span class="keyword">if</span> (digits[i] == <span class="number">10</span>) digits[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> carry = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">                newArr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">                    newArr[i + <span class="number">1</span>] = digits[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> newArr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Set-Matrix-Zeroes"><a href="#Set-Matrix-Zeroes" class="headerlink" title="Set Matrix Zeroes"></a>Set Matrix Zeroes</h1><p>难点在空间复杂度 O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetZeroes73</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Solution().setZeroes2(matrix);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : matrix) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(ints));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            Set&lt;Integer&gt; cols = <span class="keyword">new</span> HashSet();</span><br><span class="line">            Set&lt;Integer&gt; rows = <span class="keyword">new</span> HashSet();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                        cols.add(j);</span><br><span class="line">                        rows.add(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Integer col : cols) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                    matrix[i][col] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Integer row : rows) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix[row].length; i++) &#123;</span><br><span class="line">                    matrix[row][i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// O(1) space的算法 遍历 如果一个数为0 将对应第一行和第一列的值置为0a</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes2</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">            <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                    <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                        matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                        matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="comment">// set to zero</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                    <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] == <span class="number">0</span>) matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 看第一行 和 第一列是否需要置空</span></span><br><span class="line">            <span class="keyword">boolean</span> isRow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isCol = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) isRow = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[<span class="number">0</span>][i] == <span class="number">0</span>) isCol = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isRow)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (isCol)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                    matrix[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Search-a-2D-Matrix"><a href="#Search-a-2D-Matrix" class="headerlink" title="Search a 2D Matrix"></a>Search a 2D Matrix</h1><p>需要注意的是 二分法找行的时候，如果行首数小于target，还要判断行尾数是否也小于target，都小于才能<code>startRow = middleRow + 1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchMatrix74</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().searchMatrix(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;, &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>&#125;, &#123;<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">60</span>&#125;</span><br><span class="line">        &#125;, <span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Integers in each row are sorted from left to right.</span></span><br><span class="line"><span class="comment">     * The first integer of each row is greater than the last integer of the previous row.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> startRow = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> endRow = matrix.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> startCol = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> endCol = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 二分法查行</span></span><br><span class="line">            <span class="keyword">while</span> (startRow &lt; endRow) &#123;</span><br><span class="line">                <span class="keyword">int</span> middleRow = (startRow + endRow) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (matrix[middleRow][<span class="number">0</span>] &gt; target) &#123;</span><br><span class="line">                    endRow = middleRow - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[middleRow][<span class="number">0</span>] &lt; target) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (matrix[middleRow][endCol] &lt; target) startRow = middleRow + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> startRow = endRow = middleRow;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[middleRow][<span class="number">0</span>] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 二分查找列</span></span><br><span class="line">            <span class="keyword">while</span> (startCol &lt;= endCol) &#123;</span><br><span class="line">                <span class="keyword">int</span> middleCol = (startCol + endCol) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (matrix[startRow][middleCol] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[startRow][middleCol] &gt; target) &#123;</span><br><span class="line">                    endCol = middleCol - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[startRow][middleCol] &lt; target) &#123;</span><br><span class="line">                    startCol = middleCol + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题08 array</title>
    <url>/2021/05/17/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%9808-array/</url>
    <content><![CDATA[<h1 id="Sort-Colors"><a href="#Sort-Colors" class="headerlink" title="Sort Colors"></a>Sort Colors</h1><p>快排  看到leetcode有类似快排的算法，0换到左边，2换到右边 懒得实现了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line">           <span class="keyword">int</span> tmp = nums[start];</span><br><span class="line">           <span class="keyword">int</span> startPoint = start;</span><br><span class="line">           <span class="keyword">int</span> endPoint = end;</span><br><span class="line">           <span class="keyword">while</span> (startPoint &lt; endPoint) &#123;</span><br><span class="line">               <span class="keyword">while</span> (startPoint &lt; endPoint &amp;&amp; nums[endPoint] &gt; tmp) endPoint--;</span><br><span class="line">               <span class="keyword">if</span> (startPoint &lt; endPoint) nums[startPoint++] = nums[endPoint];</span><br><span class="line">               <span class="keyword">while</span> (startPoint &lt; endPoint &amp;&amp; nums[startPoint] &lt; tmp) startPoint++;</span><br><span class="line">               <span class="keyword">if</span> (startPoint &lt; endPoint) nums[endPoint--] = nums[startPoint];</span><br><span class="line">           &#125;</span><br><span class="line">           nums[startPoint] = tmp;</span><br><span class="line">           doSort(nums, start, startPoint - <span class="number">1</span>);</span><br><span class="line">           doSort(nums, startPoint + <span class="number">1</span>, end);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h1><p>这个问题要好好看看的 新的套路或者说新的思想，两种回溯，一种是深度优先搜索</p>
<p><img src="/images/pasted-73.png" alt="upload successful"></p>
<p><img src="/images/pasted-74.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subsets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; subsets = <span class="keyword">new</span> Solution().subsets(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;);</span><br><span class="line">        subsets.forEach(x -&gt; &#123;</span><br><span class="line">            x.forEach(System.out::print);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given an integer array nums of unique elements, return all possible subsets (the power set).</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The solution set must not contain duplicate subsets. Return the solution in any order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回溯法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            getAns(nums, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;(), ans);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, ArrayList&lt;Integer&gt; temp, List&lt;List&lt;Integer&gt;&gt; ans)</span> </span>&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">                temp.add(nums[i]);</span><br><span class="line">                getAns(nums, i + <span class="number">1</span>, temp, ans);</span><br><span class="line">                temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;Integer&gt; list = Arrays.stream(nums).boxed().collect(Collectors.toList());</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lists = doSplit(list);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">                lists.add(Arrays.asList(num));</span><br><span class="line">            &#125;</span><br><span class="line">            lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            <span class="keyword">return</span> lists;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; doSplit(List&lt;Integer&gt; nums) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (nums.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                res.add(Arrays.asList(nums.get(<span class="number">0</span>), nums.get(<span class="number">1</span>)));</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> startNum = nums.get(<span class="number">0</span>);</span><br><span class="line">            nums.remove(<span class="number">0</span>);</span><br><span class="line">            nums.forEach(x -&gt; &#123;</span><br><span class="line">                res.add(Arrays.asList(startNum, x));</span><br><span class="line">            &#125;);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; subs = doSplit(nums);</span><br><span class="line">            res.addAll(subs);</span><br><span class="line">            subs.forEach(x -&gt; &#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;(x);</span><br><span class="line">                tmp.add(<span class="number">0</span>, startNum);</span><br><span class="line">                res.add(tmp);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Word-Search"><a href="#Word-Search" class="headerlink" title="Word Search"></a>Word Search</h1><p>思路：首先定位首字母，然后查找周围匹配的下一个字母，注意的是这里需要回溯，一条路走不通，可能另一条就可以。且每个字母不能被重复用，所以加一个数组用来标记</p>
<p><img src="/images/pasted-69.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordSearch79</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().exist(<span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;, &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;, &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line">        &#125;, <span class="string">&quot;aaaaaaaaaaaaa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given an m x n grid of characters board and a string word, return true if word exists in the grid.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 1. 定位到字母开头</span></span><br><span class="line">            <span class="keyword">int</span> colLen = board[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">char</span> character = word.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">boolean</span>[][] usage = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][colLen];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; colLen; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == character) &#123;</span><br><span class="line">                        <span class="comment">// 2. 判断是否能找完</span></span><br><span class="line">                        usage[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (doFind(board, i, j, -<span class="number">1</span>, <span class="number">1</span>, word, usage)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">else</span> usage[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> board          矩阵</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> i              当前位置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> previousDirect 从哪来</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> chPosi         要查找的字符位置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doFind</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> previousDirect, <span class="keyword">int</span> chPosi, String word, <span class="keyword">boolean</span>[][] usage)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (chPosi == word.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 0 1 2 3  上 下 左 右</span></span><br><span class="line">            <span class="keyword">if</span> (previousDirect != <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span> &amp;&amp; !usage[i - <span class="number">1</span>][j] &amp;&amp; board[i - <span class="number">1</span>][j] == word.charAt(chPosi)) &#123;</span><br><span class="line">                usage[i - <span class="number">1</span>][j] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (doFind(board, i - <span class="number">1</span>, j, <span class="number">1</span>, chPosi + <span class="number">1</span>, word, usage)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> usage[i - <span class="number">1</span>][j] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (previousDirect != <span class="number">1</span> &amp;&amp; i &lt; board.length - <span class="number">1</span> &amp;&amp; !usage[i + <span class="number">1</span>][j] &amp;&amp; board[i + <span class="number">1</span>][j] == word.charAt(chPosi)) &#123;</span><br><span class="line">                usage[i + <span class="number">1</span>][j] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (doFind(board, i + <span class="number">1</span>, j, <span class="number">0</span>, chPosi + <span class="number">1</span>, word, usage)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> usage[i + <span class="number">1</span>][j] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (previousDirect != <span class="number">2</span> &amp;&amp; j &gt; <span class="number">0</span> &amp;&amp; !usage[i][j - <span class="number">1</span>] &amp;&amp; board[i][j - <span class="number">1</span>] == word.charAt(chPosi)) &#123;</span><br><span class="line">                usage[i][j - <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (doFind(board, i, j - <span class="number">1</span>, <span class="number">3</span>, chPosi + <span class="number">1</span>, word, usage)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> usage[i][j - <span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (previousDirect != <span class="number">3</span> &amp;&amp; j &lt; board[<span class="number">0</span>].length - <span class="number">1</span> &amp;&amp; !usage[i][j + <span class="number">1</span>] &amp;&amp; board[i][j + <span class="number">1</span>] == word.charAt(chPosi)) &#123;</span><br><span class="line">                usage[i][j + <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (doFind(board, i, j + <span class="number">1</span>, <span class="number">2</span>, chPosi + <span class="number">1</span>, word, usage)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> usage[i][j + <span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Remove-Duplicates"><a href="#Remove-Duplicates" class="headerlink" title="Remove Duplicates"></a>Remove Duplicates</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicates80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().removeDuplicatesEasy(tmp));</span><br><span class="line">        System.out.println(Arrays.toString(tmp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> point = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> same = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> sameTimes = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> len = nums.length;</span><br><span class="line">            <span class="keyword">while</span> (point &lt; len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[point] == same) sameTimes++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    same = nums[point];</span><br><span class="line">                    sameTimes = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sameTimes &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = point + <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">                        nums[i - <span class="number">1</span>] = nums[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    len--;</span><br><span class="line">                    point--;</span><br><span class="line">                &#125;</span><br><span class="line">                point++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Success</span></span><br><span class="line"><span class="comment">         * Details</span></span><br><span class="line"><span class="comment">         * Runtime: 1 ms, faster than 16.69% of Java online submissions for Remove Duplicates from Sorted Array II.</span></span><br><span class="line"><span class="comment">         * Memory Usage: 38.6 MB, less than 99.46% of Java online submissions for Remove Duplicates from Sorted Array II.</span></span><br><span class="line"><span class="comment">         * Next challenges:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicatesFaster</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 差距 默认为-1，如果这一次和上一次相等 差值为0 如果这一次和上一次再相等差值++ 如果这一次和上一次不等，判断差距，移动，然后重设为-1；</span></span><br><span class="line">            <span class="keyword">int</span> range = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> point = nums.length - <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> len = nums.length;</span><br><span class="line">            <span class="keyword">while</span> (point &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[point] == nums[point + <span class="number">1</span>]) range++;</span><br><span class="line">                <span class="keyword">if</span> (nums[point] != nums[point + <span class="number">1</span>] || point == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (range &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        len -= range;</span><br><span class="line">                        <span class="keyword">if</span> (point == <span class="number">0</span> &amp;&amp; nums[<span class="number">0</span>] == nums[<span class="number">1</span>]) point--;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = point + <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">                            nums[i] = nums[i + range];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    range = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                point--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicatesEasy</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">2</span> || n &gt; nums[i-<span class="number">2</span>])</span><br><span class="line">                        nums[i++] = n;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="SearchinRotatedSortedArrayII"><a href="#SearchinRotatedSortedArrayII" class="headerlink" title="SearchinRotatedSortedArrayII"></a>SearchinRotatedSortedArrayII</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchinRotatedSortedArrayII81</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().search2(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Before being passed to your function, nums is rotated at an unknown pivot index k (0 &lt;= k &lt; nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> posi = findSplitPosi(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            System.out.println(posi);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">findSplitPosi</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; end - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; nums[nums.length - <span class="number">1</span>]) <span class="keyword">return</span> findSplitPosi(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> findSplitPosi(nums, start, mid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一次性找出 就不再像上一个一样先找出两个顺序数组了</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> doSearch(nums, target, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doSearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isSorted = nums[start] &lt; nums[end];</span><br><span class="line">            <span class="keyword">if</span> (isSorted &amp;&amp; target &gt; nums[start] &amp;&amp; target &gt; nums[end]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">// 在左区间？ 如果区间非顺序，那么也可能在右区间</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isSorted) <span class="keyword">return</span> doSearch(nums, target, start, mid - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> doSearch(nums, target, start, mid - <span class="number">1</span>) || doSearch(nums, target, mid + <span class="number">1</span>, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右区间？</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isSorted) <span class="keyword">return</span> doSearch(nums, target, mid + <span class="number">1</span>, end);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> doSearch(nums, target, start, mid - <span class="number">1</span>) || doSearch(nums, target, mid + <span class="number">1</span>, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="LargestRectangleArea"><a href="#LargestRectangleArea" class="headerlink" title="LargestRectangleArea"></a>LargestRectangleArea</h1><p>hard 用了dp的思想，用数组存储了面积最大值，这个算法24ms，67%，有待优化</p>
<p><img src="/images/pasted-70.png" alt="upload successful"></p>
<p><img src="/images/pasted-71.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargestRectangleArea</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().largestRectangleArea(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</span><br><span class="line">               <span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given an array of integers heights representing the histogram&#x27;s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：很简单，先准备一个数组用来存放每个数的最大面积，然后从第一个开始，先看数组有没有没有再动，如果右边的小于左边，那么第一个的最大面积为右边的数的最大面积，</span></span><br><span class="line"><span class="comment">     * 去算右边的最大面积且存储在数组中，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[] areas = <span class="keyword">new</span> <span class="keyword">int</span>[heights.length];</span><br><span class="line">            Arrays.fill(areas, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">                max = Math.max(max, doFindArea(heights, i, areas));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 找到这个位置的最大面积</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> heights</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> posi</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> areas</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doFindArea</span><span class="params">(<span class="keyword">int</span>[] heights, <span class="keyword">int</span> posi, <span class="keyword">int</span>[] areas)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 当前最大面积不存在，开始查</span></span><br><span class="line">            <span class="keyword">if</span> (areas[posi] == <span class="number">0</span>) &#123;</span><br><span class="line">                areas[posi] = heights[posi];</span><br><span class="line">                <span class="keyword">int</span> i = posi, j = posi;</span><br><span class="line">                <span class="keyword">int</span> leftMax = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> rightMax = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 往左走，找到左边比自己小的最大值，本身区域也增加</span></span><br><span class="line">                <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="comment">// 左边的比当前的高</span></span><br><span class="line">                    <span class="keyword">if</span> (heights[i] &gt; heights[posi]) areas[posi] += heights[posi];</span><br><span class="line">                    <span class="comment">// 往左走的时候如果左边和自己一样 那么值也一样</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (heights[i] == heights[posi]) &#123;</span><br><span class="line">                        areas[posi] = areas[i];</span><br><span class="line">                        <span class="keyword">return</span> areas[posi];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 左边的比当前低</span></span><br><span class="line">                        <span class="comment">// 先看左边是否有最大面积，没有就算</span></span><br><span class="line">                        <span class="keyword">if</span> (areas[i] == <span class="number">0</span>) doFindArea(heights, i, areas);</span><br><span class="line">                        leftMax = areas[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 往右走，找到右边比自己小的最大值，本身区域也增加</span></span><br><span class="line">                <span class="keyword">while</span> (j &lt; heights.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">if</span> (heights[j] &gt;= heights[posi]) areas[posi] += heights[posi];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (areas[j] == <span class="number">0</span>) doFindArea(heights, j, areas);</span><br><span class="line">                        rightMax = areas[j];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 现在有了本身的大小，有了遇到的两个比自身小的数的区域最大值</span></span><br><span class="line">                areas[posi] = Math.max(Math.max(areas[posi], leftMax), rightMax);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> areas[posi];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题09 array</title>
    <url>/2021/06/20/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%9809-array/</url>
    <content><![CDATA[<h1 id="MaximalRectangle"><a href="#MaximalRectangle" class="headerlink" title="MaximalRectangle"></a>MaximalRectangle</h1><p>dp思路：和上一题一样 84， 转换下就好</p>
<p>上一题的84题我实际用了递归和dp和这题不一样，这里的思路是：每个柱子的面积都是<code>长度*高度</code>，这个长度就是<code>柱子右边的第一个小于柱子高度的柱子  -  柱子左边的第一个小于柱子高度的柱子 - 1</code>，因此主要点在算长度。</p>
<p>这题的dp思想体现在算宽度，每层宽度可以通过上层算出。    </p>
<p><img src="/images/pasted-72.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle2</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 思路： 和84题一样</span></span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] height = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(left, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(right, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(height, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> maxA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_left = <span class="number">0</span>, cur_right = n;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123; <span class="comment">// compute height (can do this from either side)</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) height[j]++;</span><br><span class="line">                <span class="keyword">else</span> height[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123; <span class="comment">// compute left (from left to right)</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) left[j] = Math.max(left[j], cur_left);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    left[j] = <span class="number">0</span>;</span><br><span class="line">                    cur_left = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// compute right (from right to left)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) right[j] = Math.min(right[j], cur_right);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    right[j] = n;</span><br><span class="line">                    cur_right = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// compute the area of rectangle (can do this from either side)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                maxA = Math.max(maxA, (right[j] - left[j]) * height[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="merge-sorted-array-o-m-n"><a href="#merge-sorted-array-o-m-n" class="headerlink" title="merge sorted array  o(m+n)"></a>merge sorted array  o(m+n)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortedArray88</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">new</span> Solution().merge(a, <span class="number">5</span>, b, <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路：把前m个数放到nums1后面m个上，前面m个当作空的用来存放结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">                    nums1[i] = nums2[i];</span><br><span class="line">                &#125;</span><br><span class="line">                nums1[<span class="number">0</span>] = nums2[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不开辟多余空间的写法且速度为 o(m+n)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                nums1[i + nums1.length - m] = nums1[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> p1 = nums1.length - m;</span><br><span class="line">            <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> pres = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (pres &lt; nums1.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p1 == nums1.length) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; p2 &lt; n; p2++) &#123;</span><br><span class="line">                        nums1[pres++] = nums2[p2];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == n) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) nums1[pres++] = nums1[p1++];</span><br><span class="line">                    <span class="keyword">else</span> nums1[pres++] = nums2[p2++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge2</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> pres = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums1.length];</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p1 == m) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; p2 &lt; n; p2++) &#123;</span><br><span class="line">                        res[pres++] = nums2[p2];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == n) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; p1 &lt; m; p1++) &#123;</span><br><span class="line">                        res[pres++] = nums1[p1];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) res[pres++] = nums1[p1++];</span><br><span class="line">                    <span class="keyword">else</span> res[pres++] = nums2[p2++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nums1 = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Construct-BinaryTree-from-Preorder-and-Inorder-Traversal"><a href="#Construct-BinaryTree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="Construct BinaryTree from Preorder and Inorder Traversal"></a>Construct BinaryTree from Preorder and Inorder Traversal</h1><p>不难<br><img src="/images/pasted-75.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructBinaryTreefromPreorderandInorderTraversal105</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> Solution().buildTree(</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>&#125;</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> constructTree(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> preOrder 前序遍历结果</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> preS     结果开始下标</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> preE     结果结束下标</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> inOrder</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> inS</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> inE</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructTree</span><span class="params">(<span class="keyword">int</span>[] preOrder, <span class="keyword">int</span> preS, <span class="keyword">int</span> preE, <span class="keyword">int</span>[] inOrder, <span class="keyword">int</span> inS, <span class="keyword">int</span> inE)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 无遍历结果</span></span><br><span class="line">            <span class="keyword">if</span> (preS &gt; preE || inS &gt; inE) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (preS == preE) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(preOrder[preS]);</span><br><span class="line">            <span class="comment">// 找到根节点</span></span><br><span class="line">            TreeNode root = <span class="keyword">new</span> TreeNode(preOrder[preS]);</span><br><span class="line">            <span class="comment">// 找到中序遍历的左边和右边两个集合</span></span><br><span class="line">            <span class="keyword">int</span> rootPosi;</span><br><span class="line">            <span class="keyword">for</span> (rootPosi = inS; rootPosi &lt;= inE; rootPosi++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.val == inOrder[rootPosi]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到前序遍历的左右两个集合</span></span><br><span class="line"><span class="comment">//            int preEnd;</span></span><br><span class="line"><span class="comment">//            for (preEnd = preS + 1; preEnd &lt;= preE; preEnd++) &#123;</span></span><br><span class="line"><span class="comment">//                // 判断是否在左集合内</span></span><br><span class="line"><span class="comment">//                boolean ifContains = false;</span></span><br><span class="line"><span class="comment">//                for (int i = inS; i &lt;= rootPosi - 1; i++) &#123;</span></span><br><span class="line"><span class="comment">//                    if (inOrder[i] == preOrder[preEnd]) ifContains = true;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                if (!ifContains) &#123;</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            preEnd--;</span></span><br><span class="line">            <span class="keyword">int</span> leftTreeLen = rootPosi-inS;</span><br><span class="line">            root.left = constructTree(preOrder, preS + <span class="number">1</span>, preS+leftTreeLen, inOrder, inS, rootPosi - <span class="number">1</span>);</span><br><span class="line">            root.right = constructTree(preOrder, preS+leftTreeLen + <span class="number">1</span>, preE, inOrder, rootPosi + <span class="number">1</span>, inE);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题10 tree</title>
    <url>/2021/06/21/LeetCode-%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%9810-tree/</url>
    <content><![CDATA[<h1 id="Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="Construct Binary Tree from Inorder and Postorder Traversal"></a>Construct Binary Tree from Inorder and Postorder Traversal</h1><p><img src="/images/pasted-76.png" alt="upload successful"><br>106 同 105一样 同样规则构建树，只不过计算左右集合时需要注意下！ 55%</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructBinaryTreefromPostorderandInorderTraversal106</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> Solution().buildTree(</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">7</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同105 用中序和后序构造树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> constructTree(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructTree</span><span class="params">(<span class="keyword">int</span>[] posOrder, <span class="keyword">int</span> posS, <span class="keyword">int</span> posE, <span class="keyword">int</span>[] inOrder, <span class="keyword">int</span> inS, <span class="keyword">int</span> inE)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 无遍历结果</span></span><br><span class="line">            <span class="keyword">if</span> (posS &gt; posE || inS &gt; inE) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (posS == posE) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(posOrder[posE]);</span><br><span class="line">            <span class="comment">// 找到根节点</span></span><br><span class="line">            TreeNode root = <span class="keyword">new</span> TreeNode(posOrder[posE]);</span><br><span class="line">            <span class="comment">// 找到中序遍历的左边和右边两个集合</span></span><br><span class="line">            <span class="keyword">int</span> rootPosi;</span><br><span class="line">            <span class="keyword">for</span> (rootPosi = inS; rootPosi &lt;= inE; rootPosi++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.val == inOrder[rootPosi]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> leftTreeLen = rootPosi - inS;</span><br><span class="line">            root.left = constructTree(posOrder, posS, posS + leftTreeLen - <span class="number">1</span>, inOrder, inS, rootPosi - <span class="number">1</span>);</span><br><span class="line">            root.right = constructTree(posOrder, posS + leftTreeLen, posE - <span class="number">1</span>, inOrder, rootPosi + <span class="number">1</span>, inE);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Pascal’s-Triangle-118"><a href="#Pascal’s-Triangle-118" class="headerlink" title="Pascal’s Triangle 118"></a>Pascal’s Triangle 118</h1><p>easy 帕斯卡三角形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PascalTriangle118</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().generate(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 帕斯卡三角形</span></span><br><span class="line"><span class="comment">     *      1</span></span><br><span class="line"><span class="comment">     *    1   1</span></span><br><span class="line"><span class="comment">     *   1  2  1</span></span><br><span class="line"><span class="comment">     *  1 3   3  1</span></span><br><span class="line"><span class="comment">     * 1 4  6   4  1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            List&lt;Integer&gt; tmp = Arrays.asList(<span class="number">1</span>);</span><br><span class="line">            res.add(tmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">                List&lt;Integer&gt; curr = <span class="keyword">new</span> LinkedList();</span><br><span class="line">                curr.add(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp.size() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    curr.add(tmp.get(j)+tmp.get(j+<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                curr.add(<span class="number">1</span>);</span><br><span class="line">                tmp = curr;</span><br><span class="line">                res.add(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Pascal’s-TriangleII-119"><a href="#Pascal’s-TriangleII-119" class="headerlink" title="Pascal’s TriangleII 119"></a>Pascal’s TriangleII 119</h1><p>和上题一样 只不过只需要输出最上层，这个是o(k)的c++算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(rowIndex+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;rowIndex+<span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;=<span class="number">1</span>; j--)</span><br><span class="line">                A[j] += A[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 每日三道题11 动规</title>
    <url>/2021/06/23/LeetCode-%E6%AF%8F%E6%AC%A1%E4%B8%89%E9%81%93%E9%A2%9811-%E5%8A%A8%E8%A7%84/</url>
    <content><![CDATA[<h1 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a>Triangle</h1><p>medium 经典入门dp问题 一次ac</p>
<pre><code> * 计算三角形中每行最小值组成的路径 实际也是个经典的dp问题，从低到上
 *    2
 *   3 4
 *  6 5 7
 * 4 1 8 3
 *
 * 从最底层开始：4，1，8，3 往上分别为 （10，7），（6，13），（15，10） 选出最小的7，6，10
 * 继续：9，10  最后：11
</code></pre>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算三角形中每行最小值组成的路径 实际也是个经典的dp问题，从低到上</span></span><br><span class="line"><span class="comment">     *    2</span></span><br><span class="line"><span class="comment">     *   3 4</span></span><br><span class="line"><span class="comment">     *  6 5 7</span></span><br><span class="line"><span class="comment">     * 4 1 8 3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 从最底层开始：4，1，8，3 往上分别为 （10，7），（6，13），（15，10） 选出最小的7，6，10</span></span><br><span class="line"><span class="comment">     * 继续：9，10  最后：11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            return triangle.stream().map(x -&gt; x.stream().min(Comparator.comparingInt(n -&gt; n))).mapToInt(Optional::get).sum();</span></span><br><span class="line">            <span class="keyword">int</span>[] costs = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.get(triangle.size() - <span class="number">1</span>).size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; triangle.get(triangle.size() - <span class="number">1</span>).size(); i++)</span><br><span class="line">                costs[i] = triangle.get(triangle.size() - <span class="number">1</span>).get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triangle.get(i).size(); j++)</span><br><span class="line">                    costs[j] = Math.min(costs[j] + triangle.get(i).get(j), costs[j + <span class="number">1</span>] + triangle.get(i).get(j));</span><br><span class="line">            <span class="keyword">return</span> costs[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h1><p><img src="/images/pasted-77.png" alt="upload successful"></p>
<p><img src="/images/pasted-78.png" alt="upload successful"><br>easy 差值最大 o（n)复杂度的算法不太容易想得到，具体问题具体分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 暴力算法  o(n^2)</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;prices.length; j++) &#123;</span><br><span class="line">                   max = Math.max(prices[j] - prices[i], max);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 牛逼算法  o(n)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> lowest = prices[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (prices[i]&gt;lowest) max = Math.max(max, prices[i] - lowest);</span><br><span class="line">               <span class="keyword">else</span> lowest = prices[i];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Best-Time-to-Buy-and-Sell-Stock-II-122"><a href="#Best-Time-to-Buy-and-Sell-Stock-II-122" class="headerlink" title="Best Time to Buy and Sell Stock II 122"></a>Best Time to Buy and Sell Stock II 122</h1><p>上题的变种，这次可以多次买入卖出，这题真……，想得到的话简单的不行，想不到的话……，最重要的是画成图看规律</p>
<p><img src="/images/pasted-79.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这题不应该是easy  很难想到这个算法和规律</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * 第一个解法： 实际有个规律，就是所有的邻近高点-邻近低点的和 总是最大的！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> lowest;</span><br><span class="line">           <span class="keyword">int</span> highest;</span><br><span class="line">           <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="comment">// 找到最低点</span></span><br><span class="line">               <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[i] &gt;= prices[i + <span class="number">1</span>]) i++;</span><br><span class="line">               lowest = prices[i];</span><br><span class="line">               <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[i] &lt;= prices[i + <span class="number">1</span>]) i++;</span><br><span class="line">               highest = prices[i];</span><br><span class="line">               maxProfit += highest - lowest;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> maxProfit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 牛逼算法  画成图实际所有的收益 不过是所有的上坡的和</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (prices[i]&lt;prices[i+<span class="number">1</span>]) max += prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Best-Time-to-Buy-and-Sell-Stock-III-123"><a href="#Best-Time-to-Buy-and-Sell-Stock-III-123" class="headerlink" title="Best Time to Buy and Sell Stock III 123"></a>Best Time to Buy and Sell Stock III 123</h1><p>佛了 改改题目还能变成dp问题，在上一题的基础上添加限制条件：只能有两次买卖操作</p>
<p>第一种思路：</p>
<p><img src="/images/pasted-80.png" alt="upload successful"></p>
<p>从最后一天开始：0，0.<br>倒数第二天：第一次最佳买入能赚3元<br>倒数第三天：第一次最佳买入赚1元，还没3元多，变为3元<br>倒数第四天：0-3一次+3的最大值=3，两次操作最大值=6，单次操作最大值4<br>…..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span>[][] record = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][prices.length];</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = prices.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">               <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">while</span> (j &lt; prices.length) &#123;</span><br><span class="line">                   <span class="keyword">while</span> (j &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[j] &lt; prices[j + <span class="number">1</span>]) j++;</span><br><span class="line">                   <span class="keyword">if</span> (prices[j] - prices[i] &gt; record[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                       record[<span class="number">0</span>][i] = prices[j] - prices[i];</span><br><span class="line">                       <span class="comment">// 算第二次操作</span></span><br><span class="line">                       <span class="keyword">if</span> (j &lt; prices.length - <span class="number">1</span>) &#123;</span><br><span class="line">                           record[<span class="number">1</span>][i] = Math.max(record[<span class="number">1</span>][i], record[<span class="number">0</span>][j + <span class="number">1</span>] + record[<span class="number">0</span>][i]);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   j++;</span><br><span class="line">               &#125;</span><br><span class="line">               record[<span class="number">0</span>][i] = Math.max(record[<span class="number">0</span>][i], record[<span class="number">0</span>][i + <span class="number">1</span>]);</span><br><span class="line">               record[<span class="number">1</span>][i] = Math.max(record[<span class="number">1</span>][i], record[<span class="number">1</span>][i + <span class="number">1</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> Math.max(record[<span class="number">0</span>][<span class="number">0</span>], record[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-81.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//进行初始化，第一天 s1 将股票买入，其他状态全部初始化为最小值</span></span><br><span class="line">    <span class="keyword">int</span> s1=-prices[<span class="number">0</span>],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();++i) &#123;            </span><br><span class="line">        s1 = max(s1, -prices[i]); <span class="comment">//买入价格更低的股</span></span><br><span class="line">        s2 = max(s2, s1+prices[i]); <span class="comment">//卖出当前股，或者不操作</span></span><br><span class="line">        s3 = max(s3, s2-prices[i]); <span class="comment">//第二次买入，或者不操作</span></span><br><span class="line">        s4 = max(s4, s3+prices[i]); <span class="comment">//第二次卖出，或者不操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0</span>,s4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>leet code 每日三道题 01 array+binary search</title>
    <url>/2021/03/26/LeetCode/</url>
    <content><![CDATA[<h1 id="leet-code-每日三道题-01-array-binary-search"><a href="#leet-code-每日三道题-01-array-binary-search" class="headerlink" title="leet code 每日三道题 01 array+binary search"></a>leet code 每日三道题 01 array+binary search</h1><span id="more"></span>

<h2 id="29题-除法-M"><a href="#29题-除法-M" class="headerlink" title="29题 除法 M"></a>29题 除法 M</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivideTwoIntegers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(solution.divideTwo(Integer.MIN_VALUE, Integer.MAX_VALUE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题：不使用 * / % 符号完成除法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：1. 暴力算法，除法可以看作减法，每次减去被除数，当结果&lt;0说明结束，但是这样会导致被除数为1的时候循环次数为被除数，会超时的</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：2. 首先位运算 除2：`&gt;&gt;1` 乘2：`&lt;&lt;1`。然后我们看整个除法表达式，比如 `13/4 = 3 ==&gt; 13 = 4 * 3`</span></span><br><span class="line"><span class="comment">     * 换算成二进制：`1101 = 4 * 0010+ 4* 0001` 也就是4个 `0010`和`0001`，所以可以看出规律，那就是除法的结果必定为除数的倍数的二进制位。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 由此可以遍历二进制数（从 1000.. 遍历到 000..001），题目的最大是32位，现在假如最高8位，那么从最高位开始 `1000 0000 * 4 &gt; 1010`</span></span><br><span class="line"><span class="comment">     * 循环直到发现`0010(2) * 4 &lt; 1101`,记录下`0010`, 那么剩下是数就是 13-8=5 ,继续遍历`0001 * 4 &lt; 5` 记录下`0001`，遍历结束，</span></span><br><span class="line"><span class="comment">     * 结果为 `0001 *4 + 0010 * 4` 即 `0001 + 0010 `（3） * 4 ，最后结果为 3。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 具体实现中，为了不使用乘法符号完成乘法，使用`&lt;&lt;`  比如 `0001`和`0010`分别乘4就是 4 和 4&lt;&lt;1，所以可以定义一个初始数组arr，</span></span><br><span class="line"><span class="comment">     * `arr[0]`放被除数，1,2,3 分别是前一位的乘2即&lt;&lt;1。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == <span class="number">1</span>) <span class="keyword">return</span> dividend;</span><br><span class="line">            <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">boolean</span> isPos = (dividend &gt; <span class="number">0</span> &amp;&amp; divisor &gt; <span class="number">0</span>) || (dividend &lt; <span class="number">0</span> &amp;&amp; divisor &lt; <span class="number">0</span>);</span><br><span class="line"><span class="comment">//            boolean isMin = dividend == Integer.MIN_VALUE;</span></span><br><span class="line">            <span class="keyword">long</span> array[] = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">32</span>];</span><br><span class="line">            <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">            divisor = Math.abs(divisor);</span><br><span class="line">            <span class="keyword">long</span> dividentInput = dividend;</span><br><span class="line">            dividentInput = Math.abs(dividentInput);</span><br><span class="line">            array[<span class="number">0</span>] = divisor;</span><br><span class="line">            <span class="keyword">int</span> truePosi = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 当前位都是前一位的*2 但是当tmp溢出的时候就可以停止了，两个正数的相除结果肯定是正数</span></span><br><span class="line">                array[i] = array[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (array[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                truePosi = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从最高位开始遍历，做减法 1. 如果两个数为正 被除数减法，结果加法 2. 被除数为负， 结果加法，被除数加法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = truePosi; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] &lt;= dividentInput) &#123;</span><br><span class="line">                    <span class="comment">// 假如 27位是结果 那么 27位应该是 array[27]/divisor 也就是 2的27次方</span></span><br><span class="line">                    result += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                    dividentInput -= array[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE) result = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span> (result &lt; Integer.MIN_VALUE) result = Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">if</span> (isPos) <span class="keyword">return</span> (<span class="keyword">int</span>) result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">int</span>) -result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 除数 被除数 0：同为正，1：同为负号，异号（2：被除数正，除数负 3：被除数负，除数正）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Runtime: 1 ms, faster than 99.98% of Java online submissions for Divide Two Integers.</span></span><br><span class="line"><span class="comment">         * Memory Usage: 36.3 MB, less than 27.88% of Java online submissions for Divide Two Integers.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> dividend</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> divisor</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divideTwo</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (dividend == divisor) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == <span class="number">1</span>) <span class="keyword">return</span> dividend;</span><br><span class="line">            <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == Integer.MAX_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (divisor == Integer.MAX_VALUE &amp;&amp; divisor == -dividend) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (divisor == Integer.MAX_VALUE || divisor == Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span>[] array = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">32</span>];</span><br><span class="line">            <span class="keyword">boolean</span> isPos = (dividend &gt; <span class="number">0</span> &amp;&amp; divisor &gt; <span class="number">0</span>) || (dividend &lt; <span class="number">0</span> &amp;&amp; divisor &lt; <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 除数确保不会溢出了</span></span><br><span class="line">            <span class="keyword">if</span> (divisor &lt; <span class="number">0</span>) divisor = -divisor;</span><br><span class="line">            array[<span class="number">0</span>] = divisor;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                array[i] = array[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 被除数如果是最小值要另外判断</span></span><br><span class="line">            <span class="keyword">if</span> (dividend == Integer.MIN_VALUE) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dividend &lt;= -array[i]) &#123;</span><br><span class="line">                        dividend += array[i];</span><br><span class="line">                        result += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                        <span class="keyword">if</span> (result&lt;<span class="number">0</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) dividend = -dividend;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dividend &gt;= array[i]) &#123;</span><br><span class="line">                        dividend -= array[i];</span><br><span class="line">                        result += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPos) <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> -result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>问题：不使用 * / % 符号完成除法</p>
<p>思路：1. 暴力算法，除法可以看作减法，每次减去被除数，当结果&lt;0说明结束，但是这样会导致被除数为1的时候循环次数为被除数，会超时的</p>
<p>思路：2. 首先位运算 除2：<code>&gt;&gt;1</code> 乘2：<code>&lt;&lt;1</code>。然后我们看整个除法表达式，比如 <code>13/4 = 3 ==&gt; 13 = 4 * 3</code> 换算成二进制：<code>1101 = 4 * 0010+ 4* 0001</code> 也就是4个 <code>0010</code>和<code>0001</code>，所以可以看出规律，那就是除法的结果必定为除数的倍数的二进制位。</p>
<p>由此可以遍历二进制数（从 1000.. 遍历到 000..001），题目的最大是32位，现在假如最高8位，那么从最高位开始 <code>1000 0000 * 4 &gt; 1010</code> 循环直到发现<code>0010(2) * 4 &lt; 1101</code>,记录下<code>0010</code>, 那么剩下是数就是 13-8=5 ,继续遍历<code>0001 * 4 &lt; 5</code> 记录下<code>0001</code>，遍历结束，结果为 <code>0001 *4 + 0010 * 4</code> 即 <code>0001 + 0010 </code>（3） * 4 ，最后结果为 3。</p>
<p>具体实现中，为了不使用乘法符号完成乘法，使用<code>&lt;&lt;</code>  比如 <code>0001</code>和<code>0010</code>分别乘4就是 4 和 4&lt;&lt;1，所以可以定义一个初始数组arr，<code>arr[0]</code>放被除数，1,2,3 分别是前一位的乘2即&lt;&lt;1。</p>
<h2 id="33-Search-in-Rotated-Sorted-Array-M"><a href="#33-Search-in-Rotated-Sorted-Array-M" class="headerlink" title="33 Search in Rotated Sorted Array M"></a>33 Search in Rotated Sorted Array M</h2><p>这题应该挺简单的，不停二分就是了，既然100%了就不看官方答案了</p>
<pre><code> * 题目是给定一个未知的数，数组会根据这个数旋转，
 * For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
 *
 * 思路：二分法，反正第一个数肯定是比最后一位大，数组二分，筛选出目标数组，第一个数比分组后的最后一个大就是目标数组，
 * 将目标数组再次二分，这个数再比对两个数组的最后一个数，找出最小的所在的数组，直到目标数组为1 记录下标，
 *
 * 找到记录下标后说明确定了分割位置，将数组分割成两个有序数组，然后二分查找即可
 
</code></pre>
<p>  代码逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInRotatedSortedArray33</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().search(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目是给定一个未知的数，数组会根据这个数旋转，</span></span><br><span class="line"><span class="comment">     * For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：二分法，反正第一个数肯定是比最后一位大，数组二分，筛选出目标数组，第一个数比分组后的最后一个大就是目标数组，</span></span><br><span class="line"><span class="comment">     * 将目标数组再次二分，这个数再比对两个数组的最后一个数，找出最小的所在的数组，直到目标数组为1 记录下标，</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 找到记录下标后说明确定了分割位置，将数组分割成两个有序数组，然后二分查找即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array.</span></span><br><span class="line"><span class="comment">     * Memory Usage: 38.3 MB, less than 52.83% of Java online submissions for Search in Rotated Sorted Array.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 定位到分割位置</span></span><br><span class="line">            <span class="keyword">int</span> posi = doSplitArray(nums, nums[<span class="number">0</span>], <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 二分查找即可</span></span><br><span class="line">            <span class="keyword">int</span> res = doBinarySearch(nums, <span class="number">0</span>, posi - <span class="number">1</span>, target);</span><br><span class="line">            <span class="keyword">if</span> (res != -<span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> doBinarySearch(nums, posi, nums.length - <span class="number">1</span>, target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出分割位置</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doSplitArray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (start == end) <span class="keyword">return</span> start;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 两个数组 start-mid &amp; mid-end 找出其中最后一个数比n小的</span></span><br><span class="line">            <span class="keyword">if</span> (n &lt;= nums[start] &amp;&amp; n &lt; nums[end]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; nums[start] &amp;&amp; n &gt; nums[end]) <span class="keyword">return</span> start;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= nums[start] &amp;&amp; n &gt; nums[end]) &#123;</span><br><span class="line">                <span class="comment">// 判断分割点在左右哪个数组</span></span><br><span class="line">                <span class="keyword">if</span> (n &lt;= nums[mid]) <span class="keyword">return</span> doSplitArray(nums, n, mid + <span class="number">1</span>, end);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> doSplitArray(nums, n, start, mid);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; end || (start == end &amp;&amp; nums[start] != target)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) <span class="keyword">return</span> doBinarySearch(nums, start, mid, target);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> doBinarySearch(nums, mid + <span class="number">1</span>, end, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-45.png" alt="upload successful"></p>
<h2 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array-M"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array-M" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array  M"></a>34. Find First and Last Position of Element in Sorted Array  M</h2><p>二分就行的题目 ， 30分钟 100%+95% </p>
<ul>
<li>题目<ul>
<li>给定一个排序数组，找出目标的起始位置和终点位置下标 </li>
<li>思路：先定位到目标，然后从目标往前和往后看是否连续，记录最后一次连续下标</li>
<li>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</li>
<li>If target is not found in the array, return [-1, -1].</li>
<li>Follow up: Could you write an algorithm with O(log n) runtime complexity?</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">int</span> res = binarySearch(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, target);</span><br><span class="line">            <span class="keyword">if</span> (res == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">int</span> s = res, e = res;</span><br><span class="line">            <span class="comment">// 往前查看连续</span></span><br><span class="line">            <span class="keyword">while</span> (s &gt; <span class="number">0</span> &amp;&amp; nums[s] == nums[s - <span class="number">1</span>]) s--;</span><br><span class="line">            <span class="comment">// 往后查看</span></span><br><span class="line">            <span class="keyword">while</span> (e &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[e] == nums[e + <span class="number">1</span>]) e++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;s, e&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; end || (start == end &amp;&amp; nums[start] != target)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) <span class="keyword">return</span> binarySearch(nums, start, mid, target);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> binarySearch(nums, mid + <span class="number">1</span>, end, target);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-46.png" alt="upload successful"></p>
<h2 id="35-Search-Insert-Position-easy"><a href="#35-Search-Insert-Position-easy" class="headerlink" title="35. Search Insert Position easy"></a>35. Search Insert Position easy</h2><p>easy 题  没什么好说的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInsertPosition35</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().searchInsert(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题：Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</span></span><br><span class="line"><span class="comment">     * Input: nums = [1,3,5,6], target = 2</span></span><br><span class="line"><span class="comment">     * Output: 1</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路：不仅得找到下标，如果没找到还得找到应该插入的下标，二分法，直到start==end的时候判断 target&lt;=nums[start]的话 返回start，否则返回 start-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> doBinarySearch(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &lt;= nums[start]) <span class="keyword">return</span> start;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> start + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid]==target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) <span class="keyword">return</span> doBinarySearch(nums, start, mid, target);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> doBinarySearch(nums, mid + <span class="number">1</span>, end, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
        <tag>BinarySearch</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode每日三道题06 动态规划</title>
    <url>/2021/05/13/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%89%E9%81%93%E9%A2%9806-array/</url>
    <content><![CDATA[<h1 id="Unique-Paths"><a href="#Unique-Paths" class="headerlink" title="Unique Paths"></a>Unique Paths</h1><p>medium 动态规划题<br>一次ac<br><img src="/images/pasted-62.png" alt="upload successful"></p>
<p><img src="/images/pasted-59.png" alt="upload successful"></p>
<p>机器人只能向右和向下走，问走到终点几种方案，比较简单的经典动规</p>
<p>思路：在finish上方和左边到finish点个只有一种，记录下来，finish点左上方到达下面一个点是1种，到达右边也是一种，所以左上角到终点是<code>1*1 + 1*1 = 2</code> 种。所以对于每个点只要算上右边和下边的和就够了。</p>
<p><img src="/images/pasted-60.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniquePaths62</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().uniquePaths(<span class="number">7</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A robot is located at the top-left corner of a m x n grid (marked &#x27;Start&#x27; in the diagram below).</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#x27;Finish&#x27; in the diagram below).</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * How many possible unique paths are there?</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Input: m = 3, n = 2</span></span><br><span class="line"><span class="comment">     * Output: 3</span></span><br><span class="line"><span class="comment">     * Explanation:</span></span><br><span class="line"><span class="comment">     * From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span></span><br><span class="line"><span class="comment">     * 1. Right -&gt; Down -&gt; Down</span></span><br><span class="line"><span class="comment">     * 2. Down -&gt; Down -&gt; Right</span></span><br><span class="line"><span class="comment">     * 3. Down -&gt; Right -&gt; Down</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                matrix[m - <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                matrix[i][n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    matrix[i][j] = matrix[i + <span class="number">1</span>][j] + matrix[i][j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Unique-Paths-II"><a href="#Unique-Paths-II" class="headerlink" title="Unique Paths II"></a>Unique Paths II</h1><p>在上题基础上加了障碍物</p>
<p><img src="/images/pasted-63.png" alt="upload successful"></p>
<p>思路：还是和上题一样，只不过每个节点算下和右和的时候如果有障碍物不算进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leetcode 的eg真是佛了，还有输入&#123;&#123;0&#125;&#125;和&#123;&#123;1&#125;&#125;，&#123;&#123;0，0&#125;，&#123;0，1&#125;&#125;即起点在终点，终点被堵住这种情况。</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-64.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniquePathsII63</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().uniquePathsWithObstacles(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">0</span>&#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A robot is located at the top-left corner of a m x n grid (marked &#x27;Start&#x27; in the diagram below).</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#x27;Finish&#x27; in the diagram below).</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Now consider if some obstacles are added to the grids. How many unique paths would there be?</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * An obstacle and space is marked as 1 and 0 respectively in the grid.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">            <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[m - <span class="number">1</span>][n - <span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[m - <span class="number">1</span>][i] == <span class="number">1</span>) obstacleGrid[m - <span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == n - <span class="number">2</span>) obstacleGrid[m - <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> obstacleGrid[m - <span class="number">1</span>][i] = obstacleGrid[m - <span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][n - <span class="number">1</span>] == <span class="number">1</span>) obstacleGrid[i][n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == m - <span class="number">2</span>) obstacleGrid[i][n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> obstacleGrid[i][n - <span class="number">1</span>] = obstacleGrid[i + <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) obstacleGrid[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        obstacleGrid[i][j] = obstacleGrid[i + <span class="number">1</span>][j] + obstacleGrid[i][j + <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obstacleGrid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Minimum-Path-Sum"><a href="#Minimum-Path-Sum" class="headerlink" title="Minimum Path Sum"></a>Minimum Path Sum</h1><p><img src="/images/pasted-67.png" alt="upload successful"></p>
<p>思路和上面两题一样 动规</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static class Solution &#123;</span><br><span class="line">        public int minPathSum(int[][] grid) &#123;</span><br><span class="line">            int m = grid.length;</span><br><span class="line">            int n = grid[0].length;</span><br><span class="line">            for (int i = m - 2; i &gt;= 0; i--) grid[i][n - 1] +=  grid[i + 1][n - 1];</span><br><span class="line">            for (int i = n - 2; i &gt;= 0; i--) grid[m - 1][i] += grid[m - 1][i + 1];</span><br><span class="line">            for (int i = m - 2; i &gt;= 0; i--) &#123;</span><br><span class="line">                for (int j = n - 2; j &gt;= 0; j--) &#123;</span><br><span class="line">                    grid[i][j] += Math.min(grid[i + 1][j], grid[i][j + 1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return grid[0][0];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux ssh scp</title>
    <url>/2020/09/04/Linux-ssh/</url>
    <content><![CDATA[<h4 id="linux-ssh"><a href="#linux-ssh" class="headerlink" title="linux ssh"></a>linux ssh</h4><ol>
<li><p>普通远程登录：<code>ssh -p [port] [user@ip]</code> eg:<code>ssh -p 22 root@39.108.xx.xx</code></p>
</li>
<li><p>免密登录： <code>ssh-copy-id -p [port] [user@ip] </code> eg:<code>ssh-copy-id -p 22 root@39.108.159.175 </code></p>
<p> 拷贝本机的ssh-key-gen生成的key即可</p>
</li>
</ol>
<p>写了一个简单的脚本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 #!/bin/bash</span><br><span class="line"> 2 #--------------------------------------------</span><br><span class="line"> 3 # 连接远程服务器脚本</span><br><span class="line"> 4 # author：tr</span><br><span class="line"> 5 # date：2020-09-04</span><br><span class="line"> 6 #--------------------------------------------</span><br><span class="line"> 7 ##### 服务器配置 开始#####</span><br><span class="line"> 8 remote=(</span><br><span class="line"> 9     root@39.108.xx.xx                                                                         </span><br><span class="line">10 )</span><br><span class="line">11 </span><br><span class="line">12 #### 服务器配置结束 #####</span><br><span class="line">13 echo &#x27;***********select ecs**************&#x27;</span><br><span class="line">14 num=1</span><br><span class="line">15 for ip in $&#123;remote[*]&#125;</span><br><span class="line">16 do</span><br><span class="line">17     echo &#x27;ip select &#x27;$num&#x27;:&#x27; $&#123;ip&#125;</span><br><span class="line">18     num=`expr $num + 1`</span><br><span class="line">19 done</span><br><span class="line">20 read -p &#x27;Enter remote machine number : &#x27; num</span><br><span class="line">21 select_ip=$&#123;remote[`expr $num - 1`]&#125;</span><br><span class="line">22 echo &#x27;connecting to : &#x27;$select_ip &#x27;...&#x27;</span><br><span class="line">23 ssh -p 22 $select_ip</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><p> 下载文件:<code>scp user@host:&lt;文件路径&gt; &lt;本地路径&gt;</code> eg:<code>scp root@39.108.xxx.xxx:~/test ~/home/tr</code></p>
<p> 下载文件夹<code>scp -r user@host:&lt;文件夹路径&gt; &lt;本地路径&gt;</code> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux编辑桌面图标</title>
    <url>/2020/09/04/Linux%E7%BC%96%E8%BE%91%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h4 id="linux-编辑桌面图标"><a href="#linux-编辑桌面图标" class="headerlink" title="linux 编辑桌面图标"></a>linux 编辑桌面图标</h4><p>我使用的是gnome3，此配置对dash-to-dock生效</p>
<p><code>vim .local/share/applications/wine-extension-chm.desktop</code> 可编辑启动命令，图标等等</p>
<p><code>ls .local/share/icons/</code> 图标库</p>
<p>如需使用独显开启 命令加上前缀 optirun</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis分页</title>
    <url>/2020/04/21/MyBatis%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h3 id="MyBatis分页"><a href="#MyBatis分页" class="headerlink" title="MyBatis分页"></a>MyBatis分页</h3><p>分页问题：分页的几种实现，前后端分页分别是干嘛的</p>
<span id="more"></span>

<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>顾名思义，分页是为了将数据库查到的大量数据分成多页送出，原来我以为回送所有数据，分页操作由前端来做，在此之前都是自己在前端分页。然而工作中遇到的分页都是后端做的，前端的分页只是简单的在调用接口的时候将<code>currentPage</code> <code>pageSize</code>即当前页，一页大小作为参数发送给后端，后端只给部分分页数据。</p>
<p>前端：用户点击的前端页面，点击了第二页，此时每页大小20，那么前端发送<code>.../xxx?currentPage=2&amp;pageSize=20</code>,后端接受，计算。</p>
<p>后端：从数据库中查到100条数据，生成一个<code>list</code>，将其中的<code>(currentPage-1)*pageSize 到 currentPage*pageSize</code>数据送出 ，即<code>(2-1)*20=20 到 2*20=40</code>，20-40号送出</p>
<p>可以直接使用<code>list.sublist(start,end)</code>完成</p>
<h4 id="mybatis分页"><a href="#mybatis分页" class="headerlink" title="mybatis分页"></a>mybatis分页</h4><ol>
<li>每次取出全部数据，分出其中需要的数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有数据</span></span><br><span class="line">      List&lt;GraphVO&gt; list = mapper.showGraphList(name);</span><br><span class="line">		<span class="comment">//设置全部数据条数</span></span><br><span class="line">      page.setTotal(list.size());</span><br><span class="line">      <span class="keyword">long</span> currentPage = page.getCurrent();</span><br><span class="line">      <span class="keyword">long</span> pageSize = page.getSize();</span><br><span class="line"><span class="comment">// 给出当前数据</span></span><br><span class="line">      list =  list.subList((<span class="keyword">int</span>) ((currentPage-<span class="number">1</span>)*pageSize), (<span class="keyword">int</span>) (currentPage*pageSize)); <span class="comment">//直接在list中截取</span></span><br><span class="line"></span><br><span class="line">      page.setRecords(list);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> PageUtils(page);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在sql中分页,mapper传入参数</li>
</ol>
<p>limit是mysql的 ，oracle得用rownum实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;showList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;GraphVO&quot;</span>&gt;</span></span><br><span class="line">        select * from Graph limit #&#123;currIndex&#125; , #&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>其他分页暂时没用到，用到再写</li>
</ol>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/04/30/Nginx/</url>
    <content><![CDATA[<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>后台不修改的情况下前端跨域问题</p>
<span id="more"></span>

<h4 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><img src="/images/pasted-18.png" alt="upload successful"></p>
<p>浏览器访问nginx入口，nigx代理到实际前端页面，前端想访问跨域资源时访问nginx代理，这样对用户浏览器来说一直都是nginx端口，所以不会产生跨域。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>前端web iframe访问跨域</p>
<p><code>&lt;iframe id=&#39;svg-show&#39; name=&#39;svg-show&#39; src=&quot;http://localhost:8981/api/tumo/svgOperator.jsp?fileId=123123&quot; class=&quot;layui-col-md12&quot; style=&quot;height: 600px&quot;&gt;&lt;/iframe&gt;</code></p>
<p>使用intellij 内置jetty启动</p>
<p><img src="/images/pasted-20.png" alt="upload successful"></p>
<p>后端接口：<code>http://localhost:8080/pssc_service_graph/tumo/svgOperator.jsp?fileId=F92F43DD-36C0-4AB4-A5E9-A5D4821D784C</code></p>
<p>nginx配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">       listen 8981;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       location /&#123;</span><br><span class="line">           proxy_pass http://localhost:63342;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /api&#123;</span><br><span class="line">           proxy_pass http://localhost:8080/pssc_service_graph;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>OracleSql+mybatis</title>
    <url>/2020/05/26/OracleSql/</url>
    <content><![CDATA[<h3 id="OracleSql-mybatis"><a href="#OracleSql-mybatis" class="headerlink" title="OracleSql+mybatis"></a>OracleSql+mybatis</h3><p>oracle sql与mysql sql 区别还是有的，复习sql</p>
<span id="more"></span>

<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ol>
<li>case when 列变量转为其他值</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.obj_id,</span><br><span class="line">       t.graph_id,</span><br><span class="line">       t.graph_name,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> graph_type <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;黑图&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> graph_type</span><br><span class="line">               <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;历史图&#x27;</span></span><br><span class="line">           <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>                 <span class="keyword">as</span> graph_type,</span><br><span class="line">       t.create_time,</span><br><span class="line">       t.graph_version,</span><br><span class="line">       (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">from</span> t_pw_tm_singlegraph x</span><br><span class="line">        <span class="keyword">where</span> x.graph_id <span class="operator">=</span> t.graph_id) <span class="keyword">as</span> graphcount</span><br><span class="line"><span class="keyword">from</span> t_pw_tm_singlegraph t</span><br><span class="line"><span class="keyword">where</span> t.graph_type <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> t.graph_name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>decode </li>
</ol>
<p>decode 列名，匹配的值，转为的值，匹配，转为,………，其他情况的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> bsb.OUTAGE_TYPE, decode(bsb.DATA_SRC, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="keyword">null</span>) DATA_SRC <span class="keyword">from</span> bsb) tt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>nvl()</li>
</ol>
<p><code>nvl(table1.name, &#39;test&#39;)</code> 值是否为空，空则返回test</p>
<ol start="4">
<li>日期模糊查询</li>
</ol>
<p><code>where to_char(t.INSERT_TIME,&#39;yyyy-mm-dd hh24:mi:ss&#39;) like &#39;%2020%&#39;</code></p>
<ol start="5">
<li>resultMap</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultMapId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.nari.domain.testVO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">typeHandler</span> = <span class="string">&quot;com.nari.core.mp.utils.AESEncryptHandler&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultMap对应的查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getFunc&quot;</span> <span class="attr">resultMap</span>=<span class="string">&#x27;resultMapId&#x27;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">        select * ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Sql</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>Sql</tag>
      </tags>
  </entry>
  <entry>
    <title>PythonUrl请求GET+POST</title>
    <url>/2019/04/23/PythonUrl%E8%AF%B7%E6%B1%82GET-POST/</url>
    <content><![CDATA[<h3 id="python中的GET-POST"><a href="#python中的GET-POST" class="headerlink" title="python中的GET+POST"></a>python中的GET+POST</h3><p>公司要求调用后台api，不能直接插入数据库。</p>
<p>首先import包<br>import urlib，urllib2<br>import requests</p>
<span id="more"></span>

<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span> <span class="keyword">import</span> urllib,urllib2</span><br><span class="line">  <span class="number">2</span> </span><br><span class="line">  <span class="number">3</span> <span class="function"><span class="keyword">def</span> <span class="title">getToken</span>(<span class="params">url,imgName</span>):</span></span><br><span class="line">  <span class="number">4</span>    textmod=&#123;<span class="string">&#x27;name&#x27;</span>:imgName&#125;</span><br><span class="line">  <span class="number">5</span>    textmod = urllib.urlencode(textmod)</span><br><span class="line">  <span class="number">6</span>    <span class="comment"># start get request</span></span><br><span class="line">  <span class="number">7</span>    req = urllib2.Request(url=<span class="string">&#x27;%s%s%s&#x27;</span> % (url,<span class="string">&#x27;?&#x27;</span>,textmod))</span><br><span class="line">  <span class="number">8</span>    <span class="built_in">print</span>(req.__dict__)</span><br><span class="line">  <span class="number">9</span>    res = urllib2.urlopen(req)</span><br><span class="line"> <span class="number">10</span>    res=res.read()</span><br><span class="line"> <span class="number">11</span>    <span class="built_in">print</span>(res)</span><br><span class="line"> <span class="number">12</span> </span><br><span class="line"> <span class="number">13</span> <span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> <span class="number">14</span>     imgName = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"> <span class="number">15</span>     url=<span class="string">&#x27;http://192.168.0.100:8066/api/v1/oss/token/file/question&#x27;</span></span><br><span class="line"> <span class="number">16</span>     getToken(url,imgName)</span><br><span class="line">~                               </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pushData</span>(<span class="params">json_data, url</span>):</span></span><br><span class="line">     headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;X-UserId&#x27;</span>: <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">     response = requests.post(url, data=json_data, headers=headers)</span><br><span class="line">     <span class="built_in">print</span></span><br><span class="line">     json_data</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python报错问题解决：&#39;ascii&#39; codec can&#39;t encode character</title>
    <url>/2019/04/25/Python%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%9A-ascii-codec-can-t-encode-character/</url>
    <content><![CDATA[<h3 id="python报错问题解决：’ascii’-codec-can’t-encode-character"><a href="#python报错问题解决：’ascii’-codec-can’t-encode-character" class="headerlink" title="python报错问题解决：’ascii’ codec can’t encode character"></a>python报错问题解决：’ascii’ codec can’t encode character</h3><p>vim /usr/lib/python2.7/site-packages/sitecustomize.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加如下内容，设置编码为utf8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># encoding=utf8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python提取word图片</title>
    <url>/2019/04/24/Python%E6%8F%90%E5%8F%96word%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="Python提取word图片"><a href="#Python提取word图片" class="headerlink" title="Python提取word图片"></a>Python提取word图片</h3><span id="more"></span>

<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word2pic</span>(<span class="params">path</span>):</span></span><br><span class="line">    zip_path = path.replace(<span class="string">&#x27;docx&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>)</span><br><span class="line">    shutil.copy(path,zip_path)</span><br><span class="line">    f =  zipfile.ZipFile(zip_path,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./word_pic_save&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        shutil.rmtree(<span class="string">&#x27;./word_pic_save&#x27;</span>)</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./word_pic_save&#x27;</span>)</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./word_pic_save/tmp&#x27;</span>)</span><br><span class="line">    <span class="comment">#os.chdir(&#x27;./word_pic_save&#x27;)</span></span><br><span class="line">    <span class="comment">#print os.getcwd()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># do extract</span></span><br><span class="line">    <span class="keyword">for</span> efile <span class="keyword">in</span> f.namelist():</span><br><span class="line">        f.extract(efile,<span class="string">&#x27;./word_pic_save/tmp&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    pic = os.listdir(<span class="string">&#x27;./word_pic_save/tmp/word/media&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pic:</span><br><span class="line">        shutil.copy(os.path.join(<span class="string">&#x27;./word_pic_save/tmp/word/media&#x27;</span>,i),<span class="string">&#x27;./word_pic_save&#x27;</span>)</span><br><span class="line">    shutil.rmtree(<span class="string">&#x27;./word_pic_save/tmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    word2pic(<span class="string">&#x27;cp1.docx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python解析Json</title>
    <url>/2019/04/23/Python%E8%A7%A3%E6%9E%90Json/</url>
    <content><![CDATA[<h3 id="JSON问题"><a href="#JSON问题" class="headerlink" title="JSON问题"></a>JSON问题</h3><p>目标解析对象数组的对象如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">24</span> <span class="class"><span class="keyword">class</span> <span class="title">Question</span>:</span></span><br><span class="line"><span class="number">25</span> </span><br><span class="line"><span class="number">26</span>     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, qid, item, options, answer, point, analysis</span>):</span></span><br><span class="line"><span class="number">27</span>         self.qid = qid</span><br><span class="line"><span class="number">28</span>         self.item = item</span><br><span class="line"><span class="number">29</span>         self.option = Option(options)</span><br><span class="line"><span class="number">30</span>         self.answer = answer</span><br><span class="line"><span class="number">31</span>         self.point = point</span><br><span class="line"><span class="number">32</span>         self.analysis = analysis</span><br><span class="line"><span class="number">33</span> </span><br><span class="line"><span class="number">34</span>     <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="number">35</span>         <span class="built_in">print</span></span><br><span class="line"><span class="number">36</span>         <span class="built_in">str</span>(self.qid) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(self.item) + <span class="built_in">str</span>(self.answer) + <span class="built_in">str</span>(self.point) + <span class="built_in">str</span>(self.analysis)</span><br><span class="line"><span class="number">37</span>         self.option.display()</span><br><span class="line"><span class="number">38</span> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h4 id="对象转JSON"><a href="#对象转JSON" class="headerlink" title="对象转JSON"></a>对象转JSON</h4><p>import json</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是复杂对象的json转换，因为对象里面还有对象</span></span><br><span class="line"><span class="comment"># quesOut是Question的一个实例</span></span><br><span class="line">json_out = json.dumps(quesOut, default=<span class="keyword">lambda</span> o: o.__dict__, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">             <span class="built_in">print</span> json_out</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="JSON转对象"><a href="#JSON转对象" class="headerlink" title="JSON转对象"></a>JSON转对象</h4><p>本地打开Json文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">24</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">fileName</span>):</span></span><br><span class="line"><span class="number">25</span>     <span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="number">26</span>         load_json = json.load(f)</span><br><span class="line"><span class="number">27</span>         question_size = load_json[<span class="string">&#x27;size&#x27;</span>]</span><br><span class="line"><span class="number">28</span>         <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(question_size):</span><br><span class="line"><span class="number">29</span>             <span class="comment">#print load_json[&#x27;res&#x27;][&#x27;questions&#x27;][i]</span></span><br><span class="line"><span class="number">30</span>             parseOneJson(load_json[<span class="string">&#x27;res&#x27;</span>][<span class="string">&#x27;questions&#x27;</span>][i])</span><br><span class="line"><span class="number">31</span> </span><br><span class="line"><span class="number">32</span>         <span class="built_in">print</span> load_json[<span class="string">&#x27;res&#x27;</span>][<span class="string">&#x27;questions&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;questionType&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Json</tag>
      </tags>
  </entry>
  <entry>
    <title>Python转换Json格式插入数据库</title>
    <url>/2019/04/24/Python%E8%BD%AC%E6%8D%A2Json%E6%A0%BC%E5%BC%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="公司任务"><a href="#公司任务" class="headerlink" title="公司任务"></a>公司任务</h3><p>是一个使用json和list的例子,所以还是记录下</p>
<span id="more"></span>

<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># parse json and use api to upload all question</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">QUESTION_BANK_ID=<span class="number">77</span></span><br><span class="line">KNOWLEDGE_POINT_IDS=[<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line">QUESTION_ADD_URL=<span class="string">&#x27;http://192.168.0.100:8882/api/v1/questions/add&#x27;</span></span><br><span class="line">X_USERID=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commonChange</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;useCount&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    question[<span class="string">&#x27;questionBankId&#x27;</span>]= QUESTION_BANK_ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pushData</span>(<span class="params">json_data,url</span>):</span></span><br><span class="line">    headers=&#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;X-UserId&#x27;</span>: X_USERID&#125;</span><br><span class="line">    response = requests.post(url, data=json_data, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;insert succeed&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    commonChange(question)</span><br><span class="line">    <span class="comment"># 题型  0：判断题，1：单选题，2：多选题，3：填空题，4：简答题，5：代码题</span></span><br><span class="line">    <span class="keyword">if</span> question[<span class="string">&#x27;questionType&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        formatJudgeQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">1</span>:</span><br><span class="line">        formatSingleChoiceQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">2</span>:</span><br><span class="line">        formatMuitlChoiceQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">3</span>:</span><br><span class="line">        formatFillQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">4</span>:</span><br><span class="line">        formatAnswerQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">5</span>:</span><br><span class="line">        formatCodeQuestion(question)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;error can\&#x27;t parse&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatSingleChoiceQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 单选题&#x27;</span></span><br><span class="line">    question[<span class="string">&#x27;knowledgePointIds&#x27;</span>]=KNOWLEDGE_POINT_IDS</span><br><span class="line">    <span class="comment"># del tags&#x27;s id</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(question[<span class="string">&#x27;tags&#x27;</span>])):</span><br><span class="line">        <span class="keyword">del</span> question[<span class="string">&#x27;tags&#x27;</span>][i][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(question[<span class="string">&#x27;optionDTOS&#x27;</span>])):</span><br><span class="line">        <span class="keyword">del</span> question[<span class="string">&#x27;optionDTOS&#x27;</span>][i][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    question[<span class="string">&#x27;options&#x27;</span>] = question[<span class="string">&#x27;optionDTOS&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;optionDTOS&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    pushData(json.dumps(question),QUESTION_ADD_URL)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatJudgeQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 判断题&#x27;</span></span><br><span class="line">    <span class="comment"># delete optionsDTOS</span></span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;optionDTOS&#x27;</span>]</span><br><span class="line">    <span class="comment"># del tags&#x27;s id</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(question[<span class="string">&#x27;tags&#x27;</span>])):</span><br><span class="line">        <span class="keyword">del</span> question[<span class="string">&#x27;tags&#x27;</span>][i][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    pushData(json.dumps(question),QUESTION_ADD_URL)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatMuitlChoiceQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 多选题&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatFillQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 填空题&#x27;</span></span><br><span class="line">    <span class="comment"># delete optionsDTOS</span></span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;optionDTOS&#x27;</span>]</span><br><span class="line">    question[<span class="string">&#x27;knowledgePointIds&#x27;</span>]=KNOWLEDGE_POINT_IDS</span><br><span class="line">    parseStr = question[<span class="string">&#x27;stem&#x27;</span>]</span><br><span class="line">    blankID=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    blanks=[]</span><br><span class="line">    <span class="keyword">while</span> re.match(<span class="string">r&#x27;.*(__.&#123;1&#125;__).*&#x27;</span>,parseStr):</span><br><span class="line">        blankID=re.match(<span class="string">r&#x27;.*(__.&#123;1&#125;__).*&#x27;</span>,parseStr).group(<span class="number">1</span>)         </span><br><span class="line">        parseStr = re.sub(blankID,<span class="string">&#x27;&#x27;</span>,parseStr)</span><br><span class="line">        blanks.append(&#123;</span><br><span class="line">            <span class="string">&quot;blankAnswer&quot;</span>:[<span class="string">&quot;sorry no answer avaiable for &quot;</span>+blankID],</span><br><span class="line">            <span class="string">&quot;blankId&quot;</span>:blankID    </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    question[<span class="string">&#x27;blanks&#x27;</span>] = json.dumps(blanks)</span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    pushData(json.dumps(question),QUESTION_ADD_URL)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatAnswerQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 简答题&#x27;</span></span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    pushData(json.dumps(question),QUESTION_ADD_URL)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatCodeQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 代码题&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">fileName</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        load_json = json.load(f)</span><br><span class="line">        question_size = load_json[<span class="string">&#x27;size&#x27;</span>]</span><br><span class="line">        <span class="comment"># start formating </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(question_size):</span><br><span class="line">            formatQuestion(load_json[<span class="string">&#x27;res&#x27;</span>][<span class="string">&#x27;questions&#x27;</span>][i])</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(<span class="string">&#x27;./quiz.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python通过rel关系解析word图片</title>
    <url>/2019/05/16/Python%E9%80%9A%E8%BF%87rel%E5%85%B3%E7%B3%BB%E8%A7%A3%E6%9E%90word%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="python解析图片"><a href="#python解析图片" class="headerlink" title="python解析图片"></a>python解析图片</h3><p>选用工具：python-docx，elementtree</p>
<p>最终目标：读取word文档，把文档里的图片和wmf转为<code>&lt;img src=&quot;&quot;/&gt;</code>或者<code>&lt;word-pic&gt;url&lt;/word-pic&gt;</code></p>
<h6 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h6><p>首先把所有的图片一次性提取出来，具体做法为将word名换为zip，解压缩将media包导出，但是这样存在一个问题：如何知道每个图片对应在word中的哪个位置。</p>
<p>第一种解决办法：由于图片是根据word中出现顺序排序的，所以扫描word文件，从0计数，将每出现的一个图片替换为计数。这样也存在问题：重复图片导致计数多与实际图片。wmf文件，就是word中每行中出现的矢量图，比如n不是n，而是wmf图片n。</p>
<span id="more"></span>

<p>第二种思路：将每段的word解析为xml文档，使用docx，其实这个底层原理也是通过映射每段与document.xml实现的。</p>
<p>解压缩word为zip时，可以看到document.xml文件，这才是word真正的样子，docx可以把每段的xml展示出来，再通过elementtree解析xml树，把每段变为：文本+图片文件名字</p>
<p>解析xml树代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">sys.stdout=io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs = docx.Document(<span class="string">&#x27;computer_science.docx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lineCounts = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fs.paragraphs:</span><br><span class="line">   <span class="keyword">if</span> lineCounts &lt;= <span class="number">0</span>:</span><br><span class="line">      exit()</span><br><span class="line">   root = ET.fromstring(line.paragraph_format.element.xml)</span><br><span class="line">   outStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   <span class="keyword">for</span> ele <span class="keyword">in</span> root.<span class="built_in">iter</span>():</span><br><span class="line">      <span class="comment"># print(ele.tag)</span></span><br><span class="line">      <span class="comment"># continue</span></span><br><span class="line">      <span class="keyword">if</span>(ele.tag==<span class="string">&quot;&#123;http://schemas.openxmlformats.org/wordprocessingml/2006/main&#125;t&quot;</span>):</span><br><span class="line">         outStr += ele.text</span><br><span class="line">      <span class="keyword">if</span>(ele.tag == <span class="string">&quot;&#123;urn:schemas-microsoft-com:vml&#125;shape&quot;</span>):</span><br><span class="line">         outStr += <span class="string">&quot;&lt;word-pic&gt;&quot;</span>+ele.get(<span class="string">&#x27;id&#x27;</span>)+<span class="string">&quot;&lt;/word-pic&gt;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(outStr)</span><br><span class="line">   outStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;*****&quot;</span>)</span><br><span class="line">   lineCounts -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解析的xml文档里放的是shapeid，就是直接对应media文件夹的图片，但是！！，shapeid有的时候不是“图片 2” 而是”_x0000…“，这就可能导致错误。</p>
<p>所以新的思路：在xml树里，每个图片都有一个r:id属性，值like：rid39。这个rid是word的映射对象，在解压缩后的document.xml.rel中可以找到对应的映射图片，比如rid39对应的target是图片12。</p>
<p>所以先变为rid,然后通过document.xml.rel文件将rid变为图片地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">sys.stdout=io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs = docx.Document(<span class="string">&#x27;computer_science.docx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lineCounts = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRidByRel</span>(<span class="params">rid</span>):</span></span><br><span class="line">   root = ET.ElementTree(file=<span class="string">&#x27;document.xml.rels&#x27;</span>)</span><br><span class="line">   <span class="keyword">for</span> ele <span class="keyword">in</span> root.<span class="built_in">iter</span>():</span><br><span class="line">      <span class="keyword">if</span> ele.tag == <span class="string">&quot;&#123;http://schemas.openxmlformats.org/package/2006/relationships&#125;Relationship&quot;</span>:</span><br><span class="line">         <span class="keyword">if</span> ele.get(<span class="string">&#x27;Id&#x27;</span>) == rid:</span><br><span class="line">            <span class="keyword">return</span> ele.get(<span class="string">&#x27;Target&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Null&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseLinePic</span>(<span class="params">line</span>):</span></span><br><span class="line">   root = ET.fromstring(line.paragraph_format.element.xml)</span><br><span class="line">   outStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   <span class="keyword">for</span> ele <span class="keyword">in</span> root.<span class="built_in">iter</span>():</span><br><span class="line">      <span class="comment"># print(ele.tag)</span></span><br><span class="line">      <span class="comment"># continue</span></span><br><span class="line">      <span class="keyword">if</span>(ele.tag==<span class="string">&quot;&#123;http://schemas.openxmlformats.org/wordprocessingml/2006/main&#125;t&quot;</span>):</span><br><span class="line">         outStr += ele.text</span><br><span class="line">      <span class="keyword">if</span>(ele.tag == <span class="string">&quot;&#123;urn:schemas-microsoft-com:vml&#125;imagedata&quot;</span>):</span><br><span class="line">         rid = ele.get(<span class="string">&#x27;&#123;http://schemas.openxmlformats.org/officeDocument/2006/relationships&#125;id&#x27;</span>)</span><br><span class="line">         outStr += <span class="string">&quot;&lt;word-pic&gt;&quot;</span>+parseRidByRel(rid)+<span class="string">&quot;&lt;/word-pic&gt;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> outStr</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fs.paragraphs:</span><br><span class="line">   <span class="keyword">if</span> lineCounts &lt;= <span class="number">0</span>:</span><br><span class="line">      exit()</span><br><span class="line">   outStr = parseLinePic(line)</span><br><span class="line">   <span class="built_in">print</span>(outStr)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   lineCounts -= <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">[Running] python -u &quot;c:\Users\tassa\Downloads\test.py&quot;</span><br><span class="line">第一章 计算机网络体系结构</span><br><span class="line">知识导图</span><br><span class="line">&lt;word-pic&gt;media/image1.png&lt;/word-pic&gt;&lt;word-pic&gt;media/image2.png&lt;/word-pic&gt;</span><br><span class="line">历年真题</span><br><span class="line">单项选择题</span><br><span class="line">1.在OSI参考模型中，直接为会话层提供服务的是，插入测试图片如下图（   ）。             [全国联考2014年]</span><br><span class="line">&lt;word-pic&gt;media/image2.png&lt;/word-pic&gt;</span><br><span class="line">A.应用层                             B.表示层</span><br><span class="line">C.运输层                             D.网络层</span><br><span class="line">2.在OSI参考模型中，&lt;word-pic&gt;media/image3.wmf&lt;/word-pic&gt;下列功能需由应用层的相邻层实现的是（   ）。   [全国联考2013年]</span><br><span class="line">A.对话管理                           B.数据格式转换</span><br><span class="line">C.路由选择                           D.可靠数据传输</span><br><span class="line">3.TCP/IP参考模型的网络层提供的是（   ）。                        [全国联考2011年]</span><br><span class="line">A.无连接不可靠的数据报服务           B.无连接可靠的数据报服务</span><br><span class="line">C.有连接不可靠的虚电路服务           D.有连接可靠的虚电路服务</span><br><span class="line">4.下列选项中，不属于网络体系结构所描述的内容是（   ）。          [全国联考2010年]</span><br><span class="line">A.网络的层次                         B.每一层使用的协议</span><br><span class="line">C.协议的内部实现细节                 D.每一层必须完成的功能</span><br><span class="line">5.在OSI参考模型中，自下而上第一个提供端到端服务的层次是（   ）。 [全国联考2009年]</span><br><span class="line">A.数据链路层                         B.运输层</span><br><span class="line">C.会话层                             D.应用层</span><br><span class="line">6.有关交换技术的论述，以下哪个是正确的？（   ）          [杭州电子科技大学2017年]</span><br><span class="line">A.电路交换要求在通信的双方之间建立起一条实际的物理通路，但通信过程中，这条通路可以与别的通信方共享</span><br><span class="line">B.现有的公用数据网都采用报文交换技术</span><br><span class="line">C.报文交换可以满足实时或交互式的通信要求</span><br><span class="line">D.分组交换将一个大报文分割成分组，并以分组为单位进行存储转发在接收端再将各分组重新装成一个完整的报文</span><br><span class="line">7.下列关于网络体系结构的描述中正确的是（   ）。          [杭州电子科技大学2017年]</span><br><span class="line">A.网络协议中的语法涉及的是用于协调与差错处理有关的控制信息</span><br><span class="line">B.在网络分层体系结构中，n层是&lt;word-pic&gt;media/image4.wmf&lt;/word-pic&gt;层的用户，又是&lt;word-pic&gt;media/image5.wmf&lt;/word-pic&gt;层的服务提供者</span><br><span class="line">C.OSI参考模型包括了体系结构、服务定义和协议规范三级抽象</span><br><span class="line">D.OSI和TCP/IP模型的网络层同时支持面向连接的通信和无连接通信</span><br><span class="line">8.下列关于虚电路方式中路由选择的正确说法是（   ）。      [杭州电子科技大学2017年]</span><br><span class="line">A.建立连接和发送数据都不进行路由选择</span><br><span class="line">B.只在建立虚电路时进行路由选择</span><br><span class="line">C.传送数据时进行路由选择</span><br><span class="line">D.建立连接和发送数据都进行路由选择</span><br><span class="line">9.网络协议的主要要素为（   ）。                          [桂林电子科技大学2016年]</span><br><span class="line">A.数据格式、编码、信号电平</span><br><span class="line">B.数据格式、控制信息、时序</span><br><span class="line">C.语法、语义、时序</span><br><span class="line">D.编码、控制信息、数据格式</span><br><span class="line">10.下述对广域网的作用范围叙述最准确的是（   ）。         [桂林电子科技大学2016年]</span><br><span class="line">A.几千米到十几千米</span><br><span class="line">B.几十千米到几百千米</span><br><span class="line">C.几十千米到几千千米</span><br><span class="line">D.几千千米以上</span><br><span class="line">11.如果比特率为&lt;word-pic&gt;media/image6.wmf&lt;/word-pic&gt;，发送3000位需要多长时间？（   ）  [桂林电子科技大学2016年]</span><br><span class="line">A.&lt;word-pic&gt;media/image7.wmf&lt;/word-pic&gt;                              B.&lt;word-pic&gt;media/image8.wmf&lt;/word-pic&gt;</span><br><span class="line">C.&lt;word-pic&gt;media/image9.wmf&lt;/word-pic&gt;                            D.&lt;word-pic&gt;media/image10.wmf&lt;/word-pic&gt;</span><br><span class="line">[Done] exited with code=0 in 1.571 seconds</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其次在完成了映射后还有一点需要做的就是（html是无法解析wmf文件的）把wmf转为pic。</p>
<p>思路是把media文件夹下的所有文件转为png结尾，文档解析的<word-pic>内的wmf后缀转为png。pip install Pillow后<br>使用 Pillow库转换代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wmf2Png</span>(<span class="params">fileName</span>):</span></span><br><span class="line">   Image.<span class="built_in">open</span>(fileName).save(re.sub(<span class="string">&#x27;wmf&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,fileName))</span><br><span class="line"></span><br><span class="line">wmf2Png(<span class="string">&quot;image5.wmf&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate</title>
    <url>/2019/04/01/RestTemplate/</url>
    <content><![CDATA[<h3 id="定义：访问第三方RESTful接口的网络请求框架"><a href="#定义：访问第三方RESTful接口的网络请求框架" class="headerlink" title="定义：访问第三方RESTful接口的网络请求框架"></a>定义：访问第三方RESTful接口的网络请求框架</h3><span id="more"></span>


<h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">** 将访问的页面变为String</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassRestController</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/testRest&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRest</span><span class="params">()</span></span>&#123;</span><br><span class="line">   		RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">      <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http..&quot;</span>,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以自动变为对象</span></span><br><span class="line">User user = restTemplate.getForObject(<span class="string">&quot;www....&quot;</span>,User.class);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>RestTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Ribbon</title>
    <url>/2019/04/01/Ribbon/</url>
    <content><![CDATA[<h3 id="Ribbon-均衡负载器"><a href="#Ribbon-均衡负载器" class="headerlink" title="Ribbon 均衡负载器"></a>Ribbon 均衡负载器</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Ribbon 是 Netflix 公司开源的一个负载均衡的组件，它属于上述的第二种方式，是将负载 均衡逻辑封装在客户端中，并且运行在客户端的进程里。 Ribbon 是一个经过了云端测试的 IPC 库，司以很好地控制 HTTP 和 TCP 客户端的负载均衡行为。 在 Spring Cloud 构建的微服务系统中， Ribbon 作为服务消费者的负载均衡器，有两种使用<br>方式，一种是和 RestTemplate 相结合，另一种是和 Feign 相结合。Feign 已经默认集成了 Ribbon</p>
<span id="more"></span>

<h4 id="使用Ribbon和RestTemplate"><a href="#使用Ribbon和RestTemplate" class="headerlink" title="使用Ribbon和RestTemplate"></a>使用Ribbon和RestTemplate</h4><p> <strong>本次示例说明</strong></p>
<p> 现有一个服务名为eureka-client的服务，启动了两个，一个是8762，一个是8763端口，现在启动一个名为eureka-client-ribbon端口，访问eureka-client服务，使用ribbon技术自动选择两个端口的一个。</p>
<p> 添加依赖：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p>编写一个RibbonConfigBean，只需要在程序的 IoC 容器中注入一个restTemplate 的 Bean ， 并在这个 Bean 上加上@LoadBalanced 注解，此时 RestTemplate 就结合了 Ribbon 开启了负载均衡功能，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eureka.eurekaclientribbon.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>写一个RibbonService 类，在该类的 hi（）方法用 restTemplate 调用 eureka-client 的 API 接口 ， 此时 Uri 上不需要使用硬编码（例如 IP 地址），只需要写服务名 eureka-client 即可，代码如下：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eureka.eurekaclientribbon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://eureka-client/hello?name=&quot;</span> + name, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写RibbonController 给出调用接口，本身访问其他接口</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eureka.eurekaclientribbon.controller;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> com.eureka.eurekaclientribbon.service.RibbonService;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     RibbonService ribbonService;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(required = true, defaultValue = &quot;tr&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> ribbonService.hi(name);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>代码总结：<br> 本质上是在调用者的controller使用一个RestTemplate通过http请求其他服务。这个RestTemplate需要自己写成一个bean，然后注解上@LoadBalanced即可使用。</p>
<p> <strong>千万不要忘记开启@EnableEurekaServer和@EnableEurekaClient</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL生成</title>
    <url>/2019/04/04/SSL%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h3 id="ssl本地生成脚本"><a href="#ssl本地生成脚本" class="headerlink" title="ssl本地生成脚本"></a>ssl本地生成脚本</h3><p>在公司部署前端到nginx服务器，遇到了证书问题，gateway有一个证书，前端有一个证书。</p>
<span id="more"></span>

<h4 id="本地生成脚本"><a href="#本地生成脚本" class="headerlink" title="本地生成脚本"></a>本地生成脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> create self-signed server certificate:</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Enter your domain [www.example.com]: &quot; DOMAIN</span><br><span class="line"></span><br><span class="line">echo &quot;Create server key...&quot;</span><br><span class="line"></span><br><span class="line">openssl genrsa -des3 -out $DOMAIN.key 1024</span><br><span class="line"></span><br><span class="line">echo &quot;Create server certificate signing request...&quot;</span><br><span class="line"></span><br><span class="line">SUBJECT=&quot;/C=US/ST=Mars/L=iTranswarp/O=iTranswarp/OU=iTranswarp/CN=$DOMAIN&quot;</span><br><span class="line"></span><br><span class="line">openssl req -new -subj $SUBJECT -key $DOMAIN.key -out $DOMAIN.csr</span><br><span class="line"></span><br><span class="line">echo &quot;Remove password...&quot;</span><br><span class="line"></span><br><span class="line">mv $DOMAIN.key $DOMAIN.origin.key</span><br><span class="line">openssl rsa -in $DOMAIN.origin.key -out $DOMAIN.key</span><br><span class="line"></span><br><span class="line">echo &quot;Sign SSL certificate...&quot;</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 3650 -in $DOMAIN.csr -signkey $DOMAIN.key -out $DOMAIN.crt</span><br><span class="line"></span><br><span class="line">echo &quot;TODO:&quot;</span><br><span class="line">echo &quot;Copy $DOMAIN.crt to /etc/nginx/ssl/$DOMAIN.crt&quot;</span><br><span class="line">echo &quot;Copy $DOMAIN.key to /etc/nginx/ssl/$DOMAIN.key&quot;</span><br><span class="line">echo &quot;Add configuration in nginx:&quot;</span><br><span class="line">echo &quot;server &#123;&quot;</span><br><span class="line">echo &quot;    ...&quot;</span><br><span class="line">echo &quot;    listen 443 ssl;&quot;</span><br><span class="line">echo &quot;    ssl_certificate     /etc/nginx/ssl/$DOMAIN.crt;&quot;</span><br><span class="line">echo &quot;    ssl_certificate_key /etc/nginx/ssl/$DOMAIN.key;&quot;</span><br><span class="line">echo &quot;&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是廖雪峰老师的脚本，很方便直接用，再写一个脚本导入到前端项目。</p>
<p>[<a href="https://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000]">https://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000]</a></p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在部署的时候遇到了一个很奇怪的问题，我直接访问项目入口会被提示证书认证错误，去后台gateway查看的时候发现日志提示证书unknown。再访问一遍gateway即可。</p>
<p>思路：应该是访问前端的时候获得了前端的证书，用证书访问会走一次网关，但是网关自己也有证书，不认前端的证书，这时候访问网关，获得网关的证书，再次访问即可识别。</p>
]]></content>
      <categories>
        <category>ssl</category>
      </categories>
      <tags>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala-Spark踩坑</title>
    <url>/2020/11/17/Scala-Spark%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h3 id="Scala-Spark-在idea下的错误记录"><a href="#Scala-Spark-在idea下的错误记录" class="headerlink" title="Scala Spark 在idea下的错误记录"></a>Scala Spark 在idea下的错误记录</h3><p>百度真坑爹，一群人互相抄作业，浪费时间</p>
<h4 id="Object-apache-is-not-a-member-of-package-org…"><a href="#Object-apache-is-not-a-member-of-package-org…" class="headerlink" title="Object apache is not a member of package org…"></a>Object apache is not a member of package org…</h4><p>idea下，使用默认的scala插件开发</p>
<p>错误描述：这个错误是缺少jar配置文件导致的，但是奇怪的是在linux系统下会出现这个问题，但是windows下使用msi安装sbt不会出现这个问题，idea真神奇</p>
<p>错误解决：</p>
<ol>
<li><p>导入spark下的jars（2.0版本后）</p>
</li>
<li><p>下载 <a href="https://talend-update.talend.com/nexus/content/repositories/libraries/org/talend/libraries/spark-assembly-1.6.0-hadoop2.6.0/6.0.0/">spark-assembly-1.6.0-hadoop2.6.0-6.0.0.jar</a> 然后导入即可，这个包包含了全部的集成环境</p>
</li>
<li><p>不要使用maven了，利用sbt构建环境，新建scala项目，右边选择sbt，在打开的build.sbt中写入以下依赖,版本自行决定</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">name := <span class="string">&quot;LearningSparkWithSBT&quot;</span></span><br><span class="line"></span><br><span class="line">version := <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line">scalaVersion := <span class="string">&quot;2.11.8&quot;</span></span><br><span class="line">libraryDependencies ++= <span class="type">Seq</span>(</span><br><span class="line">  <span class="string">&quot;org.apache.spark&quot;</span> %% <span class="string">&quot;spark-core&quot;</span> % <span class="string">&quot;2.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;org.apache.spark&quot;</span> %% <span class="string">&quot;spark-sql&quot;</span> % <span class="string">&quot;2.2.0&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>NOTE: 版本一定要保持一直，spark和对于的scala版本</p>
]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>SonarQube配置集成到Jenkins</title>
    <url>/2019/04/22/SonarQube%E9%85%8D%E7%BD%AE%E9%9B%86%E6%88%90%E5%88%B0Jenkins/</url>
    <content><![CDATA[<h3 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h3><p>onarQube简介<br>Sonar 是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。比如pmd-cpd、checkstyle、findbugs、Jenkins。通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。<br>此外，Sonar 的插件还可以对 Java 以外的其他编程语言（支持的语言包括：Java、PHP、C#、C、Cobol、PL/SQL、Flex等）提供支持，对国际化以及报告文档化也有良好的支持。可以说Sonar是目前最强大的代码质量管理工具之一。</p>
<span id="more"></span>

<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>sonarqube下载地址：<a href="http://www.sonarqube.org/downloads/">http://www.sonarqube.org/downloads/</a></p>
<p>下载配置JDK，参见博客：配置jdk</p>
<p>配置MySql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">mysql&gt; CREATE USER &#x27;sonar&#x27; IDENTIFIED BY &#x27;sonar&#x27;;</span><br><span class="line">mysql&gt; GRANT ALL ON sonar. TO &#x27;sonar&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;sonar&#x27;;</span><br><span class="line">mysql&gt; GRANT ALL ON sonar. TO &#x27;sonar&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;sonar&#x27;;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">这段的权限赋予可能有点问题，改为sonar.*，其他错误自行尝试，感觉是mysql版本的问题</span><br></pre></td></tr></table></figure>
<h4 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h4><p>官网下载后，解压后移动到/usr/local目录下</p>
<p>vim /etc/profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export SONAR_HOME=/usr/local/sonarqube-6.7</span><br><span class="line">export SONAR_RUNNER_HOME=/usr/local/sonar-runner-2.4</span><br><span class="line">PATH=$PATH:$SONAR_HOME/bin:$SONAR_RUNNER_HOME/bin</span><br></pre></td></tr></table></figure>

<p>source /etc/profile</p>
<p>配置/usr/local/sonarqube-6.7/conf/sonar.properties：</p>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<p>启动命令：</p>
<p>用root无法启动lSonarQube，需要另外新建普通用户来启动</p>
<p>useradd esadmin</p>
<p>chown -R esadmin.esadmin sonarqube-6.7</p>
<p>vim elasticsearch/config/elasticsearch.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55 network.host: 0.0.0.0</span><br><span class="line">56 #</span><br><span class="line">57 # Set a custom port for HTTP:</span><br><span class="line">58 #</span><br><span class="line">59 http.port: 9200</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>su esadmin</p>
<p>./bin/linux-x86-64/sonar.sh start</p>
<p>启动成功</p>
<p>日后可以使用脚本启动，脚本中这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 # start up sonarqube</span><br><span class="line">2 sudo su - esadmin -c &#x27;/usr/local/sonarqube-7.7/bin/linux-x86-64/sonar.sh restart &amp;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>启动的时候会报错</p>
<p>1.错误：max file descriptors [4096] for elasticsearch process is too low, increase to at least</p>
<p>解决方法：<br>[root@localhost ]#vim /etc/security/limits.conf</p>
<p>esadmin hard nofile 65536</p>
<p>esadmin soft nofile 65536</p>
<p>在文件最后添加以上两行</p>
<p>查看文件限制命令</p>
<p>[esadmin@localhost sonarqube-6.7]$ ulimit -Hn<br>Centos 7环境安装SonarQube和SonarQube Runner</p>
<p>2.错误，max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
<p>解决方法：<br>切换到root用户修改配置sysctl.conf</p>
<p>[root@localhost]#vim /etc/sysctl.conf</p>
<p>添加下面配置：<br>vm.max_map_count=655360</p>
<p>并执行命令：<br>[root@localhost java]# sysctl -p</p>
<p>解决好以上错误后就可以重启SonarQube</p>
<p>[esadmin@localhost sonarqube-6.7]$ ./bin/linux-x86-64/sonar.sh start</p>
<p>[root@localhost sonarqube-6.7]# ps -aux |grep sonar</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>默认密码和用户名都是：admin</p>
</li>
<li><p>生产token：在我的账户下面点击security</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark 学习 02 RDD</title>
    <url>/2020/11/17/Spark-%E5%AD%A6%E4%B9%A0-02-RDD/</url>
    <content><![CDATA[<h3 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h3><span id="more"></span>

<h4 id="1-0-RDD概念"><a href="#1-0-RDD概念" class="headerlink" title="1.0 RDD概念"></a>1.0 RDD概念</h4><ol>
<li><p>RDD 是弹性分布式数据集，有flatMap等api，也是编程模型。RDD 之间有依赖，且可以分区</p>
</li>
<li><p>分区：RDD和MR可以将自身分区到每一个block，处理每一个block的数据，如同hdfs，文件都被划分为block分布式存储在集群中。RDD和MR都是并行的。</p>
</li>
</ol>
<h4 id="2-0-CODE"><a href="#2-0-CODE" class="headerlink" title="2.0 CODE"></a>2.0 CODE</h4><ol>
<li>RDD实例化，SparkCore的入口SparkContext</li>
</ol>
<p>Driver和ClusterManager以及Worker的分布就如同C/S架构，SparkContext是Driver（前端客户端）最核心的组件。</p>
<p>Spark作为大入口，可以设置参数，设置jar包等</p>
<h5 id="2-1-RDD创建"><a href="#2-1-RDD创建" class="headerlink" title="2.1 RDD创建"></a>2.1 RDD创建</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建RDD三种方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 本地集合方式创建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rddCreationLocal</span></span>():<span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// 由于本地集合没有分区概念，提供集合还需要提供分区数量</span></span><br><span class="line">  <span class="keyword">val</span> rdd1:<span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Seq</span>(<span class="string">&quot;tzq&quot;</span>,<span class="string">&quot;tr&quot;</span>,<span class="string">&quot;tr&quot;</span>,<span class="string">&quot;spark&quot;</span>),<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> rdd2:<span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 另一个方法 本质和上面一样  不常见</span></span><br><span class="line">  <span class="keyword">val</span> rdd3 = sc.makeRDD(<span class="type">Seq</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从文件创建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rddCreationFiles</span></span>():<span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// 1. 路径（支持本地和hdfs。不加前缀（file or hdfs）的路径取决于启动状态是否是集群，集群默认读取hdfs）</span></span><br><span class="line">  <span class="comment">// 2. 分区若读取hdfs，那么分区数由文件决定</span></span><br><span class="line">  <span class="comment">// 3. 支持aws或者阿里云读取</span></span><br><span class="line">  sc.textFile(<span class="string">&quot;hdfs://node01:8020/data....&quot;</span>,<span class="number">2</span>) <span class="comment">// 最小分区数量参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 从Rdd创建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rddCreationFromRdd</span></span>():<span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> rdd1:<span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Seq</span>(<span class="string">&quot;tzq&quot;</span>,<span class="string">&quot;tr&quot;</span>,<span class="string">&quot;tr&quot;</span>,<span class="string">&quot;spark&quot;</span>),<span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 通过rdd的算子操作 会生成新的rdd</span></span><br><span class="line">  <span class="keyword">val</span> rdd2 = rdd1.map((_,<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-算子"><a href="#2-2-算子" class="headerlink" title="2.2 算子"></a>2.2 算子</h5><p>map,flatMap 同java stream<br>ReduceByKey 接受二元元祖（k:v)</p>
<h5 id="2-2-1算子分类："><a href="#2-2-1算子分类：" class="headerlink" title="2.2.1算子分类："></a>2.2.1算子分类：</h5><ol>
<li><p>基础数据类型的计算</p>
</li>
<li><p>k:v 计算（这里特指二元元组）(reduceByKey,groupByKey…..)</p>
</li>
<li><p>针对数字类型的操作（max,min….)</p>
</li>
</ol>
<h5 id="2-2-2-转换算子学习"><a href="#2-2-2-转换算子学习" class="headerlink" title="2.2.2 转换算子学习"></a>2.2.2 转换算子学习</h5><ol>
<li><p>map</p>
</li>
<li><p>flatMap</p>
</li>
<li><p>reduceByKey: 传入二元元组，按照key分组，传递分组的value计算</p>
</li>
<li><p>mapPartitions（并行）: 和map的区别，map针对单个数据（如果在其内数据库访问，效率很低），mapPartitions（不让每一条数据执行访问数据库，按照分区访问数据库，效率高）将RDD内的所有分区数据一次传输过去，map的话得每次单条传输过去给执行器</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. mapPartitions</span></span><br><span class="line">  <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 一个分区肯定不止一条数据</span></span><br><span class="line">  rdd1.mapPartitions(iter =&gt; &#123;</span><br><span class="line">    <span class="comment">// iter 是scala的数据类型</span></span><br><span class="line">    iter.map(_*<span class="number">10</span>)</span><br><span class="line">  &#125;).collect().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>mapPartitionsWithIndex(并行):</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="number">2</span>)</span><br><span class="line">	<span class="comment">// index 是分区号</span></span><br><span class="line">    rdd2.mapPartitionsWithIndex((index,iter)=&gt;&#123;</span><br><span class="line">      iter.foreach(x=&gt;println(x+<span class="string">&quot; belong index:&quot;</span>+index))</span><br><span class="line">      iter</span><br><span class="line">    &#125;).collect()</span><br></pre></td></tr></table></figure></li>
<li><p>filter</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// true 就留下</span></span><br><span class="line"><span class="keyword">val</span> rdd3 = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="number">2</span>)</span><br><span class="line">    rdd3.filter(_&gt;<span class="number">6</span>).collect().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>sample：如果数据太大，变为小数据集，随机抽取数据，保证速度</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="number">2</span>)</span><br><span class="line">      <span class="comment">// 参数1:是否有放回（是否能抽到同一个东西），false就是无放回，同一数不能抽取出两次   参数2：采样比例  参数3：种子，一般不指定</span></span><br><span class="line">      .sample(<span class="literal">false</span>,<span class="number">0.3</span>).collect().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>mapValues: 针对二元元组，可以用map代替，但是这个更方便</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)),<span class="number">2</span>)</span><br><span class="line">  .mapValues(_*<span class="number">10</span>).collect().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>交集 并集 差集：interaction union subtract</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rddx = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> rddy = sc.parallelize(<span class="type">Seq</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>), <span class="number">2</span>)</span><br><span class="line">  rddx.intersection(rddy).collect().foreach(println)</span><br><span class="line">  rddx.union(rddy).collect().foreach(println)</span><br><span class="line">  rddx.subtract(rddy).collect().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>groupByKey:每个分区重复的k:v可以出来，但是reduceByKey每个分区只能有一个key出来（可以减少io）</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7. 分组 groupByKey 本质是shuffle  生成key =&gt; 数组</span></span><br><span class="line">sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">4</span>)), <span class="number">2</span>)</span><br><span class="line">  .groupByKey().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>combineByKey: groupByKey和reduceByKey的底层</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8. combineByKey  算平均分</span></span><br><span class="line">    sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;tzq&quot;</span>, <span class="number">97.0</span>), (<span class="string">&quot;tzq&quot;</span>, <span class="number">98.0</span>), (<span class="string">&quot;tr&quot;</span>, <span class="number">88.0</span>), (<span class="string">&quot;tr&quot;</span>, <span class="number">92.0</span>)), <span class="number">2</span>)</span><br><span class="line">      <span class="comment">// 参数说明：1.将value初步转换（分区内） 2.在每个分区把上一步结果聚合 3. 在所有分区上把每个分区结果聚合 4.可选，分区函数 5.可选，是否在map端的Combine 6.序列化器</span></span><br><span class="line">      <span class="comment">// 思路：将每个数据变成(分数，1) 然后聚合 （总分，几）  一个分区结果就出来了</span></span><br><span class="line">      <span class="comment">// 然后将不同分区的均分聚合， 然后除 （均分，1）</span></span><br><span class="line">      <span class="comment">// 写法说明：第一个函数作用于第一条数据后，接着将结果和第二条数据作为参数传入第二个函数。 前两个函数作用于每个分区，将每个分区的结果作为参数传递给第三个函数</span></span><br><span class="line">      .combineByKey((_,<span class="number">1</span>),(c:(<span class="type">Double</span>,<span class="type">Int</span>),nextValue:<span class="type">Double</span>)=&gt;(c._1+nextValue,c._2+<span class="number">1</span>),(c:(<span class="type">Double</span>,<span class="type">Int</span>),v:(<span class="type">Double</span>,<span class="type">Int</span>))=&gt;(c._1+v._1,c._2+v._2))</span><br><span class="line">      .map(item=&gt;(item._1,(item._2._1/item._2._2,<span class="number">1</span>))).foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>foldByKey:比起reduceByKey有一个初始值（会加到每个元组）</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9. foldByKey</span></span><br><span class="line">   sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)), <span class="number">2</span>)</span><br><span class="line">     .foldByKey(<span class="number">10</span>)(_+_).collect().foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>aggregateByKey: 先处理 后聚合</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10. aggregateByKey 打八折后的总价</span></span><br><span class="line">    <span class="comment">// 参数说明：1. 初始值 2.seqop 作用于每个分区每条数据 传递初始值和每条数据的value 3. combOp 整体聚合生成最终结果</span></span><br><span class="line">    sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">10.0</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">20.0</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">30.0</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">40.0</span>)), <span class="number">2</span>)</span><br><span class="line">      .aggregateByKey(<span class="number">0.8</span>)((zeroValue,item)=&gt;item*zeroValue,(curr,agg)=&gt;curr+agg).foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>join</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">1</span>)), <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">10</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">12</span>)), <span class="number">2</span>)</span><br><span class="line">  rdd1.join(rdd2).foreach(println)</span><br></pre></td></tr></table></figure></li>
<li><p>sortBy:作用于任何数据类型，sortByKey只用于kv 且只能按照key排序，写法简单</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 12. sortBy</span></span><br><span class="line">   <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Seq</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="number">2</span>)</span><br><span class="line">   <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 参数：1.用哪个进行排序</span></span><br><span class="line">   rdd1.sortBy(item=&gt;item).collect().foreach(println)</span><br><span class="line">   rdd2.sortBy(item=&gt;item._2).collect().foreach(println)</span><br><span class="line">   rdd2.sortByKey().collect().foreach(println</span><br></pre></td></tr></table></figure></li>
<li><p>repartition</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 13. repartition</span></span><br><span class="line">   <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), <span class="number">2</span>)</span><br><span class="line">   <span class="comment">// 重新分区  分区越多线程越多 为了节省资源 可以适当减少分区数量</span></span><br><span class="line">   println(rdd.repartition(<span class="number">4</span>).partitions.size)</span><br><span class="line">   <span class="comment">// 减少合并分区</span></span><br><span class="line">   println(rdd.coalesce(<span class="number">5</span>,shuffle = <span class="literal">true</span>).partitions.size)</span><br><span class="line">   <span class="comment">// repatition 重分区时 默认shuffle</span></span><br><span class="line">   <span class="comment">// coalesce 重分区时 默认不shuffle 所以默认不增大分区</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><b>action 操作：一个actions生成一个job</b></p>
<ol start="17">
<li><p>collect </p>
</li>
<li><p>reduce  不是转换操作的reduceByKey，如果有10个不同key的多条数据，结果只有10条，但是reduce后只有1条，reduce针对所有数据类型</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 14. reduce</span></span><br><span class="line">   println(sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), <span class="number">2</span>)</span><br><span class="line">     .reduce(_ + _))</span><br><span class="line">   <span class="keyword">val</span> res = sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">1</span>)), <span class="number">2</span>)</span><br><span class="line">     .reduce((curr, agg) =&gt; (<span class="string">&quot;全部&quot;</span>, curr._2 + agg._2))</span><br><span class="line">   println(res._2)</span><br></pre></td></tr></table></figure></li>
<li><p>foreach 不同于scala本身的foreach，spark的算子会推送到集群执行，collect会将数据拉倒driver端，所以排序后不collect直接调用foreach会并行遍历各自分区的数据</p>
</li>
<li><p>count</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Seq</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">1</span>)), <span class="number">2</span>)</span><br><span class="line">    println(rdd.count())</span><br><span class="line">    println(rdd.countByKey())</span><br></pre></td></tr></table></figure></li>
<li><p>first() 返回第一个 take(N) 返回前N个,takeSample(withReplacement,fract)乐死sample，区别在于这是个action，直接返回结果到driver</p>
</li>
</ol>
<h5 id="2-3-Spark的一些注意点"><a href="#2-3-Spark的一些注意点" class="headerlink" title="2.3 Spark的一些注意点"></a>2.3 Spark的一些注意点</h5><ol>
<li><p>每个计算任务必须可以拆分并行</p>
</li>
<li><p>计算会对应到每个文件块</p>
</li>
<li><p>提高容错两种手段：保存数据集和状态到介质里 or 根据rdd依赖推算</p>
</li>
</ol>
<h5 id="2-4-弹性分布式数据集"><a href="#2-4-弹性分布式数据集" class="headerlink" title="2.4 弹性分布式数据集"></a>2.4 弹性分布式数据集</h5><p>RDD特性：</p>
<ol>
<li>惰性求值，只有collect，reduce才会开始计算</li>
<li>分区</li>
<li>RDD是只读的</li>
<li>RDD容错高，保存RDD之间的依赖，当RDD2计算错误，从RDD1计算回来，缓存</li>
</ol>
<p>弹性分布式数据集：</p>
<ol>
<li>RDD可以运行在集群中，</li>
<li>高容错，RDD数据可以缓存</li>
<li>RDD可以不保存具体数据，只保留必备信息（依赖和计算函数）</li>
</ol>
<h6 id="2-5-shffle"><a href="#2-5-shffle" class="headerlink" title="2.5 shffle"></a>2.5 shffle</h6><p> Maper1————-&gt;reducer1<br>      |—————<br>                     |<br> Maper2————-&gt;reducer2</p>
<p> Maper3</p>
<p> Mapper1 –&gt; reducer1 ,Mapper1 –&gt;reducer2,Mapper2 –&gt; reducer1 ………</p>
<p> shuffle 分为mapper端和reduce端，mapper将数据放入partition的函数计算，求得分到哪个reducer</p>
<p> [例子](<a href="https://www.jianshu.com/p/7f8d4484bfbd%EF%BC%89">https://www.jianshu.com/p/7f8d4484bfbd）</a></p>
<h5 id="2-6-RDD支持的数据类型"><a href="#2-6-RDD支持的数据类型" class="headerlink" title="2.6 RDD支持的数据类型"></a>2.6 RDD支持的数据类型</h5><p>String,数字，KV，对象</p>
<p>kv：类型 省略</p>
<p>数字类型支持（都是action）：</p>
<ol>
<li>count</li>
<li>mean 均值</li>
<li>max min sum</li>
<li>variance 方差</li>
<li>sampleVariance 采样中计算方差</li>
<li>stdev 标准差</li>
<li>sampleStdev 采样中计算标准差</li>
<li>…………很多</li>
</ol>
<h4 id="2-0-spark-core"><a href="#2-0-spark-core" class="headerlink" title="2.0 spark core"></a>2.0 spark core</h4><p>主要内容就是RDD</p>
<h4 id="3-0-案例（统计北京天气）"><a href="#3-0-案例（统计北京天气）" class="headerlink" title="3.0 案例（统计北京天气）"></a>3.0 案例（统计北京天气）</h4><ol>
<li>读取文件</li>
<li>抽取需要的列</li>
<li>按照日，时为基础，运行reduce 统计东西地区pm</li>
<li>排序，获取结果</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.<span class="type">StringUtils</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author tr</span></span><br><span class="line"><span class="comment"> * @Date 11/19/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StagePractice</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pmProcess</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 1. 创建SC  读取文件</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[6]&quot;</span>).setAppName(<span class="string">&quot;stage_practice&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> weatherSource = sc.textFile(<span class="string">&quot;data/beijing_all_20200101.csv&quot;</span>)</span><br><span class="line">    <span class="comment">// 2. 算子处理</span></span><br><span class="line">    <span class="comment">// 2.1 抽取数据 取date,hour作为key 东西作为value ( (key,value), value )</span></span><br><span class="line">    <span class="comment">// 2.2 数据清洗</span></span><br><span class="line">    <span class="comment">// 2.3 聚合</span></span><br><span class="line">    <span class="comment">//    weatherSource.map(_.split(&quot;,&quot;)).foreach(item=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//      item.foreach(x=&gt;print(x+&quot; || &quot;))</span></span><br><span class="line">    <span class="comment">//      println(&quot;\n*********&quot;)</span></span><br><span class="line">    <span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="keyword">val</span> resultRdd = weatherSource</span><br><span class="line">      .map(_.split(<span class="string">&quot;,&quot;</span>)).filter(x=&gt;  x.size&gt;<span class="number">2</span> &amp;&amp; x(<span class="number">2</span>).equalsIgnoreCase(<span class="string">&quot;PM2.5&quot;</span>) )</span><br><span class="line">      .map(item =&gt; ((item(<span class="number">0</span>), item(<span class="number">1</span>)), item(<span class="number">3</span>)))</span><br><span class="line">      .filter(item =&gt; <span class="type">StringUtils</span>.isNotEmpty(item._2) &amp;&amp; !item._2.equalsIgnoreCase(<span class="string">&quot;NA&quot;</span>))</span><br><span class="line">      .map(item =&gt; (item._1, item._2.toInt))</span><br><span class="line">      .reduceByKey(_ + _)</span><br><span class="line">      <span class="comment">// 按照第二项排序</span></span><br><span class="line">      .sortBy(_._2,<span class="literal">false</span>)</span><br><span class="line">    <span class="comment">// 3. 获取结果</span></span><br><span class="line">    resultRdd.take(<span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pmProcess()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-0-RDD-特性"><a href="#4-0-RDD-特性" class="headerlink" title="4.0 RDD 特性"></a>4.0 RDD 特性</h4><h5 id="4-1-RDD分区和shuffle"><a href="#4-1-RDD分区和shuffle" class="headerlink" title="4.1 RDD分区和shuffle"></a>4.1 RDD分区和shuffle</h5><p>分区作用：</p>
<ol>
<li><p>RDD经常需要读取外部系统文件创建（那么外部存储系统往往是支持分片的，Rdd需要分区来和外部系统的文件分片一一对应）</p>
</li>
<li><p>Rdd的分区是一个并行计算的实现手段</p>
</li>
</ol>
<p>shuffle特点：</p>
<p>只有 kV类型有shuffle</p>
<p>查看RDD分区</p>
<ol>
<li>进入控制台 <code>spark-shell --master local[6]</code></li>
<li>执行一个rdd <code>sc.parallelize(Seq(1,2,3,4,5,6,7,8,9))</code></li>
<li>进入webUI查看 <code>http://localhost:4040</code></li>
</ol>
<p>怎么创建分区：</p>
<ol>
<li>读取外部文件时指定分区数量    <code>sc.parallize(Seq(1,2,3),2)</code></li>
<li>通过本地集合创建时指定分区数量 <code>sc.textFile(&quot;/data/x.txt&quot;,2)</code></li>
</ol>
<p>怎么重分区：</p>
<ol>
<li><p>coalesce（N，false）：可以将分区缩小，如果需要扩大分区，指定shuffle：true</p>
</li>
<li><p>repartitions(N): 相当于coalesce的默认shuffle为true</p>
</li>
</ol>
<p>通过其他算子指定分区：一般通过shuffle的算子都可以手动指定分区数，如果没有指定，默认从父节点继承</p>
<p>shuffle过程简介：</p>
<p><code>rdd2 = rdd1.reduceByKey()</code>  实质是rdd2的调用函数，rdd2调用这个函数从rdd1拉取数据<br>，那么如何确定数据流入哪个分区，通过Partitioner函数：HashPartitioner，rdd2的分区和rdd1的分区是交错联系的，rdd2的每个分区去rdd1的每个分区内拉取数据</p>
<h5 id="4-2-RDD缓存"><a href="#4-2-RDD缓存" class="headerlink" title="4.2 RDD缓存"></a>4.2 RDD缓存</h5><h5 id="4-3-RDD的checkpoint"><a href="#4-3-RDD的checkpoint" class="headerlink" title="4.3 RDD的checkpoint"></a>4.3 RDD的checkpoint</h5><p>什么是checkpoint？ 斩断RDD的依赖链</p>
<p>方式： 本地存储，可靠的:缓存在hdfs上</p>
<p>Rdd之间有很多依赖关系，依赖链过长的话当某个rdd错误，需要追溯很久，斩断依赖链，就是不用计算之前的依赖链。</p>
<p>但是如果rdd错误，且之前的rdd已经斩断，正常情况下，可以重放，从上一个被斩断的节点开始(这个节点的结果已经被存放在外部可靠介质中,直接取出结果)</p>
<p>checkpoint本质还是缓存，但是和cache的区别是：</p>
<ol>
<li>checkpoint 数据可以保存在hdfs这类可靠介质内，cache和persist只能放在内存和磁盘</li>
<li>checkpoint可以斩断依赖链，但是cache和persist不可以</li>
</ol>
<p>使用checkpoint</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.读取文件</span></span><br><span class="line">   <span class="keyword">val</span> sourceRdd = sc.textFile(<span class="string">&quot;data/access_log.txt&quot;</span>)</span><br><span class="line">   <span class="comment">// 2.取出ip</span></span><br><span class="line">   <span class="keyword">val</span> ipRdd = sourceRdd.map(x =&gt; (x.split(<span class="string">&quot; &quot;</span>)(<span class="number">0</span>), <span class="number">1</span>))</span><br><span class="line">   <span class="comment">// 3.简单清洗 去掉空数据 去掉非法数据 根据业务再规整数据</span></span><br><span class="line">   <span class="keyword">val</span> cleanRdd = ipRdd.filter(x =&gt; <span class="type">StringUtils</span>.isNotEmpty(x._1))</span><br><span class="line">   <span class="comment">// 4.根据ip次数聚合</span></span><br><span class="line">   <span class="keyword">var</span> aggRdd = cleanRdd.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置checkpoint,调用的时候前面计算会执行一遍，将结果放入目录，因为checkpoint是先等待job执行完后启动一个线程去计算要checkpoint的内容</span></span><br><span class="line">   <span class="comment">// 所以应该在checkpoint之前进行一次cache，第一次就将结果缓存到内存，调用checkpoint的时候拿缓存的数据写入外部介质</span></span><br><span class="line">   aggRdd = aggRdd.cache()</span><br><span class="line">   aggRdd.checkpoint()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> lessIp = aggRdd.sortBy(_._2,<span class="literal">true</span>).first()</span><br><span class="line">   <span class="keyword">val</span> moreIp = aggRdd.sortBy(_._2,<span class="literal">false</span>).first()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark 学习 03 原理</title>
    <url>/2020/11/17/Spark-%E5%AD%A6%E4%B9%A0-03-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="Spark-学习-03-spark原理"><a href="#Spark-学习-03-spark原理" class="headerlink" title="Spark 学习 03 spark原理"></a>Spark 学习 03 spark原理</h3><h4 id="1-0-总体介绍"><a href="#1-0-总体介绍" class="headerlink" title="1.0 总体介绍"></a>1.0 总体介绍</h4><ol>
<li><p>为什么说一组电脑是spark集群？ 因为这一组电脑都运行了Spark，node01 运行了masterdaemon 所以node01是master，其他电脑运行了workderDaemon，所以其他是worker，workDaemon去master上认领任务，取得任务后还要创建和关闭executor</p>
</li>
<li><p>executor 怎么运行？ 首先运行一个executor Backend来管理executor，一对一关系</p>
</li>
<li><p>driver干嘛的？  整个spark application的驱动节点，action操作实质是将结果发给driver</p>
</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> textRdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">&quot;data/wordcount.txt&quot;</span>)</span><br><span class="line">   <span class="keyword">val</span> splitRdd = textRdd.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">   <span class="keyword">val</span> tupleRdd = splitRdd.map((_, <span class="number">1</span>))</span><br><span class="line">   <span class="keyword">val</span> reduceRdd = tupleRdd.reduceByKey(_ + _)</span><br><span class="line">   <span class="keyword">val</span> strRdd = reduceRdd.map(item =&gt; <span class="string">s&quot;<span class="subst">$&#123;item._1&#125;</span>,<span class="subst">$&#123;item._2&#125;</span>&quot;</span>)</span><br><span class="line">   strRdd.collect().foreach(println)</span><br></pre></td></tr></table></figure>

<h4 id="2-0-逻辑执行图"><a href="#2-0-逻辑执行图" class="headerlink" title="2.0 逻辑执行图"></a>2.0 逻辑执行图</h4><ol>
<li><p>代表了数据如何计算和流转，以wordCount为例，在结果调用print(strRdd.toCollectString()),可以看到依赖关系</p>
</li>
<li><p>并非执行单位，最后还是要划分到实际执行单位(机器怎么执行)</p>
</li>
</ol>
<h5 id="2-1-边界"><a href="#2-1-边界" class="headerlink" title="2.1 边界"></a>2.1 边界</h5><ol>
<li><p>rdd从第一个rdd的创建开始，到逻辑图action执行之前结束.就是一组rdd和其依赖关系</p>
</li>
<li><p>RDD 5大属性：分区，依赖，计算函数，最佳位置，分区函数</p>
</li>
</ol>
<h5 id="2-2-rdd如何生成"><a href="#2-2-rdd如何生成" class="headerlink" title="2.2 rdd如何生成"></a>2.2 rdd如何生成</h5><ol>
<li><p>sc.textFile在源码中回去生成一个对象：HadoopRdd，这个HadoopRdd继承了父类RDD并且重写了compute方法，这个compute方法实际调用了inputFormat方法，实际就是去读取hdfs文件块，HadoopRdd的一个分区实际就对应了hadoop的一个文件块。</p>
</li>
<li><p>map算子: 在源码中就是new了一个MapPartitionsRdd，且传递了一个scala的map方法给他的构造函数，并且由iter调用。spark map算子中接受的函数，实际交给了里面的scala的map。 这个iter实际是一个分区的迭代器。</p>
</li>
<li><p>flatMap算子：和map差不多</p>
</li>
</ol>
<h5 id="2-3-rdd之间有哪些依赖"><a href="#2-3-rdd之间有哪些依赖" class="headerlink" title="2.3 rdd之间有哪些依赖"></a>2.3 rdd之间有哪些依赖</h5><ol>
<li><p>rdd分区之间的关系，flatMap这些算子的分区关系是一一对应的</p>
</li>
<li><p>多对一的关系：reduceByKey</p>
</li>
</ol>
<p>为什么要对rdd划分依赖关系：想确定rdd是否能在同一流水线上执行(取决于两个是否是shuffle关系)</p>
<ol>
<li><p>窄依赖：没有shuffle，shuffle是必须要对被分发区的每条数据进行切分的</p>
</li>
<li><p>宽依赖：有shuffle，reduceByKey:假设rddA有三个区块的数据，第一个区块的数据为：（hadoop，1），（spark，1）,假设生成到rddB，通过分区函数将每个分区的数据发送到rddB的每个分区。然后开始塞数据，假设 key为hadoop的数据给到rddB的0分区，key为spark的hadoop的数据给rddB的1分区。那么rddA的第一个区块的数据会被拆分，所以这是一个宽依赖（shuffle）</p>
</li>
</ol>
<p>如果两个分区一对一关系，必定是窄依赖<br>如果多对一要看是否有数据分发，有就是宽依赖</p>
<p>窄依赖的类别：</p>
<ol>
<li>依赖类的关系</li>
</ol>
<p>RDD之间的关系是由 dependency对象决定的，这个对象可以获得另一端信息</p>
<p>第一级别继承类：NarrowDependency,ShuffleDependency</p>
<p>第二级别：OneToOneDependency，RangeDependency，继承自NarrowDependency  </p>
<ul>
<li>一对一窄依赖：map算子</li>
<li>range窄依赖：只在union中使用，两个集合合起来。</li>
<li>多对一窄依赖：和shuffle相似但是不是，coalesce求笛卡尔积为例，被发的rdd是不会对数据再切分</li>
</ul>
<p>宽依赖只能等待前一个rdd的所有数据算好后切割分发，但是窄依赖的不同分区可以和生成的rdd的分区对应放在一个task计算。</p>
<h4 id="3-0-物理执行图"><a href="#3-0-物理执行图" class="headerlink" title="3.0 物理执行图"></a>3.0 物理执行图</h4><ol>
<li>数据如何在集群中计算</li>
</ol>
<p>如代码所示，flatMap和map会被合并为一个计算任务在一个executor中执行完毕后，再执行，一个task表示一个flatMap和map计算，多个task组合成一个stage。<br>执行shuffle（reduceByKey）操作后就是另一个stage，最后将结果发给Driver。</p>
<ol start="2">
<li>RDD是被谁执行计算的？</li>
</ol>
<p>每台电脑的executor是一个进程，使用多线程计算，和driver认领任务，运行任务线程：task。</p>
<p>task如何设计，如果有rddA—map—&gt;rddB—map—rddC每个rdd都是3个分区。</p>
<p>如果设计每个分区和map就是一个task，那么map的结果得生成文件，给下一个分区的map这就和hadoop的mapreduce一样了</p>
<p>如果将rddA的分区和rddB的分区的两个map生成一个task，一共三个task，共享内存，效率高多了，但是遇到shuffle操作就有问题了。</p>
<p>spark采用数据流动模型设计，划分阶段：因为在遇到shuffle会出问题,所以在有shuffle的地方分段，shuffle左边的某分区的所有操作成为一个task，右边分为一个task，这样就有了两个stage。</p>
<p>划分stage规则：从后往前划分，知道遇到shuffle（宽依赖）断开stage，创建新的stage，继续往前走。</p>
<ol start="3">
<li>数据流向</li>
</ol>
<p>数据的计算发生在调用Action的RDD上，RDD一直往上请求数据，类似递归，然后不停返回数据。第一个获取数据的rdd是最左边的rdd。</p>
<h4 id="4-0-如何运行"><a href="#4-0-如何运行" class="headerlink" title="4.0 如何运行"></a>4.0 如何运行</h4><ol>
<li><p>Collect方法会去调用DAGScheduler方法==》taskScheduler方法 运行到集群中。DAGScheduler给每个job生成有向无环图，确定最佳task位置</p>
</li>
<li><p>一次action生成一个job，数据从读取到生成结果就是一个job，job会被分发到集群是spark调度的颗粒，一个job有多个stage，一个stage有多个task，stage之间串行执行。</p>
</li>
<li><p>TaskSet：一个stage对应了一个TaskSet（多个task，数量由分区决定）</p>
</li>
</ol>
<h4 id="5-0-spark-高级特性"><a href="#5-0-spark-高级特性" class="headerlink" title="5.0 spark 高级特性"></a>5.0 spark 高级特性</h4><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closeure</span></span>():<span class="type">Unit</span>  = &#123;</span><br><span class="line">    <span class="keyword">val</span> factor = <span class="number">3.14</span></span><br><span class="line">    (r:<span class="type">Int</span>) = </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-0-spark-shuffle原理"><a href="#6-0-spark-shuffle原理" class="headerlink" title="6.0 spark shuffle原理"></a>6.0 spark shuffle原理</h4>]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark 学习 01 入门</title>
    <url>/2020/11/16/Spark-%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="1-0-Spark-学习"><a href="#1-0-Spark-学习" class="headerlink" title="1.0 Spark 学习"></a>1.0 Spark 学习</h3><span id="more"></span>

<h4 id="1-1-spark-是什么"><a href="#1-1-spark-是什么" class="headerlink" title="1.1 spark 是什么"></a>1.1 spark 是什么</h4><p>快速，多用途，集群计算系统</p>
<h5 id="hdfs"><a href="#hdfs" class="headerlink" title="hdfs"></a>hdfs</h5><p>分布式存储工具，hadoop存在MR（map-reduce)即，每个计算节点计算完毕后hdfs存储在本地，效率地下</p>
<p>spark，中间结果存储在内存</p>
<h4 id="1-2-spark-优势"><a href="#1-2-spark-优势" class="headerlink" title="1.2 spark 优势"></a>1.2 spark 优势</h4><ol>
<li><p>速度快，是MR100倍</p>
</li>
<li><p>易用，更加灵活的api</p>
</li>
<li><p>通用，提供大部分计算工具（结构化，非结构化，图形计算）</p>
</li>
<li><p>兼容性好，可以访问大部分中间队列和数据库</p>
</li>
</ol>
<h4 id="1-3-Spark组件"><a href="#1-3-Spark组件" class="headerlink" title="1.3 Spark组件"></a>1.3 Spark组件</h4><ol>
<li><p>spark-core:是整个spark的基础（RDDs）</p>
</li>
<li><p>spark-sql: 处理结构化数据，Data set,DateFrame 上执行sql</p>
</li>
<li><p>spark-streaming: 流分析，和批量分析</p>
</li>
<li><p>MLib: 机器学习</p>
</li>
<li><p>GraphX:图计算工具</p>
</li>
</ol>
<h4 id="1-4-hadoop和spark"><a href="#1-4-hadoop和spark" class="headerlink" title="1.4 hadoop和spark"></a>1.4 hadoop和spark</h4><ol>
<li>hadoop：基础平台（存储，调度），spark只是替换mr的计算工具</li>
<li>hadoop擅长处理大数据的批处理，spark也支持大数据，快，适合迭代，交互，流计算</li>
<li>hadoop延迟大，spark 小</li>
</ol>
<h3 id="2-0-Spark-集群"><a href="#2-0-Spark-集群" class="headerlink" title="2.0 Spark 集群"></a>2.0 Spark 集群</h3><h4 id="2-1-spark集群结构"><a href="#2-1-spark集群结构" class="headerlink" title="2.1 spark集群结构"></a>2.1 spark集群结构</h4><ol>
<li><p>spark支持集群管理工具（standalone,yarn,mersos,kubernetes）</p>
</li>
<li><p>spark客户端（Driver：该进程调用spark的main，并且启动SparkContext）调用集群管理工具（Cluster manager),cm负责将任务分发，每个子主机（Worker）有个守护进程，负责和cm沟通，每个Worker执行分发下来的任务，在其内的JVM虚拟机中执行（Executor）</p>
</li>
<li><p>流程：启动Driver，创建sparkContext（切割任务），Client提交程序给Driver，Driver向CM申请集群资源，CM在对应的Worker启动Executor执行任务</p>
</li>
</ol>
<p>NOTE: </p>
<ol>
<li>spark不是每次都需要启动集群，可以在单机模式（standalone）中使用测试代码</li>
<li>spark可以运行在不同集群中，支持yarn,mersos,kubernetes和自己的standalone，在每个集群中启动方式不同</li>
<li>spark在每个集群的启动模型自行了解</li>
</ol>
<h4 id="2-2-spark集群搭建"><a href="#2-2-spark集群搭建" class="headerlink" title="2.2 spark集群搭建"></a>2.2 spark集群搭建</h4><h5 id="2-2-0-配置hadoop"><a href="#2-2-0-配置hadoop" class="headerlink" title="2.2.0 配置hadoop"></a>2.2.0 配置hadoop</h5><ol start="0">
<li>配置hadoop的java环境 <code>/opt/hadoop/etc/hadoop/hadoop-env.sh</code>：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8</span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>vim /opt/hadoop/etc/hadoop/core-site.html</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://node01:8020&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/opt/hadoop/tmp&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">        &lt;name&gt;io.file.buffer.size&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;4096&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.trash.interval&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;10080&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!--property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">  &lt;/property--&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>vim /opt/hadoop/etc/hadoop/hdfs-site.html</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;node01:50090&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;node01:50070&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:///opt/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:///opt/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.edits.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:///opt/hadoop/tmp/edits&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.blocksize&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;134217728&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><code>vim /opt/hadoop/etc/hadoop/mapred-site.xml</code></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.job.ubertask.enable&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;node01:10020&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;node01:19888&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>vim /opt/hadoop/etc/hadoop/mapred-env.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line"></span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> HADOOP_JOB_HISTORYSERVER_OPTS=</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> HADOOP_MAPRED_LOG_DIR=<span class="string">&quot;&quot;</span> <span class="comment"># Where log files are stored.  $HADOOP_MAPRED_HOME/logs by default.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> HADOOP_JHS_LOGGER=INFO,RFA <span class="comment"># Hadoop JobSummary logger.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> HADOOP_MAPRED_PID_DIR= <span class="comment"># The pid files are stored. /tmp by default.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> HADOOP_MAPRED_IDENT_STRING= <span class="comment">#A string representing this instance of hadoop. $USER by default</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> HADOOP_MAPRED_NICENESS= <span class="comment">#The scheduling priority for daemons. Defaults to 0.</span></span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><p><code>vim /opt/hadoop/etc/hadoop/slaves</code>: <code>node01</code></p>
</li>
<li><p><code>mkdir -p /opt/hadoop/tmp</code> <code>mkdir -p /opt/hadoop/edits</code> <code>mkdir -p /opt/hadoop/name</code> <code>mkdir -p /opt/hadoop/data</code></p>
</li>
<li><p>格式化和启动dfs</p>
</li>
</ol>
<p><code>/opt/hadoop/bin/hdfs namenode -format</code> <code>/opt/hadoop/sbin/start-dfs.sh </code> <code>/opt/hadoop/sbin/start-yarn.sh </code></p>
<ol start="8">
<li>配置环境变量</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export  HADOOP_HOME=/opt/hadoop</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>web查看hadoop存储空间</li>
</ol>
<p><code>w3m http://node01:50070</code></p>
<p>NOTE: 如果jps查看缺了什么namenode或者datanode  <code>cd /opt/hadoop/tmp</code> <code>rm -r dfs</code><br>(不使用停止服务 会导致这样)</p>
<ol start="10">
<li>常用命令</li>
</ol>
<p><code>hdfs dfs -ls /</code></p>
<p><code>hdfs dfs -mkdir /spark_log</code></p>
<p><code>hdfs dfs -put xxx.txt /data</code></p>
<h5 id="2-2-1-安装配置spark"><a href="#2-2-1-安装配置spark" class="headerlink" title="2.2.1 安装配置spark"></a>2.2.1 安装配置spark</h5><ol>
<li><p>下载spark 2.2，hadoop 2.75和安装</p>
</li>
<li><p>配置本地host：<code>127.0.0.1 localhost node01 localhost4 localhost4.localdomain4</code></p>
</li>
<li><p>配置conf/spark-env.sh</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定java</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定spark master 地址</span></span><br><span class="line">export SPARK_MASTER_HOST=node01</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定查找<span class="built_in">history</span> server日志目录和web端口</span></span><br><span class="line">export SPARK_HISTORY_OPTS=&quot;-Dspark.history.ui.port=4001 -Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://node01:8020/spark_log&quot;</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=/opt/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>配置conf/slaves，master启动时可以启动所有从节点，告诉master worker在哪</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node01</span><br><span class="line">192.168.....</span><br></pre></td></tr></table></figure></li>
<li><p>配置history server:conf/spark-defaults.conf，运行结束后无法查看中间过程，配置这个即可看到</p>
</li>
</ol>
<p>启用输出日志，指定输入地址，是否压缩</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spark.eventLog.enabled           true</span><br><span class="line">spark.eventLog.dir               hdfs://node01:8020/spark_log</span><br><span class="line">spark.eventLog.compress          true</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>创建history-server的日志地址 hdfs目录下</li>
</ol>
<p><code>hdfs dfs mkdir -p /spark_log</code></p>
<h5 id="2-2-2-分发"><a href="#2-2-2-分发" class="headerlink" title="2.2.2 分发"></a>2.2.2 分发</h5><ol>
<li><p>同步配置到其他机器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line">scp -r spark root@node02：$PWD</span><br><span class="line">scp -r spark root@node03：$PWD</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/spark</span><br><span class="line">sbin/start-all.sh</span><br><span class="line">sbin/start-history-server.sh</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-3-高可用"><a href="#2-3-高可用" class="headerlink" title="2.3 高可用"></a>2.3 高可用</h4><p>master有可能会挂，所有需要整一个备用master，有两种方式实现，一个是利用本地，一个是利用ZooKeeper，大部分是后者</p>
<p>配置高可用</p>
<ol>
<li><p>进入spark-env.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注释原来的Spark Master地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> SPARK_MASTER_HOST=node01</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定spark运行时参数</span></span><br><span class="line">export SPARK_DAEMON_JAVA_OPTS=&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node01:2181,node02:2181,node03:2181(#这里填写的是zookeeper的三台主机) -Dspark.deploy.zookeeper.dir=/spark&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>分发配置 <code>scp -r spark root@node02:$PWD</code></p>
</li>
<li><p>启动</p>
</li>
</ol>
<p>jps查看启动进程，webUI: localhost:8080</p>
<h4 id="2-4-入门案例"><a href="#2-4-入门案例" class="headerlink" title="2.4 入门案例"></a>2.4 入门案例</h4><ol>
<li>提交任务命令</li>
</ol>
<p>程序名，master节点，执行内存，执行内数量，包名</p>
<p>`bin/spark-submit<br>–class org.apache.spark.examples.SparkPi<br>–master spark://node01:7077<br>–executor-memory 1G<br>–total-executor-cores 2<br>/opt/spark/examples/jars/spark-examples_2.11-2.2.0.jar                    </p>
<blockquote>
<blockquote>
<p>out.log<br>`</p>
</blockquote>
</blockquote>
<h5 id="2-4-1-执行方式"><a href="#2-4-1-执行方式" class="headerlink" title="2.4.1 执行方式"></a>2.4.1 执行方式</h5><ol>
<li>观察数据集</li>
<li>测试数据集</li>
<li>固话代码</li>
<li>提交集群</li>
</ol>
<h6 id="2-4-1-1-spark-shell-读取本地文件和读取hdfs-统计单词数量"><a href="#2-4-1-1-spark-shell-读取本地文件和读取hdfs-统计单词数量" class="headerlink" title="2.4.1.1 spark-shell 读取本地文件和读取hdfs 统计单词数量"></a>2.4.1.1 spark-shell 读取本地文件和读取hdfs 统计单词数量</h6><p>启动spark-shell：</p>
<p>spark-shell –master local[N] 使用N条worker线程本地运行</p>
<p>spark-shell –master spark://host:port standAlone中运行，指定master地址，默认端口7077</p>
<p>spark-shell –master mesos://host:port Apache Mesos中运行</p>
<p>spark-shell –master yarn  yarn中运行</p>
<ol>
<li><p>建立文件 vim /opt/data/WordCount.txt </p>
</li>
<li><p>进入shell spark-shell –master local[6]</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 读取文件 /opt/data/WordCount.txt</span><br><span class="line">val rdd1 = sc.textFile(&quot;file:///opt/data/WordCount.txt&quot;)</span><br><span class="line">// flatMap 平铺分割 按照空格分割</span><br><span class="line">val rdd2 = rdd1.flatMap(_.split(&quot; &quot;))</span><br><span class="line">// 每个元素组为元祖</span><br><span class="line">val rdd3 = rdd2.map((_,1))</span><br><span class="line">// 按照key聚合</span><br><span class="line">val rdd4 = rdd3.reduceByKey(_+_)</span><br><span class="line">// 收集</span><br><span class="line">rdd4.collect</span><br></pre></td></tr></table></figure>

<p>如果文件过大，本机存不下，需要将文件上传到hdfs，可以直接不加”hdfs://node01:8020”，需要在conf/spark-env.sh中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure>

<ol>
<li><p>cd /opt/data</p>
</li>
<li><p><code>hdfs dfs -mkdir /data</code> , <code>hdfs dfs -put WordCount.txt /data</code></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 读取文件 /opt/data/WordCount.txt</span><br><span class="line">val rdd1 = sc.textFile(&quot;hdfs://node01:8020/data/wordcount.txt&quot;)</span><br><span class="line"></span><br><span class="line">// flatMap 平铺分割 按照空格分割</span><br><span class="line">val rdd2 = rdd1.flatMap(_.split(&quot; &quot;))</span><br><span class="line">// 每个元素组为元祖</span><br><span class="line">val rdd3 = rdd2.map((_,1))</span><br><span class="line">// 按照key聚合</span><br><span class="line">val rdd4 = rdd3.reduceByKey(_+_)</span><br><span class="line">// 收集</span><br><span class="line">rdd4.collect</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>只有在调用collect的时候才会计算</li>
</ol>
<h6 id="2-4-1-1-独立应用"><a href="#2-4-1-1-独立应用" class="headerlink" title="2.4.1.1 独立应用"></a>2.4.1.1 独立应用</h6><ol>
<li>本地运行</li>
</ol>
<p>创建idea,maven 工程<br>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>SparkLearn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.tr.spark<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.16<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;repositories&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;repository&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;id&gt;scala-tools.org&lt;/id&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/repository&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/repositories&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;pluginRepositories&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;pluginRepository&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;id&gt;scala-tools.org&lt;/id&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/pluginRepository&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/pluginRepositories&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;junit&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;junit&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;4.4&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.specs&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;specs&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;1.2.5&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spark --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;spark-streaming_$&#123;spark.artifactID.suffix&#125;&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;spark-sql_$&#123;spark.artifactID.suffix&#125;&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;spark-hive_$&#123;spark.artifactID.suffix&#125;&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;spark-mllib_$&#123;spark.artifactID.suffix&#125;&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;$&#123;spark.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-dependencyfile<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span><span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>WordCount.scala</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author tr</span></span><br><span class="line"><span class="comment"> * @Date 11/16/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> <span class="keyword">extends</span> <span class="title">App</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 创建sparkcontext</span></span><br><span class="line">  <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[6]&quot;</span>).setAppName(<span class="string">&quot;word_count&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载读取文件</span></span><br><span class="line">  <span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">&quot;data/wordcount.txt&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> rdd2 = rdd1.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">  <span class="keyword">val</span> rdd3 = rdd2.map((_,<span class="number">1</span>))</span><br><span class="line">  <span class="keyword">val</span> rdd4 = rdd3.reduceByKey(_+_)</span><br><span class="line">  rdd4.collect.foreach(println)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>提交运行</li>
</ol>
<ul>
<li>修改本地文件读取路径为hdfs</li>
<li>打成jar包 mvn package</li>
<li>两个包：一个包大的包含了所有的依赖，一个小开头为orignal只包含了代码，由于云上有spark环境，只需要小包即可</li>
<li><code>root@tr:/opt/spark# bin/spark-submit --class com.tr.spark.WordCount --master spark://node01:7077 /opt/MyExercise/original-tr.jar  </code></li>
</ul>
]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2019/03/19/SpringBoot/</url>
    <content><![CDATA[<h3 id="配置Springboot"><a href="#配置Springboot" class="headerlink" title="配置Springboot"></a>配置Springboot</h3><span id="more"></span>

<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>简化框架，整个spring技术栈的整合。</p>
<h4 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h4><p>是一种架构风格，一个应用应该是一组小型服务；服务间可以通过http方式进行互通，每一个功能元素都是一个可独立替换和升级的软件单元。</p>
<h4 id="3、入门使用"><a href="#3、入门使用" class="headerlink" title="3、入门使用"></a>3、入门使用</h4><h4 id="1-配置maven"><a href="#1-配置maven" class="headerlink" title="1. 配置maven"></a>1. 配置maven</h4><p>进入maven的conf目录，配置settings文件，profiles中添加以下使得maven使用1.8编译项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;profile&gt;</span><br><span class="line">    &lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">    &lt;activation&gt;</span><br><span class="line">      &lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">    &lt;/activation&gt;</span><br><span class="line"></span><br><span class="line"> &lt;properties&gt;</span><br><span class="line">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line"> &lt;/properties&gt;</span><br><span class="line">  &lt;/profile&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置idea，setting中选择，将默认的maven换为自己下载的。</p>
<p>maven换源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>maven 修改本地仓库:<br><code>&lt;localRepository&gt;D:\apache-maven-3.6.3\repository&lt;/localRepository&gt;</code></p>
<h4 id="springhelloworld"><a href="#springhelloworld" class="headerlink" title="springhelloworld"></a>springhelloworld</h4><h5 id="1-配置一个maven工程，idea中新建maven工程"><a href="#1-配置一个maven工程，idea中新建maven工程" class="headerlink" title="1. 配置一个maven工程，idea中新建maven工程"></a>1. 配置一个maven工程，idea中新建maven工程</h5><h5 id="2-导入springboot相关依赖，官网有quickstart，可以直接copy下来，或者点击网站自动generate一个demo"><a href="#2-导入springboot相关依赖，官网有quickstart，可以直接copy下来，或者点击网站自动generate一个demo" class="headerlink" title="2. 导入springboot相关依赖，官网有quickstart，可以直接copy下来，或者点击网站自动generate一个demo"></a>2. 导入springboot相关依赖，官网有quickstart，可以直接copy下来，或者点击网站自动generate一个demo</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-编写启动主程序："><a href="#3-编写启动主程序：" class="headerlink" title="3. 编写启动主程序："></a>3. 编写启动主程序：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Hello %s!&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h5><p>直接idea启动或者cli：<code>mvnw spring-boot:run</code>,可以添加<code>?name=tr</code>访问</p>
<p>主程序文件说明：</p>
<ol>
<li><code>@RestController</code> ：<code>controller</code>标识，<code>spring</code>用来标记的</li>
<li><code>@RequestMapping</code> ： url标识</li>
<li><code>@EnableAutoConfiguration Annotation</code>：This annotation tells Spring Boot to “guess” how you want to configure Spring, based on the jar dependencies that you have added. Since spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly</li>
<li>main方法：Spring应用程序启动入口，自动启动tomcat</li>
</ol>
<h5 id="5-自定义controller"><a href="#5-自定义controller" class="headerlink" title="5. 自定义controller"></a>5. 自定义controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="6-部署"><a href="#6-部署" class="headerlink" title="6.部署"></a>6.部署</h5><ol>
<li>添加部署插件,用于将应用打包成可执行jar包</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>点击右侧插件的package即可</p>
</li>
<li><p><code>java -jar ***</code> 即可运行</p>
</li>
</ol>
<h5 id="7-备注"><a href="#7-备注" class="headerlink" title="7. 备注"></a>7. 备注</h5><p>以上都是比较老的操作方法了，需要自己copy配置文件，新版的spring可以直接完成以上配置，<code>new project</code>，选择<code>spring initializr</code>，选择<code>web</code>或者其他自己要的场景，下一步即可</p>
<h5 id="8-创建可执行jar"><a href="#8-创建可执行jar" class="headerlink" title="8. 创建可执行jar"></a>8. 创建可执行jar</h5><ol>
<li><p>add the spring-boot-maven-plugin to our pom.xml</p>
</li>
<li><p>使用mvn命令：package 会自动打包成war包</p>
</li>
</ol>
<h4 id="spring-boot-初步探究"><a href="#spring-boot-初步探究" class="headerlink" title="spring boot 初步探究"></a>spring boot 初步探究</h4><h5 id="helloworld-探究"><a href="#helloworld-探究" class="headerlink" title="helloworld 探究"></a>helloworld 探究</h5><ol>
<li>父项目</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其父项目是：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用于管理所有依赖的版本号，这样以后写依赖不需要写版本号</p>
<ol start="2">
<li>依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring boot</code> 场景启动器:导入web需要的大部分依赖，tomcat啥的</p>
<ol start="3">
<li>主程序类：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(HelloSpringApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@SpringBootApplication</code>：标注是<code>spring boot</code>主配置类，访问这个启动spring，进入查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>@SpringBootConfiguration</code>: 标识<code>springboot</code>配置类</p>
<p><code>@Configuration</code>: 配置类，也是组件有@Component</p>
<p><code>@EnableAutoConfiguration</code>: 开启自动配置</p>
<p><code>@import</code>：底层注解，专门导入组件</p>
<p>将著配置类(@SpringBootApplication标注的类)的所在包和子包下的所有组件自动扫描到spring容器中</p>
<h5 id="spring-初步"><a href="#spring-初步" class="headerlink" title="spring 初步"></a>spring 初步</h5><ol>
<li><p>controller 注解<code>@Controller``@ResponseBody</code>是以前的controller类注解，现在使用<code>@RestController</code>代替</p>
</li>
<li><p>resources文件夹：</p>
</li>
</ol>
<ul>
<li>static：存放图片css等</li>
<li>templates：由于spring使用的嵌入式tomcat，不支持jsp，但是可以使用模板引擎</li>
<li>application.properties:配置文件，可以配置端口等，类似<code>server.port=1997</code></li>
</ul>
<h3 id="spring-boot-配置"><a href="#spring-boot-配置" class="headerlink" title="spring boot 配置"></a>spring boot 配置</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>Spring boot 使用全局配置文件，文件名固定</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p> 配置文件的作用：修改springboot自动配置的默认值；</p>
<p> springboot底层都给我们自动配置好了</p>
<p> yml:YAML 以数据为中心的配置文件</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure>
<h5 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h5><h6 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h6><ol>
<li>k:空格v 键值对标识，空格缩进标识层级关系,大小写敏感</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">	port: 8111</span><br><span class="line">  path: /hi</span><br></pre></td></tr></table></figure>
<h6 id="2-值的写法："><a href="#2-值的写法：" class="headerlink" title="2. 值的写法："></a>2. 值的写法：</h6><p> 普通数字、对象、map、数组等</p>
<ol>
<li>普通字符 k: v</li>
</ol>
<p> 字符串默认不用加上单引号或者双引号</p>
<p> 双引号：转义特殊字符,\n会变为换行</p>
<p> 单引号：不转义 输出\n等字符</p>
<ol start="2">
<li>对象、Map（键值对）</li>
</ol>
<p> k: v:还是kv模式，注意缩进</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">tr</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">23</span></span><br></pre></td></tr></table></figure>
<p>或者：<br><code>friends:&#123;name: tr,age: 23&#125;</code></p>
<ol start="3">
<li>数组（list，set）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- pig</span><br><span class="line">- monkey</span><br></pre></td></tr></table></figure>
<p>或者行内写法 <code>pets:[cat,dog]</code></p>
<h5 id="配置注入"><a href="#配置注入" class="headerlink" title="配置注入"></a>配置注入</h5><ol>
<li>导入配置文件处理器<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>需要注入的组件中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件值映射到组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CinfugurationProperties</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Componen</span> 标识是容器的组件，只有容器组件才能用spring功能</span></span><br><span class="line"><span class="comment">  默认找全局配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boolean boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getLists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, boss=&quot;</span> + boss +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>application.yml中配置注入数据</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1997</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tzq</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tt</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pp</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tr</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>properties配置类似</li>
</ol>
<p>需要修改ide文件编码</p>
<p>注意的是：两张配置文件都存的情况下，properties会覆盖yml配置</p>
<ol start="5">
<li>可以使用@Value注解注入值</li>
</ol>
<p>！！！注意：只有注解类似<code>@Autowried</code>才生效，new出来的不生效！！！</p>
<p><code>@Vaule(&quot;$&#123;person.name&#125;&quot;)</code></p>
<p>如果我们只是获取配置文件中某项值用<code>@Value</code> ,批量用<code>@ConfigurationProperties</code></p>
<ol start="6">
<li>加载指定配置文件</li>
</ol>
<p>因为默认注入是找的全局配置文件：<code>application.properties</code></p>
<p>指定文件：<code>@PropertySource(value=&quot;classpath:person.properties&quot;)</code></p>
<p>如果是yml无法指定，因为@PropertySource目前不支持yml的解析</p>
<ol start="7">
<li>导入spring配置文件</li>
</ol>
<p><code>@ImportResource</code>：导入自己写的配置文件，需要标注在配置类上，比如配置在@SpringBootApplication，<code>@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</code></p>
<p>spring boot 推荐给容器添加组件的方式：</p>
<p>a. 配置类===spring配置文件（不推荐）</p>
<p>b. @Configuration:在config包下写一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识当前类是配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将方法返回值添加到容器，容器的这个组件默认id为方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h5><ol>
<li><p>${random.value}随机数</p>
</li>
<li><p>可以在配置文件中引用之前配置的属性<code>$&#123;person.name:默认值&#125;</code>如果找不到赋值默认属性</p>
</li>
</ol>
<h5 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h5><p>不同环境不同profile</p>
<ol>
<li>多profile文件</li>
</ol>
<p>编写主配置文件，文件名可以是 application-{dev}.yml/properties,激活对应配置文件需要在主配置文件（application.yml）中写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">profiles:</span><br><span class="line">  active: dev</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>文档块（只支持yml）</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev2</span></span><br></pre></td></tr></table></figure>

<h5 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h5><p>加载优先级（高到低）高的配置文件覆盖低优先级的</p>
<p><code>classpath</code>为<code>resource</code>目录<br><code>file</code>为项目根目录与<code>src</code>同级</p>
<ul>
<li>file:./config/</li>
<li>file:./</li>
<li>classpath:/config</li>
<li>classpath:/</li>
</ul>
<p>还可以通过<code>spring.config.location=D:/xxx.properties</code>改变more配置文件位置</p>
<p>项目打包后，可以使用命令行参数的形式指定配置文件位置，还可以外部配置文件的方式，不过这种工作一般运维做，以后遇到了再查文档</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDataJPA</title>
    <url>/2019/03/15/SpringDataJPA/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol>
<li><p>springdata下的一个项目 提供了一套JPA标准的数据库操作方案，底层还是HibernateJPA</p>
</li>
<li><p>我们只需要定义接口然后继承SpringDataJpa中的接口即可，不用写实现类，意思dao不需要实现</p>
</li>
</ol>
<span id="more"></span>

<p><img src="/images/SpringJPA%E7%BB%A7%E6%89%BF%E5%9B%BE0.png"></p>
<h3 id="startUp"><a href="#startUp" class="headerlink" title="startUp"></a>startUp</h3><h4 id="在SpringHibernateJPA基础上修改"><a href="#在SpringHibernateJPA基础上修改" class="headerlink" title="在SpringHibernateJPA基础上修改"></a>在SpringHibernateJPA基础上修改</h4><ol>
<li>pom.xml文件添加</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0-beta4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0-beta4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>




<ol start="2">
<li><p>修改配置文件applicationContext.xml</p>
<ol>
<li><p>开启命名空间 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:jpa=&quot;http://www.springframework.org/schema/data/jpa&quot;        http://www.springframework.org/schema/data/jpa      http://www.springframework.org/schema/data/jpa/spring-jpa.xsd</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ol start="2">
<li>添加SpringDataJPA配置</li>
</ol>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring data jpa 配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描springdatajpa接口所在的dao包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tr.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="完整的配置文件"><a href="#完整的配置文件" class="headerlink" title="完整的配置文件"></a>完整的配置文件</h4><ol>
<li>/resources/applicationContext.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">&quot;http://www.springframework.org/schema/data/jpa&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置读取properites文件的工具类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置ic3p0数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver.class&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置hibernate的sessionFactory 改为JPA--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring整合jpa 配置EntityanagerFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;entityManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jpaVendorAdapter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据库类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;database&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MYSQL&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自动创建表--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;generateDdl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置显示sql--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;showSql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置实体扫描包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;packagesToScan&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.tr<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置hibernate JPA的事务管理器</span></span><br><span class="line"><span class="comment">        注意：换事务管理器了</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;entityManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置开启注解事务处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置springIOC的注解模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tr&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring data jpa 配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描springdatajpa接口所在的dao包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tr.dao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>/resources/jdbc.properties</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql://1.11.11.111:3306/MyTest</span><br><span class="line">jdbc.driver.class=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>pom.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>SpringDataJPA<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringDataJPA<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0-beta4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0-beta4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.geronimo.specs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>geronimo-jta_1.1_spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-commons-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.17.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-jpa-2.1-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jandex<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.22.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5-pre8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mchange-commons-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="使用idea的实体映射自动生成实体类"><a href="#使用idea的实体映射自动生成实体类" class="headerlink" title="使用idea的实体映射自动生成实体类"></a>使用idea的实体映射自动生成实体类</h3><pre><code> 1. 在项目的faclet中添加JPA组件和Hibernate，且JPA组件在下拉栏中选择Hibernate作为提供者，右键JPA选择generate Persistence Mapping ==&gt; ByDataBaseSchema
 2. 在ImportDatabaseSchema中选中左下角：AddToPersistenceUnit
</code></pre>
<h3 id="编写dao层接口"><a href="#编写dao层接口" class="headerlink" title="编写dao层接口"></a>编写dao层接口</h3><ol>
<li><p>使用SpringDataJPA不需要对dao层接口做实现</p>
</li>
<li><p>继承extends JpaRepository&lt;Users,Integer&gt; </p>
</li>
<li><p>第一个参数：操作的实体类（实体类隐射了数据库表）</p>
<p>第二个参数：这个实体类的主键类型</p>
</li>
</ol>
<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p><strong>千万不要忘记@ContextConfiguration!!!!</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.dao.UsersDao;</span><br><span class="line"><span class="keyword">import</span> com.tr.domain.Users;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.transaction.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testUsersDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackOn = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Users users = <span class="keyword">new</span> Users(<span class="string">&quot;sdj&quot;</span>, <span class="string">&quot;sdj&quot;</span>, <span class="string">&quot;sdj&quot;</span>, <span class="string">&quot;sdj&quot;</span>, <span class="string">&quot;sdj&quot;</span>, <span class="string">&quot;sdj&quot;</span>, <span class="string">&quot;sdj&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.usersDao.save(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="接口使用"><a href="#接口使用" class="headerlink" title="接口使用"></a>接口使用</h3><h4 id="Repository接口"><a href="#Repository接口" class="headerlink" title="Repository接口"></a>Repository接口</h4><p>​    <strong>注意点：继承的包org.springframework.data.repository.Repository;</strong></p>
<p>​    <strong>且继承后要写泛型里面的类型</strong></p>
<p>​    <strong>读取下划线字段findByCust_name会出错，使用@Column转驼峰法</strong></p>
<ol>
<li><p>是SpringDataJPA提供的顶层接口  是一个标识接口</p>
</li>
<li><p>提供了两种查询方式的支持</p>
<ol>
<li><p>基于方法命名规则查询</p>
<p>规则：findBy(关键字)+属性名称（属性名称首字母大写）+    查询条件（首字母大写）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用用户名作为查询条件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * findBy : 规定写法</span></span><br><span class="line"><span class="comment">        * Cust_name ：属性首字母大写</span></span><br><span class="line"><span class="comment">        * 条件有三种标识： 1. 默认不写会使用相等判断</span></span><br><span class="line"><span class="comment">        *                  2. Is</span></span><br><span class="line"><span class="comment">        *                  3. equal</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       List&lt;Users&gt; list = <span class="keyword">this</span>.usersDaoWithRepository.findByNameIs(<span class="string">&quot;tzq&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Users u : list) &#123;</span><br><span class="line">           System.out.println(u);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多命令：查询名称为tzq且linkman为tr</span></span><br><span class="line"><span class="comment"> * 缺陷：简单查询可以，条件复杂不可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Users&gt; list = <span class="keyword">this</span>.usersDaoWithRepository.findByNameLikeAndLinkmanLike(<span class="string">&quot;t%&quot;</span>,<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Users u :</span><br><span class="line">            list) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.domain.Users;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDaoWithRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Users</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">findByNameIs</span><span class="params">(String tzq)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">findByNameLike</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">findByLinkmanIs</span><span class="params">(String tr)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">findByNameLikeAndLinkmanLike</span><span class="params">(String s, String tr)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>基于@Query注解查询</p>
<ol>
<li><p>通过JPQL语句查询（基于HQL改来的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用@Query注解查询</span></span><br><span class="line"><span class="meta">@Query(value = &quot;from Users where name = ?1&quot;)</span></span><br><span class="line"><span class="function">List&lt;Users&gt; <span class="title">queryUserByNameUseJPQL</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>通过SQL语句查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sql</span></span><br><span class="line"><span class="meta">@Query(value = &quot;select * from cst_customer where cust_name=?&quot;, nativeQuery = true)</span></span><br><span class="line"><span class="function">List&lt;Users&gt; <span class="title">queryUsersBySql</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>更新语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;update Users set name=?2 where id=?1&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackOn = Exception.class)</span></span><br><span class="line"><span class="meta">@Rollback(false)</span></span><br><span class="line"><span class="meta">@Modifying</span>  <span class="comment">//更新语句</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateNameById</span><span class="params">(<span class="keyword">int</span> i, String jpa)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="CureRepository接口"><a href="#CureRepository接口" class="headerlink" title="CureRepository接口"></a>CureRepository接口</h4><ol>
<li><p>继承了接口后可以直接crud了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加单条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span>           <span class="comment">//不需要加@Transcational 因为执行的代理对象内部已经处理了</span></span><br><span class="line">    <span class="meta">@Rollback(false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Users users = <span class="keyword">new</span> Users();</span><br><span class="line">        users.setName(<span class="string">&quot;CrudJpa&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.usersDao.save(users);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Rollback(true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Users users = <span class="keyword">new</span> Users();</span><br><span class="line">        users.setName(<span class="string">&quot;CrudJpa1&quot;</span>);</span><br><span class="line">        Users users2 = <span class="keyword">new</span> Users();</span><br><span class="line">        users2.setName(<span class="string">&quot;CrudJpa2&quot;</span>);</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(users);</span><br><span class="line">        list.add(users2);</span><br><span class="line">        <span class="keyword">this</span>.usersDao.saveAll(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Users&gt; users = <span class="keyword">this</span>.usersDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(users.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Users&gt; users = <span class="keyword">this</span>.usersDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Users u :</span><br><span class="line">                users) &#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback(false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Users&gt; byId = <span class="keyword">this</span>.usersDao.findById(<span class="number">1</span>); <span class="comment">//持久化状态</span></span><br><span class="line">        Users users = byId.get();</span><br><span class="line">        users.setName(<span class="string">&quot;changed&quot;</span>);   <span class="comment">//持久化可以直接修改 前提是手动改@Transcation</span></span><br><span class="line"><span class="comment">//        this.usersDao.save(users);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="PagingAndSortingRepository接口"><a href="#PagingAndSortingRepository接口" class="headerlink" title="PagingAndSortingRepository接口"></a>PagingAndSortingRepository接口</h4>]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDataJPA命名规则集合</title>
    <url>/2019/03/15/SpringDataJPA%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>常用的命名规则</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>关键字</th>
<th>方法命名</th>
<th>sql where字句</th>
</tr>
</thead>
<tbody><tr>
<td>And</td>
<td>findByNameAndPwd</td>
<td>where name= ? and pwd =?</td>
</tr>
<tr>
<td>Or</td>
<td>findByNameOrSex</td>
<td>where name= ? or sex=?</td>
</tr>
<tr>
<td>Is,Equals</td>
<td>findById,findByIdEquals</td>
<td>where id= ?</td>
</tr>
<tr>
<td>Between</td>
<td>findByIdBetween</td>
<td>where id between ? and ?</td>
</tr>
<tr>
<td>LessThan</td>
<td>findByIdLessThan</td>
<td>where id &lt; ?</td>
</tr>
<tr>
<td>LessThanEquals</td>
<td>findByIdLessThanEquals</td>
<td>where id &lt;= ?</td>
</tr>
<tr>
<td>GreaterThan</td>
<td>findByIdGreaterThan</td>
<td>where id &gt; ?</td>
</tr>
<tr>
<td>GreaterThanEquals</td>
<td>findByIdGreaterThanEquals</td>
<td>where id &gt; = ?</td>
</tr>
<tr>
<td>After</td>
<td>findByIdAfter</td>
<td>where id &gt; ?</td>
</tr>
<tr>
<td>Before</td>
<td>findByIdBefore</td>
<td>where id &lt; ?</td>
</tr>
<tr>
<td>IsNull</td>
<td>findByNameIsNull</td>
<td>where name is null</td>
</tr>
<tr>
<td>isNotNull,NotNull</td>
<td>findByNameNotNull</td>
<td>where name is not null</td>
</tr>
<tr>
<td>Like</td>
<td>findByNameLike</td>
<td>where name like ?</td>
</tr>
<tr>
<td>NotLike</td>
<td>findByNameNotLike</td>
<td>where name not like ?</td>
</tr>
<tr>
<td>StartingWith</td>
<td>findByNameStartingWith</td>
<td>where name like ‘?%’</td>
</tr>
<tr>
<td>EndingWith</td>
<td>findByNameEndingWith</td>
<td>where name like ‘%?’</td>
</tr>
<tr>
<td>Containing</td>
<td>findByNameContaining</td>
<td>where name like ‘%?%’</td>
</tr>
<tr>
<td>OrderBy</td>
<td>findByIdOrderByXDesc</td>
<td>where id=? order by x desc</td>
</tr>
<tr>
<td>Not</td>
<td>findByNameNot</td>
<td>where name &lt;&gt; ?</td>
</tr>
<tr>
<td>In</td>
<td>findByIdIn(Collection&lt;?&gt; c)</td>
<td>where id in (?)</td>
</tr>
<tr>
<td>NotIn</td>
<td>findByIdNotIn(Collection&lt;?&gt; c)</td>
<td>where id not  in (?)</td>
</tr>
<tr>
<td>True</td>
<td>findByAaaTue</td>
<td>where aaa = true</td>
</tr>
<tr>
<td>False</td>
<td>findByAaaFalse</td>
<td>where aaa = false</td>
</tr>
<tr>
<td>IgnoreCase</td>
<td>findByNameIgnoreCase</td>
<td>where UPPER(name)=UPPER(?)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>U盘问题：无法显示分区，无法使用分区</title>
    <url>/2019/05/02/U%E7%9B%98%E9%97%AE%E9%A2%98%EF%BC%9A%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%88%86%E5%8C%BA%EF%BC%8C%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h3 id="U盘问题：清理分区"><a href="#U盘问题：清理分区" class="headerlink" title="U盘问题：清理分区"></a>U盘问题：清理分区</h3><h6 id="在公司使用U盘-USBWriter安装centOS后导致U盘分区无法使用，显示只有安装大小"><a href="#在公司使用U盘-USBWriter安装centOS后导致U盘分区无法使用，显示只有安装大小" class="headerlink" title="在公司使用U盘+USBWriter安装centOS后导致U盘分区无法使用，显示只有安装大小"></a>在公司使用U盘+USBWriter安装centOS后导致U盘分区无法使用，显示只有安装大小</h6><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li><p>清理分区：</p>
<pre><code>.win+r，打开运行窗口，输入cmd，出现dos运行环境，输入diskpart，回车，弹出另一个命令窗口，然后将在上面（1）中的索引，输入select disk 1 进去，回车，输入clean，之后即可将空间内容清除（disk 编号可以再系统磁盘管理器中找到）
</code></pre>
</li>
<li><p>创建分区：<br> 打开磁盘管理器，建立即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>Log</tag>
        <tag>Usb</tag>
      </tags>
  </entry>
  <entry>
    <title>VSC代替intellij</title>
    <url>/2020/09/02/VSC%E4%BB%A3%E6%9B%BFintellij/</url>
    <content><![CDATA[<h4 id="VSC代替Intellij"><a href="#VSC代替Intellij" class="headerlink" title="VSC代替Intellij"></a>VSC代替Intellij</h4><p>Intellij idea 到期了，换vsc</p>
<span id="more"></span>

<h5 id="开发前端"><a href="#开发前端" class="headerlink" title="开发前端"></a>开发前端</h5><ol>
<li><p><code>open folder</code>,打开文件夹</p>
</li>
<li><p>下载一个小型服务器，<code>npm install -g http-server</code></p>
</li>
<li><p><code>http-server</code> 启动服务器进行</p>
</li>
</ol>
<h5 id="开发spring后端"><a href="#开发spring后端" class="headerlink" title="开发spring后端"></a>开发spring后端</h5><ol>
<li><p>首先下载配置java和maven</p>
</li>
<li><p>启动spring项目 <code>mvn springboot:run</code></p>
</li>
<li><p>打包和清理等命令：<code>mvn package</code> <code>mvn install</code> <code>mvn clean</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>VSC</category>
      </categories>
      <tags>
        <tag>VSC</tag>
      </tags>
  </entry>
  <entry>
    <title>aria2 配置</title>
    <url>/2019/03/07/aria2-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="aria2-配置"><a href="#aria2-配置" class="headerlink" title="aria2 配置"></a>aria2 配置</h1><p>安装： sudo pacman -S aria2</p>
<p>检测：aria2c -v</p>
<p>配置：需要手动配</p>
<blockquote>
<ol>
<li>mkdir /home/tzq/aria2</li>
<li>touch /home/tzq/aria2.session</li>
<li>vim /home/tzq/ara2.conf</li>
</ol>
</blockquote>
<span id="more"></span>

<p>aria2.conf : 内容  (目录自行修改)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 文件保存相关 ##</span><br><span class="line"></span><br><span class="line"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span><br><span class="line">dir=/root/Downloads</span><br><span class="line"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br><span class="line">disk-cache=32M</span><br><span class="line"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="line"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="line"># falloc和trunc则需要文件系统和内核支持</span><br><span class="line"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class="line">file-allocation=trunc</span><br><span class="line"># 断点续传</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## 下载连接相关 ##</span><br><span class="line"></span><br><span class="line"># 最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class="line">max-concurrent-downloads=10</span><br><span class="line"># 同一服务器连接数, 添加时可指定, 默认:1</span><br><span class="line">max-connection-per-server=10</span><br><span class="line"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class="line"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br><span class="line">min-split-size=20M</span><br><span class="line"># 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="line">split=10</span><br><span class="line"># 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line"># 单个任务下载速度限制, 默认:0</span><br><span class="line">max-download-limit=0</span><br><span class="line"># 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">max-overall-upload-limit=500K</span><br><span class="line"># 单个任务上传速度限制, 默认:0</span><br><span class="line">max-upload-limit=100K</span><br><span class="line"># 禁用IPv6, 默认:false</span><br><span class="line">disable-ipv6=false</span><br><span class="line"></span><br><span class="line">## 进度保存相关 ##</span><br><span class="line"></span><br><span class="line"># 从会话文件中读取下载任务</span><br><span class="line">input-file=/root/aria2/aria2.session</span><br><span class="line"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span><br><span class="line">save-session=/root/aria2/aria2.session</span><br><span class="line"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br><span class="line">save-session-interval=60</span><br><span class="line"># 强制保存会话, 即使任务已经完成, 默认:false</span><br><span class="line"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="line">force-save=true</span><br><span class="line">bt-hash-check-seed=true</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line">bt-save-metadata=true</span><br><span class="line"></span><br><span class="line">## RPC相关设置 ##</span><br><span class="line"></span><br><span class="line"># 启用RPC, 默认:false</span><br><span class="line">enable-rpc=true</span><br><span class="line"># 允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"># 允许非外部访问, 默认:false</span><br><span class="line">rpc-listen-all=true</span><br><span class="line"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">event-poll=select</span><br><span class="line"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">rpc-listen-port=6800</span><br><span class="line"># 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span><br><span class="line">rpc-secret=csdn2017</span><br><span class="line"></span><br><span class="line">## BT/PT下载相关 ##</span><br><span class="line"></span><br><span class="line"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="line">follow-torrent=true</span><br><span class="line"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">listen-port=19999</span><br><span class="line"># 单个种子最大连接数, 默认:55</span><br><span class="line">bt-max-peers=100</span><br><span class="line"># 打开DHT功能, PT需要禁用, 默认:true</span><br><span class="line">enable-dht=true</span><br><span class="line"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">enable-dht6=false</span><br><span class="line"># DHT网络监听端口, 默认:6881-6999</span><br><span class="line">dht-listen-port=6881-6999</span><br><span class="line"># 本地节点查找, PT需要禁用, 默认:false</span><br><span class="line">bt-enable-lpd=true</span><br><span class="line"># 种子交换, PT需要禁用, 默认:true</span><br><span class="line">enable-peer-exchange=true</span><br><span class="line"># 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="line">bt-request-peer-speed-limit=50K</span><br><span class="line"># 客户端伪装, PT需要</span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br><span class="line">seed-ratio=0.2</span><br><span class="line"># BT校验相关, 默认:true</span><br><span class="line">bt-hash-check-seed=true</span><br><span class="line"># 继续之前的BT任务时, 无需再次校验, 默认:false</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br><span class="line">bt-save-metadata=false</span><br><span class="line">#强制加密, 防迅雷必备</span><br><span class="line">bt-require-crypto=true</span><br><span class="line">#添加额外tracker#</span><br><span class="line">#bt-tracker=</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title>centOS下安装jdk</title>
    <url>/2019/04/04/centOS%E4%B8%8B%E5%AE%89%E8%A3%85jdk/</url>
    <content><![CDATA[<h4 id="卸载系统自带的OpenJDK以及相关的java文件"><a href="#卸载系统自带的OpenJDK以及相关的java文件" class="headerlink" title="卸载系统自带的OpenJDK以及相关的java文件"></a>卸载系统自带的OpenJDK以及相关的java文件</h4><span id="more"></span>

<ol>
<li>java -version</li>
<li>rpm -qa | grep java<br>命令说明：</li>
</ol>
<p>  rpm 　　管理套件    </p>
<p>  -qa 　　使用询问模式，查询所有套件</p>
<p>  grep　　查找文件里符合条件的字符串</p>
<p>  java 　　查找包含java字符串的文件</p>
<ol start="3">
<li>在命令窗口键入：</li>
</ol>
<p>  rpm -e –nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</p>
<ol start="4">
<li>如果还没有删除，则用yum -y remove去删除他们</li>
</ol>
<h4 id="安装官方jdk"><a href="#安装官方jdk" class="headerlink" title="安装官方jdk"></a>安装官方jdk</h4><ol>
<li><p>wget 安装官方最新，可以安装到/usr/java/jdk1.8</p>
</li>
<li><p>tar -zxvf jdk-8u144-linux-x64.tar.gz 解压</p>
</li>
</ol>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li><p>配置JDK环境变量<br> ①编辑全局变量</p>
<p> 在命令行键入：<br> vim /etc/profile</p>
<p> 在文本的最后一行粘贴如下：</p>
<p> （注意JAVA_HOME=/usr/java/jdk1.8.0_144  就是你自己的目录）</p>
<p> 复制代码<br> #java environment<br> export JAVA_HOME=/usr/java/jdk1.8.0_144<br> export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar<br> export PATH=$PATH:${JAVA_HOME}/bin</p>
<p> 复制代码<br> 【注】：CentOS6上面的是JAVAHOME，CentOS7是{JAVA_HOME}</p>
<p> 最后：source /etc/profile 生效</p>
</li>
</ol>
]]></content>
      <categories>
        <category>centOS</category>
      </categories>
      <tags>
        <tag>centOS</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>centOS防火墙</title>
    <url>/2019/04/04/centOS%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h4 id="防火墙操作"><a href="#防火墙操作" class="headerlink" title="防火墙操作"></a>防火墙操作</h4><span id="more"></span>

<ol>
<li><p>firewall-cmd –zone=public –add-port=3000/tcp –permanent</p>
</li>
<li><p>firewall-cmd –reload</p>
</li>
<li><p>firewall-cmd –list-all</p>
</li>
<li><p>systemctl restart firewalld</p>
</li>
</ol>
]]></content>
      <categories>
        <category>centOS</category>
      </categories>
      <tags>
        <tag>centOS</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 入门</title>
    <url>/2019/03/28/docker-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最全 Docker 介绍与教程，一文全掌握。</p>
<span id="more"></span>

<p>2013年发布至今， Docker 一直广受瞩目，被认为可能会改变软件行业。</p>
<p>但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。</p>
<p>一、环境配置的难题</p>
<p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p>
<p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p>
<p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p>
<p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p>
<p>二、虚拟机</p>
<p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p>
<p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p>
<p>（1）资源占用多</p>
<p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p>
<p>（2）冗余步骤多</p>
<p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p>
<p>（3）启动慢</p>
<p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p>
<p>三、Linux 容器</p>
<p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p>
<p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>
<p>由于容器是进程级别的，相比虚拟机有很多优势。</p>
<p>（1）启动快</p>
<p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p>
<p>（2）资源占用少</p>
<p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p>
<p>（3）体积小</p>
<p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p>
<p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p>
<p>四、Docker 是什么？</p>
<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>
<p>五、Docker 的用途</p>
<p>Docker 的主要用途，目前有三大类。</p>
<p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p>
<p>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p>
<p>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p>
<p>六、Docker 的安装</p>
<p>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。</p>
<p>Docker CE 的安装请参考官方文档。</p>
<p>安装完成后，运行下面的命令，验证是否安装成功。</p>
<p>$ docker version$ docker info<br>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。</p>
<p>$ sudo usermod -aG docker $USER<br>Docker 是服务器—-客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（官方文档）。</p>
<p>$ sudo service docker start$ sudo systemctl start docker</p>
<p>七、image 文件</p>
<p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p>
<p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p>
<p>$ docker image ls$ docker image rm [imageName]<br>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p>
<p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p>
<p>八、实例：hello world</p>
<p>下面，我们通过最简单的 image 文件”hello world”，感受一下 Docker。</p>
<p>需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在下一篇文章的第一节。有需要的朋友，可以先看一下。</p>
<p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p>
<p>$ docker image pull library/hello-world<br>上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。</p>
<p>由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p>
<p>$ docker image pull hello-world<br>抓取成功以后，就可以在本机看到这个 image 文件了。</p>
<p>$ docker image ls<br>现在，运行这个 image 文件。</p>
<p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。</p>
<p>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p>
<p>如果运行成功，你会在屏幕上读到下面的输出。</p>
<p>$ docker container run hello-worldHello from Docker!This message shows that your installation appears to be working correctly…<br>输出这段提示以后，hello world就会停止运行，容器自动终止。</p>
<p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p>
<p>$ docker container run -it ubuntu bash<br>对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。</p>
<p>$ docker container kill [containID]</p>
<p>九、容器文件</p>
<p>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p>
<p>$ docker container ls$ docker container ls –all</p>
<p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。</p>
<p>终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。</p>
<p>$ docker container rm [containerID]<br>运行上面的命令之后，再使用docker container ls –all命令，就会发现被删除的容器文件已经消失了。</p>
<p>十、Dockerfile 文件</p>
<p>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p>
<p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p>
<p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p>
<p>十一、实例：制作自己的 Docker 容器</p>
<p>下面我以 koa-demos 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p>
<p>作为准备工作，请先下载源码。</p>
<p>$ git clone <a href="https://github.com/ruanyf/koa-demos.git$">https://github.com/ruanyf/koa-demos.git$</a> cd koa-demos<br>11.1 编写 Dockerfile 文件<br>首先，在项目的根目录下，新建一个文本文件.dockerignore，写入下面的内容。</p>
<p>.gitnode_modulesnpm-debug.log<br>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p>
<p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的内容。</p>
<p>FROM node:8.4COPY . /appWORKDIR /appRUN npm install –registry=<a href="https://registry.npm.taobao.orgexpose/">https://registry.npm.taobao.orgEXPOSE</a> 3000<br>上面代码一共五行，含义如下。</p>
<p>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</p>
<p>COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</p>
<p>WORKDIR /app：指定接下来的工作路径为/app。</p>
<p>RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</p>
<p>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</p>
<p>11.2 创建 image 文件<br>有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。</p>
<p>$ docker image build -t koa-demo .$ docker image build -t koa-demo:0.0.1 .<br>上面代码中，-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p>
<p>如果运行成功，就可以看到新生成的 image 文件koa-demo了。</p>
<p>$ docker image ls<br>11.3 生成容器<br>docker container run命令会从 image 文件生成容器。</p>
<p>$ docker container run -p 8000:3000 -it koa-demo /bin/bash$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash<br>上面命令的各个参数含义如下：</p>
<p>-p参数：容器的 3000 端口映射到本机的 8000 端口。</p>
<p>-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</p>
<p>koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</p>
<p>/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</p>
<p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p>
<p>root@66d80f4aaf1e:/app<br>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p>
<p>root@66d80f4aaf1e:/app<br>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000，网页显示&quot;Not">http://127.0.0.1:8000，网页显示&quot;Not</a> Found”，这是因为这个 demo 没有写路由。</p>
<p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p>
<p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用docker container kill终止容器运行。</p>
<p>$ docker container ls$ docker container kill [containerID]<br>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p>
<p>$ docker container ls –all$ docker container rm [containerID]<br>也可以使用docker container run命令的–rm参数，在容器终止运行后自动删除容器文件。</p>
<p>$ docker container run –rm -p 8000:3000 -it koa-demo /bin/bash<br>10.4 CMD 命令<br>上一节的例子里面，容器启动以后，需要手动输入命令node demos/01.js。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p>
<p>FROM node:8.4COPY . /appWORKDIR /appRUN npm install –registry=<a href="https://registry.npm.taobao.orgexpose/">https://registry.npm.taobao.orgEXPOSE</a> 3000CMD node demos/01.js<br>上面的 Dockerfile 里面，多了最后一行CMD node demos/01.js，它表示容器启动后自动执行node demos/01.js。</p>
<p>你可能会问，RUN命令与CMD命令的区别在哪里？简单说，RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令。</p>
<p>注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。现在，启动容器可以使用下面的命令。</p>
<p>$ docker container run –rm -p 8000:3000 -it koa-demo:0.0.1<br>10.5 发布 image 文件<br>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p>
<p>首先，去 hub.docker.com  或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。</p>
<p>接着，为本地的 image 标注用户名和版本。</p>
<p>$ docker image tag [imageName] [username]/[repository]:[tag]$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1<br>也可以不标注用户名，重新构建一下 image 文件。</p>
<p>$ docker image build -t [username]/[repository]:[tag] .<br>最后，发布 image 文件。</p>
<p>$ docker image push [username]/[repository]:[tag]<br>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p>
<p>十二、其他有用的命令</p>
<p>docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。</p>
<p>（1）docker container start</p>
<p>前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。</p>
<p>$ docker container start [containerID]<br>（2）docker container stop</p>
<p>前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。</p>
<p>$ bash container stop [containerID]<br>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p>
<p>（3）docker container logs</p>
<p>docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。</p>
<p>$ docker container logs [containerID]<br>（4）docker container exec</p>
<p>docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。</p>
<p>$ docker container exec -it [containerID] /bin/bash<br>（5）docker container cp</p>
<p>docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</p>
<p>$ docker container cp [containID]:[/path/to/file] .<br>非常感谢你一直读到了这里，这个系列还有下一篇，介绍如何使用 Docker 搭建真正的网站，欢迎继续阅读。</p>
<p>转载声明：本文系转载，原文地址：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令</title>
    <url>/2019/03/29/docker%E5%85%AC%E5%8F%B8%E5%9D%91%E7%88%B9%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="记录在公司开发使用的docker命令"><a href="#记录在公司开发使用的docker命令" class="headerlink" title="记录在公司开发使用的docker命令"></a>记录在公司开发使用的docker命令</h3><ol>
<li><p>docker exec -it mysql-server mysql -uroot -p 进入容器mysql</p>
</li>
<li><p>docker inspect containerID |grep Mounts -A 20 查看容器挂载目录</p>
</li>
<li><p>ps -ef | grep mysql</p>
</li>
<li><p>cat /var/lib/jenkins/secrets/initialAdminPassword</p>
</li>
<li><p>service jenkins start</p>
</li>
<li><p>vim /etc/sysconfig/jenkins</p>
</li>
<li><p>vim /etc/init.d/jenkins</p>
</li>
<li><p>docker cp jenkins:/var/jenkins_home/jenkinsPro.jar /var/lib/jenkins/</p>
</li>
<li><p>忘记root密码：找到MySQL的my.cnf配置文件，在/etc/my.cnf (有些版本是/etc/mysql/my.cnf）在里面增加下面一段信息：</p>
<pre><code> [mysqld]
 skip-grant-tables
 进入数据库
 use mysql; update mysql.user set     authentication_string=password(&#39;123&#39;) where user=&#39;root&#39;;
</code></pre>
</li>
<li><p>systemctl start mysqld.service</p>
</li>
<li><p>   部署问题：在伟哥更新了gateway后终于可以成功部署，但是前端访问时没有访问，首先配置了防火墙，确认打开了端口后，还是无页面信息，访问了192.168.0.99：5555的gateway端口后也没有任何显示</p>
</li>
</ol>
<pre><code>最后居然使用https://192.168.0.99：5555访问后就可以了，是访问一边后生成了证书吗？
 
</code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的build和dockerfile</title>
    <url>/2019/03/28/docker%E7%9A%84build%E5%92%8Cdockerfile/</url>
    <content><![CDATA[<h3 id="docker-的Dockerfile"><a href="#docker-的Dockerfile" class="headerlink" title="docker 的Dockerfile"></a>docker 的Dockerfile</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">From centos</span><br><span class="line">From openjdk:8-jdk</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD *.jar app.jar</span><br><span class="line">RUN sh -c <span class="string">&#x27;touch /app.jar&#x27;</span></span><br><span class="line">ENV JAVA_OPTS=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</span></span><br><span class="line">CMD <span class="built_in">exec</span> java <span class="variable">$JAVA_OPTS</span> -Djava.security.egd=file:/dev/./urandom -jar /app.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="docker-build-t-name"><a href="#docker-build-t-name" class="headerlink" title="docker build -t name ."></a>docker build -t name .</h3><ol>
<li><p>记住名字后面有个点 标识DockerFile的位置</p>
</li>
<li><p>启动创建的容器用 docker start </p>
</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置jenkins</title>
    <url>/2019/03/22/docker%E9%85%8D%E7%BD%AEjenkins/</url>
    <content><![CDATA[<h3 id="docker是啥"><a href="#docker是啥" class="headerlink" title="docker是啥"></a>docker是啥</h3><span id="more"></span>

<ol>
<li>docker就是小型虚拟机，当然也有傻子那它当虚拟机</li>
<li>docker需要将自己的项目挂载在宿主机目录下，如果挂载了/etc这样的敏感目录，会导致风险</li>
</ol>
<h3 id="docker配置"><a href="#docker配置" class="headerlink" title="docker配置"></a>docker配置</h3><ol>
<li>pacman -S docker 安装</li>
<li>docker info 查看信息</li>
</ol>
<h3 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h3><ol>
<li><p>systemctl start docker 启动docker</p>
</li>
<li><p>docker pull  jenkins     下载jenkins</p>
</li>
<li><p>docker run jenkins      也会自动下载 但是不推荐这么粗暴的使用</p>
</li>
<li><p>docker pull是下载镜像，镜像运行需要容器，使用docker image ls -a 可以查看所有镜像</p>
<p>​    使用docker container ls -a 查看所有的容器 包括不运行的容器，可以看到他们的ID</p>
</li>
<li><p>删除image或者container：docker image rmi 镜像id</p>
<p>​                        docker container rm 容器id</p>
</li>
<li><p>运行一个镜像产生容器：docker run –name jenkins –user root -p 38080:8080 -p 50000:50000 -v /root/jenkins/data/:/var/jenkins_home jenkins -d</p>
<p>说明：run-&gt; 运行</p>
<p>​        –name -&gt; 指定名字</p>
<p>​        -p -&gt; 指定端口映射    宿主机访问端口 : docker虚拟镜像访问端口</p>
<p>​            -v -&gt; 挂载目录</p>
<p>​        -d -&gt; 后台运行</p>
</li>
<li><p>docker镜像后台运行时想查看镜像：docker logs &lt;跑起来的容器&gt;</p>
</li>
<li><p>docker里面跑的容器其实就是虚拟机，如何进入这个虚拟机？：docker exec –user root -it 2645da9f9fc0 /bin/bash</p>
<p>说明： –user root -&gt; 以root用户进入虚拟机</p>
</li>
<li><p>访问宿主机的38080端口</p>
</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>education自动化测试环境部署</title>
    <url>/2019/04/28/education%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h4 id="配置selenium和testng"><a href="#配置selenium和testng" class="headerlink" title="配置selenium和testng"></a>配置selenium和testng</h4>]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>entityManagerFactory error log</title>
    <url>/2019/03/19/entityManagerFactory-error-log/</url>
    <content><![CDATA[<h3 id="Spring数据jpa-没有定义名为“entityManagerFactory”的bean-注入自动连接的依赖失败"><a href="#Spring数据jpa-没有定义名为“entityManagerFactory”的bean-注入自动连接的依赖失败" class="headerlink" title="Spring数据jpa-没有定义名为“entityManagerFactory”的bean;注入自动连接的依赖失败"></a>Spring数据jpa-没有定义名为“entityManagerFactory”的bean;注入自动连接的依赖失败</h3><span id="more"></span>

<p>Spring数据JPA默认情况下查找名为entityManagerFactory的EntityManagerFactory。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>想这样配置为entityManagerFactory会自动找到</p>
<p>否则手动匹配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring data jpa 配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描springdatajpa接口所在的dao包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tr&quot;</span> <span class="attr">entity-manager-factory-ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Log</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone need sudo: socks4错误</title>
    <url>/2019/06/25/git-clone-need-sudo-sock4%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h3 id="git-clone在开了代理的情况下无法使用"><a href="#git-clone在开了代理的情况下无法使用" class="headerlink" title="git clone在开了代理的情况下无法使用"></a>git clone在开了代理的情况下无法使用</h3><p>原因：git 默认https使用socks4作为代理协议，shadowsock使用的是socks5协议</p>
<p>方法：                                             </p>
<pre><code>git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39; 
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate Java详解</title>
    <url>/2019/03/08/hibernate-Java%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="首先需要一个JavaBean在domain包下"><a href="#首先需要一个JavaBean在domain包下" class="headerlink" title="首先需要一个JavaBean在domain包下"></a>首先需要一个JavaBean在domain包下</h3><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="comment">//    create table `cst_customer`(</span></span><br><span class="line"><span class="comment">//            `cust_id` BIGINT(32) NOT NULL AUTO_INCREMENT comment &#x27;客户编号&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_name` varchar(32) NOT NULL comment &#x27;客户名称&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_source` varchar(32) DEFAULT NULL comment &#x27;客户信息来源&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_industry` varchar(32) DEFAULT NULL comment &#x27;客户行业&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_level` varchar(32) DEFAULT NULL comment &#x27;客户级别&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_linkman` varchar(64) DEFAULT NULL comment &#x27;联系人&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_phone` varchar(64) DEFAULT NULL comment &#x27;固定电话&#x27;,</span></span><br><span class="line"><span class="comment">//            `cust_mobile` varchar(16) DEFAULT NULL comment &#x27;移动电话&#x27;,</span></span><br><span class="line"><span class="comment">//    primary key (`cust_id`)</span></span><br><span class="line"><span class="comment">//)ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET =utf8;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> cust_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_name;</span><br><span class="line">    <span class="keyword">private</span> String cust_source;</span><br><span class="line">    <span class="keyword">private</span> String cust_industry;</span><br><span class="line">    <span class="keyword">private</span> String cust_level;</span><br><span class="line">    <span class="keyword">private</span> String cust_linkman;</span><br><span class="line">    <span class="keyword">private</span> String cust_phone;</span><br><span class="line">    <span class="keyword">private</span> String cust_mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCust_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_id</span><span class="params">(<span class="keyword">long</span> cust_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_id = cust_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_name</span><span class="params">(String cust_name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_name = cust_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_source</span><span class="params">(String cust_source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_source = cust_source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_industry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_industry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_industry</span><span class="params">(String cust_industry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_industry = cust_industry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_level</span><span class="params">(String cust_level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_level = cust_level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_linkman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_linkman;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_linkman</span><span class="params">(String cust_linkman)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_linkman = cust_linkman;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_phone</span><span class="params">(String cust_phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_phone = cust_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCust_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cust_mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_mobile</span><span class="params">(String cust_mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cust_mobile = cust_mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加一个utils包，将共有的方法抽象出来"><a href="#添加一个utils包，将共有的方法抽象出来" class="headerlink" title="添加一个utils包，将共有的方法抽象出来"></a>添加一个utils包，将共有的方法抽象出来</h3><p>​    这是由于SessionFactory最好在一个web中只存在一个的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Configuration configure = <span class="keyword">new</span> Configuration().configure(); <span class="comment">//加载src下的主要配置文件</span></span><br><span class="line">        sessionFactory = configure.buildSessionFactory(); <span class="comment">//根据配置信息，创建sessionFactory</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得session 1.全新  2.与线程绑定的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = sessionFactory.openSession(); <span class="comment">//获得新的session</span></span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCUrrentSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = sessionFactory.getCurrentSession(); <span class="comment">//获得新的session</span></span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对于DAO层详解"><a href="#对于DAO层详解" class="headerlink" title="对于DAO层详解"></a>对于DAO层详解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.bean.Customer;</span><br><span class="line"><span class="keyword">import</span> com.tr.utils.HibernateUtils;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sessionFactory: 1. 是线程安全的 消耗很多资源</span></span><br><span class="line"><span class="comment"> * 2. 要保证每个web项目生成一个Factory</span></span><br><span class="line"><span class="comment"> * 3. 工厂模式，用于读取文件配置，生成相应的session</span></span><br><span class="line"><span class="comment"> * session: 1. hibernate的核心对象 负责与数据库和hibernate的链接</span></span><br><span class="line"><span class="comment"> * 2. 可以对数据库做crud</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.增</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//保存客户</span></span><br><span class="line">        Configuration configure = <span class="keyword">new</span> Configuration().configure(); <span class="comment">//加载src下的主要配置文件</span></span><br><span class="line">        SessionFactory sessionFactory = configure.buildSessionFactory(); <span class="comment">//根据配置信息，创建sessionFactory</span></span><br><span class="line">        Session session = sessionFactory.openSession(); <span class="comment">//获得新的session</span></span><br><span class="line"><span class="comment">//    Session session = sessionFactory.getCurrentSession(); //获得与线程绑定的session</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//session获得事务操作的Transaction对象</span></span><br><span class="line"><span class="comment">//    Transaction transaction = session.getTransaction(); //只获得</span></span><br><span class="line">        Transaction transaction = session.beginTransaction(); <span class="comment">//不仅获得还开始事务操作</span></span><br><span class="line">        <span class="comment">//-----------</span></span><br><span class="line"><span class="comment">//        Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">//        customer.setCust_name(&quot;测试公司&quot;);</span></span><br><span class="line"></span><br><span class="line">        session.save(customer);</span><br><span class="line">        <span class="comment">//------------</span></span><br><span class="line">        transaction.commit(); <span class="comment">//提交事务</span></span><br><span class="line"><span class="comment">//    transaction.rollback();//回滚事务</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCustomer</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//保存客户</span></span><br><span class="line">        Configuration configure = <span class="keyword">new</span> Configuration().configure(); <span class="comment">//加载src下的主要配置文件</span></span><br><span class="line">        SessionFactory sessionFactory = configure.buildSessionFactory(); <span class="comment">//根据配置信息，创建sessionFactory</span></span><br><span class="line">        Session session = sessionFactory.openSession(); <span class="comment">//获得新的session</span></span><br><span class="line"><span class="comment">//    Session session = sessionFactory.getCurrentSession(); //获得与线程绑定的session</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//session获得事务操作的Transaction对象</span></span><br><span class="line"><span class="comment">//    Transaction transaction = session.getTransaction(); //只获得</span></span><br><span class="line">        Transaction transaction = session.beginTransaction(); <span class="comment">//不仅获得还开始事务操作</span></span><br><span class="line">        <span class="comment">//-----------</span></span><br><span class="line"><span class="comment">//        Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">//        customer.setCust_name(&quot;测试公司&quot;);</span></span><br><span class="line"></span><br><span class="line">        Customer customer = session.get(Customer.class, (<span class="keyword">long</span>) id);</span><br><span class="line">        System.out.println(customer.getCust_name());</span><br><span class="line">        <span class="comment">//------------</span></span><br><span class="line">        transaction.commit(); <span class="comment">//提交事务</span></span><br><span class="line"><span class="comment">//    transaction.rollback();//回滚事务</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    3.改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(Customer customer,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//保存客户</span></span><br><span class="line"><span class="comment">//        Configuration configure = new Configuration().configure(); //加载src下的主要配置文件</span></span><br><span class="line"><span class="comment">//        SessionFactory sessionFactory = configure.buildSessionFactory(); //根据配置信息，创建sessionFactory</span></span><br><span class="line"><span class="comment">//        Session session = sessionFactory.openSession(); //获得新的session</span></span><br><span class="line"><span class="comment">//    Session session = sessionFactory.getCurrentSession(); //获得与线程绑定的session</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//session获得事务操作的Transaction对象</span></span><br><span class="line"><span class="comment">//    Transaction transaction = session.getTransaction(); //只获得</span></span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction(); <span class="comment">//不仅获得还开始事务操作</span></span><br><span class="line"></span><br><span class="line">        session.update(customer);</span><br><span class="line"><span class="comment">//    System.out.println(customer.getCust_name());</span></span><br><span class="line">        <span class="comment">//------------</span></span><br><span class="line">        transaction.commit(); <span class="comment">//提交事务</span></span><br><span class="line"><span class="comment">//    transaction.rollback();//回滚事务</span></span><br><span class="line">        session.close();</span><br><span class="line"><span class="comment">//        sessionFactory.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//保存客户</span></span><br><span class="line">        Configuration configure = <span class="keyword">new</span> Configuration().configure(); <span class="comment">//加载src下的主要配置文件</span></span><br><span class="line">        SessionFactory sessionFactory = configure.buildSessionFactory(); <span class="comment">//根据配置信息，创建sessionFactory</span></span><br><span class="line">        Session session = sessionFactory.openSession(); <span class="comment">//获得新的session</span></span><br><span class="line"></span><br><span class="line">        Transaction transaction = session.beginTransaction(); <span class="comment">//不仅获得还开始事务操作</span></span><br><span class="line">        <span class="comment">//-----------</span></span><br><span class="line">        Customer customer = session.get(Customer.class, (<span class="keyword">long</span>) id);</span><br><span class="line">        session.delete(customer);</span><br><span class="line">        <span class="comment">//------------</span></span><br><span class="line">        transaction.commit(); <span class="comment">//提交事务</span></span><br><span class="line"><span class="comment">//    transaction.rollback();//回滚事务</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hibernate</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate规则学习</title>
    <url>/2019/03/11/hibernate%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="hibernate-规则"><a href="#hibernate-规则" class="headerlink" title="hibernate 规则"></a>hibernate 规则</h3><span id="more"></span>

<h4 id="1-实体类创建注意事项"><a href="#1-实体类创建注意事项" class="headerlink" title="1. 实体类创建注意事项"></a>1. 实体类创建注意事项</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 成员变量私有，设置setter，getter公共方法</span><br><span class="line">b. 属性都是指的get，set方法 </span><br><span class="line">c. 需要无参数构造方法</span><br><span class="line">d. 尽量使用包装类型 Integer ...</span><br><span class="line">e. 持久化类需要提供oid 与数据库的主键对应   如果表没有主键 不能用hibernate</span><br><span class="line">f. 不要用final修饰class 因为hibernate使用cglib代理生成代理对象，代理对象是继承关系</span><br></pre></td></tr></table></figure>

<h3 id="2-主键类型"><a href="#2-主键类型" class="headerlink" title="2. 主键类型"></a>2. 主键类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 自然主键（少见）  表的业务列中符合必须有，且不重复特征，该列可以为主键</span><br><span class="line">b. 代理主键（常见）  表没有任何意义的列，用于区别</span><br></pre></td></tr></table></figure>

<h3 id="3-主键生成策略generator"><a href="#3-主键生成策略generator" class="headerlink" title="3. 主键生成策略generator"></a>3. 主键生成策略generator</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 每条记录录入时主键生成的规则 </span><br><span class="line">		identity:自增，由数据库自己维护主键值</span><br><span class="line">           increment：自增，（不建议使用）由hibernate维护，每次插入前找表中id最大的，+1</span><br><span class="line">           sequence：oracle中的主键生成策略</span><br><span class="line">           hilo:高低位算法（不建议使用），自增，hibernate，确保不会重复</span><br><span class="line">           native：（建议）hilo+sequence+identity 自动三选一</span><br><span class="line">           uuid：（主键类型必须为String）用来产生永远不重复的随机字符串最为主键</span><br><span class="line">           assigned：自然属性生成策略，就是没有策略，用户自己指定主键</span><br></pre></td></tr></table></figure>

<h3 id="4-hibernate-中对象的状态"><a href="#4-hibernate-中对象的状态" class="headerlink" title="4. hibernate 中对象的状态"></a>4. hibernate 中对象的状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save方法其实是为了生成oid值 所以需要执行insert语句</span><br><span class="line">持久化状态会自动将任何变化同步到数据库，</span><br><span class="line">	1. 对象分为三种状态： 	瞬时状态</span><br><span class="line">								没有id ,没有与session关联就是 不在session缓存</span><br><span class="line">							持久化状态</span><br><span class="line">								有id，有session关联</span><br><span class="line">							游离状态</span><br><span class="line">								有id，没有与session关联</span><br><span class="line">								</span><br><span class="line">	2. 结论：将我们希望同步到数据库的数据，对应的对象转换为持久化状态</span><br><span class="line">			在get后可以直接修改状态，不用调用update</span><br><span class="line">			后期有个重要方法：saveOrUpdate 可以将对象变为持久化状态</span><br></pre></td></tr></table></figure>

<h3 id="5-hibernate-一级缓存"><a href="#5-hibernate-一级缓存" class="headerlink" title="5. hibernate 一级缓存"></a>5. hibernate 一级缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子：比如取5次某个对象，这5个对象引用地址一样，因为hibernate先查看缓存</span><br><span class="line">hibernate取出的时候会产生两个对象，一个放入缓存，一个放入快照，commit的时候对比快照</span><br><span class="line">改变就产生sql</span><br></pre></td></tr></table></figure>

<h3 id="6-hibernate事务"><a href="#6-hibernate事务" class="headerlink" title="6. hibernate事务"></a>6. hibernate事务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 原子性 a	要么全成功 。。。</span><br><span class="line">2. 一致性 c	数据总量提交前和提交后不变</span><br><span class="line">3. 隔离性 i 事务并发</span><br><span class="line">4. 持久性 d 数据必须立即写入硬盘</span><br><span class="line"></span><br><span class="line">事务并发问题： 1脏读 读的是正在操作的数据</span><br><span class="line">				2不可重复读：两次读不一致</span><br><span class="line">				3幻读：自己删了有人添加，一查还在 感觉没删</span><br><span class="line">事务隔离级别：读为提交 可能：123</span><br><span class="line">				读已提交：23</span><br><span class="line">				可重复读（mysql默认级别)：3</span><br><span class="line">				串行化：没问题  效率低</span><br><span class="line"></span><br><span class="line">指定hibernate隔离级别：			</span><br><span class="line">	&lt;!--指定hibernate隔离级别</span><br><span class="line">		1|2|4|8</span><br><span class="line">		0001 1 读为提交</span><br><span class="line">		0010 2  读已提交</span><br><span class="line">		0100 4 可重复读</span><br><span class="line">		1000 8 串行化</span><br><span class="line">	--&gt;</span><br><span class="line">	&lt;property name=&quot;hibernate.connection.isolation&quot;&gt;4&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">项目中如何管理事务：</span><br><span class="line">	1. 业务开始之前打开事务，业务执行之后提交事务，执行中出现异常回滚</span><br><span class="line">	2. dao和service层用的同一个session，service负责开启和提交事务，将session绑定到本线程，</span><br><span class="line">		调用session.getCurrentSession方法即可获得当前线程绑定的session对象</span><br><span class="line">		注意:必须在著配置文件中配置才能用这个方法</span><br><span class="line">		```xml				</span><br><span class="line">			&lt;!--指定session与线程绑定--&gt;</span><br><span class="line">			&lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<pre><code>    **example**
    service 开启事务，关闭和回滚
    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获得session   这时候customer没有id，不和session关联  瞬时状态</span></span><br><span class="line">	Session session = HibernateUtils.getCUrrentSession();</span><br><span class="line">	<span class="comment">//执行事务</span></span><br><span class="line">	Transaction transaction = session.beginTransaction();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		dao.save(customer);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">		transaction.rollback();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//提交事务</span></span><br><span class="line">	transaction.commit();</span><br><span class="line">	session.close(); <span class="comment">//有id 无session 游离状态</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    dao 执行事务
    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * save方法其实是为了生成oid值 所以需要执行insert语句</span></span><br><span class="line"><span class="comment"> * 持久化状态会自动将任何变化同步到数据库，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//获得session   这时候customer没有id，不和session关联  瞬时状态</span></span><br><span class="line">		Session session = HibernateUtils.getCUrrentSession();</span><br><span class="line">		<span class="comment">//保存</span></span><br><span class="line">		session.save(customer); <span class="comment">//持久化状态</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>​    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br></pre></td></tr></table></figure>

<h3 id="7-hibernate中批量查询"><a href="#7-hibernate中批量查询" class="headerlink" title="7. hibernate中批量查询"></a>7. hibernate中批量查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. hql   可以多表查询 但是大部分都是单表查询</span><br><span class="line">	 * 书写HQL</span><br><span class="line">	 * String hql = &quot;from com.tr.domain.Customer where cust_id = 1&quot;;  //如果类名不重复 可以不用写包名</span><br><span class="line">	 * Query query = session.createQuery(hql);</span><br><span class="line">	 * List&lt;Custromer&gt; list =  query.list(); //查询所有结果</span><br><span class="line">	 * query.uniqueResult() ; //查询唯一结果(有where的情况下)</span><br><span class="line">	 *</span><br><span class="line">	  * 带参数？的</span><br><span class="line">	 *</span><br><span class="line">	 * String hql = &quot;from Custromer where cust_id=?&quot;</span><br><span class="line">	 * //创建查询对象</span><br><span class="line">	 * Query query = session.createQuery(hql);</span><br><span class="line">	 *  //设置参数  第一个是参数的位置</span><br><span class="line">	 *  query.setLong(0,12&quot;) //可以换成setParameter就不用写类型</span><br><span class="line">	 *  Customer c  =query.uniqueResult();</span><br><span class="line">	 *</span><br><span class="line">	  * 命名占位符</span><br><span class="line">	 *  String hql = &quot;from Custromer where cust_id = :cust_id&quot;</span><br><span class="line">	 *  Query query = session.createQuery(hql);</span><br><span class="line">	 *  query.setParameter(&quot;cust_id&quot;,12);</span><br><span class="line">	 *</span><br><span class="line">	 * 分页</span><br><span class="line">	 *  String hql = &quot;from Custromer&quot;</span><br><span class="line">	 *  Query query = session.createQuery(hql);</span><br><span class="line">	 *   //设置分页信息</span><br><span class="line">	 *   query.setFirstResult(0);  //从哪开始抓</span><br><span class="line">	 *   query.setMaxResults(10);   //抓多少</span><br><span class="line">	 *  query.list();</span><br><span class="line">	 *</span><br><span class="line">	 </span><br><span class="line">2. Criteria:hibernate自创的查询，都不用写hql或则sql  用于单表查询</span><br><span class="line">		现在已经被抛弃了</span><br><span class="line">3. sql  复杂业务还是sql</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">video 1 和video 2看完了  但是3，4没看完，且2的最后两个没怎么看。留以后有余力看</span><br><span class="line">			hibernate现在用的少，我选择先看 spring data jpa</span><br></pre></td></tr></table></figure>

<p>​<br>```</p>
]]></content>
      <categories>
        <category>Hibernate</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>java 基础知识点（查漏补缺）</title>
    <url>/2019/07/25/java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%EF%BC%89/</url>
    <content><![CDATA[<h3 id="java-复习（heard-first-java）"><a href="#java-复习（heard-first-java）" class="headerlink" title="java 复习（heard first java）"></a>java 复习（heard first java）</h3><p>最近复习java基础知识:</p>
<ul>
<li>位运算和基础盲点</li>
<li>Lambda</li>
<li>stream<span id="more"></span></li>
</ul>
<h4 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h4><ol>
<li><p>实例变量与局部变量：实例变量未被初始化可以通过编译，存在默认值，false，0，null。局部变量不初始化无法通过编译。</p>
</li>
<li><p>进制转换：Integer.parseInt(“1000”,2) :1000转为二进制：8</p>
</li>
<li><p>位异或运算（^）运算规则是：两个数转为二进制，然后从高位开始比较，如果相同则为0，不相同则为1。</p>
<p> 比如：8^11.8转为二进制是1000，11转为二进制是1011.从高位开始比较得到的是：0011.然后二进制转为十进制，就是Integer.parseInt(“0011”,2)=3;</p>
</li>
<li><p>位与运算符（&amp;）运算规则：两个数都转为二进制，然后从高位开始比较，如果两个数都为1则为1，否则为0。</p>
<p> 比如：129&amp;128.<br> 129转换成二进制就是10000001，128转换成二进制就是10000000。从高位开始比较得到，得到10000000，即128.、</p>
<p> <code>注意：&amp;是位运算符，不是逻辑运算符，&amp;&amp;具有短路功能，在第一个条件不符合的情况下之后不会执行。  但是&amp;比较特殊，计算机中true是用二进制标识，所以可以进行与运算，使用&amp;作为逻辑运算本质还是位运算，等所有条件运行后将结果与。（1&gt;2 &amp; 2&gt;3) ==&gt; (true &amp; true)  </code></p>
</li>
<li><p>位或运算符（|）运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。</p>
<p> 比如：129|128.</p>
<p> 129转换成二进制就是10000001，128转换成二进制就是10000000。从高位开始比较得到，得到10000001，即129.</p>
<p> <code>注意：可作非短路，原因同上</code></p>
</li>
<li><p>位非运算符（~）运算规则：如果位为0，结果是1，如果位为1，结果是0.</p>
<p> 比如：~37</p>
<p> 在Java中，所有数据的表示方法都是以补码的形式表示，如果没有特殊说明，Java中的数据类型默认是int,int数据类型的长度是8位，一位是四个字节，就是32字节，32bit</p>
</li>
<li><p>集合的add和addall方法区别：add添加一个集合相当于添加对应集合的指针，addall方法在添加一个集合元素时，会将这个集合里面的元素添加进去。 </p>
</li>
</ol>
<h5 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h5><p>java文件被编译生成字节码后并不是直接进入内存，需要类加载器（ClassLoader加载），这个加载器引导类进入内存变为类对象，并且将类中的所有区域变为对象，比如成员变量变为<code>Filed\[] field</code>,构造方法变为<code>Constractor\[] cons</code>对象数组，成员方法变为<code>Method\[] methods</code>。</p>
<p>那么反射就是可以直接操控类对象，获取Method里面的方法或者直接操作Filed内变量。比如IDE的代码自动提示，定义一个类<code>Person a</code>后，输入a会自动弹出后面的方法，这是因为IDE自动加载了<code>Person</code>类的字节码进入内存，获取里面的<code>Method</code>数组内的方法，从而展示在了弹窗中。</p>
<p>反射最大的好处是解耦。</p>
<h4 id="java8"><a href="#java8" class="headerlink" title="java8"></a>java8</h4><ol>
<li>内存中：方法区，栈，堆，实际上方法区存在于堆内的永久区，永久区也会被gc回收，只不过比较困难，gc工作在堆，但是8后jvm都取消了永久区</li>
<li>1.7到8的升级点–concurrentHashMap：不在固定段16（因为不好确认多大，现在已经变为链表和红黑树），内部hash算法也变为了底层os支持的cas算法，快很多了</li>
</ol>
<h5 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h5><ol start="3">
<li><p>匿名函数，让函数代码可以作为参数传递</p>
</li>
<li><p>在写lambda时需要函数式接口</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">接口类：</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="comment">//双参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunctionTwo</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">calc</span><span class="params">(T t1, T t2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        MyFunction myFunction = (x)-&gt;(Integer) x*(Integer)x;</span></span><br><span class="line">        Integer operate = operate(num, x -&gt;  x * x);</span><br><span class="line">        System.out.println(operate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(operate((<span class="keyword">long</span>)<span class="number">19</span>, (<span class="keyword">long</span>)<span class="number">12</span>, (x1, x2) -&gt; x1 + x2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Integer <span class="title">operate</span><span class="params">(Integer num, MyFunction&lt;Integer&gt; myFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myFunction.calc(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Long <span class="title">operate</span><span class="params">(Long num1, Long num2, MyFunctionTwo&lt;Long, Long&gt; myFunctionTwo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myFunctionTwo.calc(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>现在可以直接使用java内置的四个基本接口，如有特殊需要再自定义接口</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java8 四大内置核心函数接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Consumer&lt;T&gt; 消费性接口</span></span><br><span class="line"><span class="comment"> *      void accept(T t)</span></span><br><span class="line"><span class="comment"> * Supplier&lt;T&gt; 供给型接口</span></span><br><span class="line"><span class="comment"> *      T get();</span></span><br><span class="line"><span class="comment"> * function&lt;T,R&gt; 函数型接口</span></span><br><span class="line"><span class="comment"> *      R apply(T t)</span></span><br><span class="line"><span class="comment"> * Predicate&lt;T&gt; 断言</span></span><br><span class="line"><span class="comment"> *      boolean test(T t);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Examples</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogConsumer(<span class="string">&quot;hello consumer&quot;</span>, x-&gt; System.out.println(<span class="string">&quot;log:&quot;</span>+x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LogConsumer</span><span class="params">(String message, Consumer&lt;String&gt; consumer)</span> </span>&#123;</span><br><span class="line">        consumer.accept(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSupplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Supplier&lt;Integer&gt; supplier = ()-&gt;(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Function&lt;String, Integer&gt; function = (x) -&gt; Integer.parseInt(x);</span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;11&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>需要注意的是：匿名内部类不可以直接修改外部数据，但是可以操作对象调用其修改方法！</p>
</li>
<li><p>如果4个基本接口不够，可以试试看子类接口（提供更多参数）API为Bi+4接口</p>
</li>
</ul>
<h5 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h5><ol>
<li><p>配合lambda的方法，若lambda的内容已经被实现可以引用</p>
</li>
<li><p>使用示例</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.方法引用：三种引用格式</span></span><br><span class="line"><span class="comment"> * 对象::实例</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 类::静态方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 类::实例方法</span></span><br><span class="line"><span class="comment"> * 2. 构造器引用</span></span><br><span class="line"><span class="comment"> * ClassName::new</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 3. 数组引用</span></span><br><span class="line"><span class="comment"> * Type::new</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">refTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象::实例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);</span><br><span class="line">        <span class="comment">//System.out.println实际被实现了，可以引用</span></span><br><span class="line">        <span class="comment">//注意：引用的时候，被引用方法/实例 的参数和返回值要和接口一致</span></span><br><span class="line">        <span class="comment">//这里自动将入参给System.out.print(),返回值和Consumer一样为void</span></span><br><span class="line">        consumer = System.out::println;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        <span class="keyword">int</span> test = <span class="number">1</span>;</span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; &#123;</span><br><span class="line">            employee.setName(<span class="string">&quot;tst&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> employee.getName();</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">        <span class="comment">//REF</span></span><br><span class="line">        employee.setAge(<span class="number">8</span>);</span><br><span class="line">        Supplier&lt;Integer&gt; supplierRef = employee::getAge;</span><br><span class="line">        System.out.println(supplierRef.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类::静态方法名</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">        <span class="comment">//REF</span></span><br><span class="line">        com = Integer::compare;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类::实例方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注意：这里的方法体也被实现了，String的equals方法，但这是一个实例对象方法</span></span><br><span class="line">        BiPredicate&lt;String, String&gt; predicate = (x, y) -&gt; x.equals(y);</span><br><span class="line">        <span class="comment">//REF</span></span><br><span class="line">        <span class="comment">// java规定，如果第一个参数是调用函数者，第二个是被调者，可以用类名::方法名</span></span><br><span class="line">        predicate = String::equals;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器引用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Supplier&lt;Employee&gt; supplier = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">        <span class="comment">//REF  无参数构造</span></span><br><span class="line">        supplier = Employee::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//REF 有参数构造</span></span><br><span class="line">        <span class="comment">//这里由于BiFunction接受2参数，返回一个，而Employee三个参数，所以手动写一个参数</span></span><br><span class="line">        BiFunction&lt;String, Integer, Employee&gt; bf = (x, y) -&gt; <span class="keyword">new</span> Employee(x, y, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//REF 调用几个参数的构造器取决于函数接口的参数个数</span></span><br><span class="line">        bf = Employee::<span class="keyword">new</span>;<span class="comment">//调用2参数构造器</span></span><br><span class="line">        Employee tr = bf.apply(<span class="string">&quot;tr&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(tr.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组引用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Function&lt;Integer, String[]&gt; fun = x -&gt; <span class="keyword">new</span> String[x];</span><br><span class="line">        String[] apply = fun.apply(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//REF  和构造器引用一致</span></span><br><span class="line">        fun = String[]::<span class="keyword">new</span>;</span><br><span class="line">        fun.apply(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Stream-操作"><a href="#Stream-操作" class="headerlink" title="Stream 操作"></a>Stream 操作</h4><ol>
<li><p>java8的stream分为：创建steam，中间操作，终端操作。<br>实质是将数据源转为流，对流进行一系列操作后生成结果。</p>
</li>
<li><p>值得注意的是：只是转为stream没有任何意义，只有对stream进行终端操作，jvm才会执行stream中间操作。</p>
</li>
<li><p>首先是生成stream，最常用的应该是collection系列集合的stream方法吧</p>
</li>
</ol>
<h5 id="创建stream"><a href="#创建stream" class="headerlink" title="创建stream"></a>创建stream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 创建stream</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        1. 可以通过collection系列集合提供的steam（）或者 parallelStream（）获取流，前者串行流，后者并行流</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"><span class="comment">//        2. 通过Arrays中的静态方法stream（）获取数组流</span></span><br><span class="line">        Employee[] array = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">        Stream&lt;Employee&gt; stream1 = Arrays.stream(array);</span><br><span class="line"><span class="comment">//        3. 通过stream中的of方法创建流</span></span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">//        4. 创建无限流</span></span><br><span class="line">        <span class="comment">//迭代</span></span><br><span class="line">        Stream&lt;Integer&gt; stream3 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>);</span><br><span class="line"><span class="comment">//        stream3.forEach(System.out::println);</span></span><br><span class="line">        <span class="comment">// stream只有在被终端操作的时候才会执行</span></span><br><span class="line">        stream3.limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 生成</span></span><br><span class="line">        Stream&lt;Double&gt; stream4 = Stream.generate(() -&gt; Math.random());</span><br><span class="line">        stream4.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h5><p>对stream流的一些常用操作(流操作)：<code>skip</code> <code>filter</code> <code>limit</code> <code>map</code> <code>flatmap</code> <code>distinct</code> <code>sorted</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取stream后的操作</span></span><br><span class="line"><span class="comment"> * 1. filter 筛选</span></span><br><span class="line"><span class="comment"> * 2. limit 截断</span></span><br><span class="line"><span class="comment"> * 3. skip 跳过</span></span><br><span class="line"><span class="comment"> * 4. distinct 去重</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondOperateStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test1&quot;</span>, <span class="number">18</span>, <span class="number">999.9</span>),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test2&quot;</span>, <span class="number">28</span>, <span class="number">999.9</span>),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test3&quot;</span>, <span class="number">38</span>, <span class="number">999.9</span>),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test4&quot;</span>, <span class="number">48</span>, <span class="number">999.9</span>),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test4&quot;</span>, <span class="number">48</span>, <span class="number">999.9</span>),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test4&quot;</span>, <span class="number">48</span>, <span class="number">999.9</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// limit</span></span><br><span class="line">        <span class="comment">// 中间操作：不执行</span></span><br><span class="line">        Stream&lt;Employee&gt; employeeStream = employees.stream()</span><br><span class="line">                .filter((e) -&gt; e.getAge() &gt; <span class="number">28</span>)</span><br><span class="line">                .limit(<span class="number">2</span>);<span class="comment">// 一旦数据量到达，不再执行后续操作：短路</span></span><br><span class="line">        <span class="comment">//终端操作：一次性执行全部内容，惰性求值</span></span><br><span class="line">        employeeStream.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//skip</span></span><br><span class="line">        employees.stream()</span><br><span class="line">                .filter((e) -&gt; e.getAge() &gt; <span class="number">0</span>)</span><br><span class="line">                .skip(<span class="number">1</span>)</span><br><span class="line">                .distinct() <span class="comment">// 注意 去重的对象要重写hashcode和equals，看employee类实现</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Map操作：将函数作用于每个元素输出</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.stream().map((x) -&gt; x.toUpperCase())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">        employees.stream().map(Employee::getName)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//flatMap操作:将流中的每个元素转为流，再将流拼接</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">//        Stream&lt;char[]&gt; stream = list.stream().flatMap((ele) -&gt; List.of(ele.toCharArray()).stream());</span></span><br><span class="line">        Stream&lt;Character&gt; stream = list.stream()</span><br><span class="line">                .flatMap((ele) -&gt; &#123;</span><br><span class="line">                    List&lt;Character&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (Character c : ele.toCharArray()) temp.add(c);</span><br><span class="line">                    <span class="keyword">return</span> temp.stream();</span><br><span class="line">                &#125;);</span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="comment">//sorted()自然排序</span></span><br><span class="line">    <span class="comment">//sorted(Comparator com)定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自然排序</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制排序</span></span><br><span class="line">        employees.stream().sorted((x1,x2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (x1.getAge()==x2.getAge())</span><br><span class="line">                <span class="keyword">return</span> x1.getName().compareTo(x2.getName());</span><br><span class="line">            <span class="keyword">return</span> x2.getAge() - x1.getAge();</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h5><p>查找匹配，规约收集等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.Java8.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Java8.Employee;</span><br><span class="line"><span class="keyword">import</span> com.Java8.Status;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/14 10:55</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 对stream的终止操作</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 查找与匹配</span></span><br><span class="line"><span class="comment"> * allMatch--检查是否匹配所有元素</span></span><br><span class="line"><span class="comment"> * anyMatch--检查是否少匹配一个元素</span></span><br><span class="line"><span class="comment"> * noneMatch--检查是否没有匹配所有元素</span></span><br><span class="line"><span class="comment"> * findFirst--返回第一个元素</span></span><br><span class="line"><span class="comment"> * findAny--返回当前流中的任意元素</span></span><br><span class="line"><span class="comment"> * count--返回流中的元素总数</span></span><br><span class="line"><span class="comment"> * max--返回流中的最大值</span></span><br><span class="line"><span class="comment"> * min--返回流中最小值</span></span><br><span class="line"><span class="comment"> * 规约，收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateOperateStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test1&quot;</span>, <span class="number">18</span>, <span class="number">919.9</span>, Status.FREE),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test2&quot;</span>, <span class="number">17</span>, <span class="number">299.9</span>, Status.BUSY),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test3&quot;</span>, <span class="number">28</span>, <span class="number">599.9</span>, Status.VOCATION),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test4&quot;</span>, <span class="number">38</span>, <span class="number">1999.9</span>, Status.FREE),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test5&quot;</span>, <span class="number">58</span>, <span class="number">599.9</span>, Status.BUSY),</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;test6&quot;</span>, <span class="number">48</span>, <span class="number">499.9</span>, Status.VOCATION)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * .......</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否所有人都忙  检查匹配所有元素</span></span><br><span class="line">        <span class="keyword">boolean</span> ifAllBusy = employees.stream()</span><br><span class="line">                .allMatch((employee -&gt; employee.getStatus().equals(Status.BUSY)));</span><br><span class="line">        System.out.println(ifAllBusy);</span><br><span class="line">        <span class="comment">// 是否有人忙</span></span><br><span class="line">        <span class="keyword">boolean</span> ifAnyBusy = employees.stream().anyMatch((employee -&gt; employee.getStatus().equals(Status.BUSY)));</span><br><span class="line">        System.out.println(ifAnyBusy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否没人忙</span></span><br><span class="line">        <span class="keyword">boolean</span> noneBusy = employees.stream().noneMatch(employee -&gt; employee.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(noneBusy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个  工资排序</span></span><br><span class="line">        <span class="comment">// Optional 容器类，内部不为空，若为空有替代</span></span><br><span class="line">        Optional&lt;Employee&gt; first = employees.stream().sorted(((t1, t2) -&gt; Double.compare(t1.getSalary(), t2.getSalary())))</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(first.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随便找个空闲的人</span></span><br><span class="line">        Optional&lt;Employee&gt; any = employees.stream().filter(employee -&gt; employee.getStatus().equals(Status.FREE))</span><br><span class="line">                .findAny();</span><br><span class="line">        System.out.println(any.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//count</span></span><br><span class="line">        <span class="keyword">long</span> count = employees.stream().count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//max</span></span><br><span class="line">        Optional&lt;Employee&gt; max = employees.stream().max((t1, t2) -&gt; Double.compare(t1.getSalary(), t2.getSalary()));</span><br><span class="line">        System.out.println(max.get());</span><br><span class="line">        <span class="comment">//min</span></span><br><span class="line">        Optional&lt;Double&gt; min = employees.stream().map(Employee::getSalary)</span><br><span class="line"><span class="comment">//                .min((t1, t2) -&gt; Double.compare(t1, t2));</span></span><br><span class="line">                .min(Double::compare);</span><br><span class="line">        System.out.println(min.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规约  map  reduce</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// reduce  先结合0作为x</span></span><br><span class="line">        Integer sum = list.stream()</span><br><span class="line">                .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有员工工资总和</span></span><br><span class="line">        Optional&lt;Double&gt; salarySum = employees.stream()</span><br><span class="line">                .map(Employee::getSalary)</span><br><span class="line"><span class="comment">//                .reduce((x, y) -&gt; x + y);</span></span><br><span class="line">                .reduce(Double::sum);</span><br><span class="line">        System.out.println(salarySum.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收集 collect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 提取所有员工名字 放入集合</span></span><br><span class="line">        List&lt;String&gt; nameList = employees.stream().map(Employee::getName)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        nameList.forEach(System.out::println);</span><br><span class="line"><span class="comment">//        System.out.println(nameList);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//放入自定义Collection集合</span></span><br><span class="line">        HashSet&lt;Integer&gt; collect = employees.stream()</span><br><span class="line">                .map(Employee::getAge)</span><br><span class="line">                .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * collectors</span></span><br><span class="line"><span class="comment">     * 平均值</span></span><br><span class="line"><span class="comment">     * 和</span></span><br><span class="line"><span class="comment">     * 最大最小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//收集方法的 计算总数  个数！方法</span></span><br><span class="line">        Long collect = employees.stream()</span><br><span class="line">                .collect(Collectors.counting());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 工资平均值</span></span><br><span class="line"><span class="comment">//        Double collect1 = employees.stream()</span></span><br><span class="line"><span class="comment">//                .map(Employee::getSalary)</span></span><br><span class="line"><span class="comment">//                .collect(Collectors.averagingDouble((x) -&gt; Double.valueOf(x)));</span></span><br><span class="line">        Double collect1 = employees.stream().collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 工资总和</span></span><br><span class="line">        Double collect2 = employees.stream().collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line">        System.out.println(collect2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最大值</span></span><br><span class="line">        Optional&lt;Employee&gt; collect3 = employees.stream().collect(Collectors.maxBy((t1, t2) -&gt; Double.compare(t1.getAge(), t2.getAge())));</span><br><span class="line">        System.out.println(collect3.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 按状态分组</span></span><br><span class="line">        Map&lt;Status, List&lt;Employee&gt;&gt; collect = employees.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">        <span class="comment">// 多列分组 ，按状态分完按年龄，20以下一组，20-40一组 40以上一组</span></span><br><span class="line">        Map&lt;Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; collect1 = employees.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((employee)-&gt;&#123;</span><br><span class="line">                    <span class="keyword">if</span> (employee.getAge()&lt;=<span class="number">20</span>) <span class="keyword">return</span> <span class="string">&quot;青年&quot;</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (employee.getAge()&lt;=<span class="number">40</span>&amp;&amp;employee.getAge()&gt;<span class="number">20</span>) <span class="keyword">return</span> <span class="string">&quot;中年&quot;</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line">                &#125;)));</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分区</span></span><br><span class="line"><span class="comment">     * 分区 满足条件的一个区，不满足的一个区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 满足工资大于800的一个区</span></span><br><span class="line">        Map&lt;Boolean, List&lt;Employee&gt;&gt; collect = employees.stream()</span><br><span class="line">                .collect(Collectors.partitioningBy((employee -&gt; employee.getSalary() &gt; <span class="number">800</span>)));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  collectors除了以上方法，还有很多其他方法获得平均值，最大最小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DoubleSummaryStatistics collect = employees.stream()</span><br><span class="line">                .collect(Collectors.summarizingDouble(Employee::getAge));</span><br><span class="line">        System.out.println(collect.getAverage());</span><br><span class="line">        System.out.println(collect.getMax());</span><br><span class="line">        System.out.println(collect.getMin());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * join</span></span><br><span class="line"><span class="comment">     * 连接字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String collect = employees.stream()</span><br><span class="line">                .map(Employee::getName)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;=&quot;</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="java8的optional"><a href="#java8的optional" class="headerlink" title="java8的optional"></a>java8的optional</h4><p>optional用于快速定位或者防止空指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.Java8.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Java8.Employee;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/14 17:14</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * optional  用于避免空指针</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * optional 容器类的常用方法</span></span><br><span class="line"><span class="comment"> * Optional.of(T t) 创建一个optional实例</span></span><br><span class="line"><span class="comment"> * Optional.empty() 创建一个空的实例</span></span><br><span class="line"><span class="comment"> * Optional.ofNullable(T t) 如果t不为空null，创建option实例，否则创建空实例</span></span><br><span class="line"><span class="comment"> * isPresent 判断是否包含值</span></span><br><span class="line"><span class="comment"> * orElse(T t) 如果对象包含实例，返回该值，否则返回t</span></span><br><span class="line"><span class="comment"> * orElseGet(supplier s) 如果对象包含值，返回，否则返回s获取的值</span></span><br><span class="line"><span class="comment"> * map(Function f) 如果有值对其处理，并返回处理后的 Optional 否则返回Optional.empty()</span></span><br><span class="line"><span class="comment"> * flatMap(Function mapper) 类似mapper 要求返回值为Optional</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOptional</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果of里面传入的null 立刻发送异常，用于快速定位问题</span></span><br><span class="line">        Optional&lt;Employee&gt; op = Optional.of(<span class="keyword">new</span> Employee());</span><br><span class="line"></span><br><span class="line">        Employee employee1 = op.get();</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果一定要optional内为null</span></span><br><span class="line">        Optional&lt;Employee&gt; empty = Optional.empty();</span><br><span class="line">        <span class="comment">// null get不到值</span></span><br><span class="line">        System.out.println(empty.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建空optional的另一个方法</span></span><br><span class="line">        Optional&lt;Employee&gt; empty2 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(empty2.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否存在值</span></span><br><span class="line">        <span class="keyword">if</span>(empty2.isPresent()) System.out.println(empty.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没值代替一个</span></span><br><span class="line">        Employee employee2 = op.orElse(<span class="keyword">new</span> Employee());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flatMap 要求返回用optiona容器包装</span></span><br><span class="line">        Optional&lt;String&gt; s = op.flatMap(x -&gt; Optional.of(x.getName()));</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="java8-接口新特性"><a href="#java8-接口新特性" class="headerlink" title="java8 接口新特性"></a>java8 接口新特性</h4><p>新增了接口的静态方法和default修饰方法。</p>
<p>现在可以接口中实现默认方法，若一个类同时继承了某个同名方法类，且implements了这个接口，那么子类调用时，类优先。</p>
<p>若两个接口都定义了getName()那么子类实现这两个接口的话会报错要求实现类必须实现方法，如果extends了一个类又实现了同名方法的接口，extends的类优先。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Java8.TheInterface;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/14 18:16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * java8 支持接口中实现默认方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMyFun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;接口的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Java的新的时间类"><a href="#Java的新的时间类" class="headerlink" title="Java的新的时间类"></a>Java的新的时间类</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins启动失败log</title>
    <url>/2019/04/22/jenkins%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5log/</url>
    <content><![CDATA[<h3 id="Failed-to-start-LSB-Jenkins-Automation-Server"><a href="#Failed-to-start-LSB-Jenkins-Automation-Server" class="headerlink" title="Failed to start LSB: Jenkins Automation Server."></a>Failed to start LSB: Jenkins Automation Server.</h3><p>这个错误可能是由于服务器配置了自己的jdk，导致jenkins找不到jdk启动，jdnkins没有使用系统的JDK_HOME</p>
<p>解决：vim /etc/init.d/jenkins</p>
<p>在candinate里面找到java相关的描述，把自己的java路径添加进去</p>
]]></content>
      <categories>
        <category>Log</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置</title>
    <url>/2019/03/22/jenkins%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h3><span id="more"></span>

<ol>
<li>jenkins地址：/usr/share/jenkins/jenkins.war</li>
<li>请在docker安装时  装最新的 ！！！！！</li>
<li>docker pull jenkins/jenkins:版本号</li>
<li>jenkins启动后需要进行配置：<ol>
<li>配置JAVA_HOME，这需要你docker的jenkins镜像存在JAVA_HOME，在jenkins中可以设置目录</li>
<li>配置MAVEN_HOME，同上，使用apt命令下载后指定目录</li>
</ol>
</li>
</ol>
<h3 id="jenkins配置部署测试-（后端）"><a href="#jenkins配置部署测试-（后端）" class="headerlink" title="jenkins配置部署测试 （后端）"></a>jenkins配置部署测试 （后端）</h3><ol>
<li><p>jenkins可以自动从代码库拉取分支的代码进行构建，并且进行junit测试，测试后还可以自动部署到服务器或者运行脚本</p>
</li>
<li><p>创建maven项目，因为大部分项目都是maven，且可以执行maven命令：maven clean package这样的打包命令。</p>
<p>示例：</p>
<p><img src="/images/jenkins_%E5%B7%A5%E7%A8%8B1.png" alt="jenkins_工程1"></p>
</li>
</ol>
<p><img src="/images/jenkins_%E5%B7%A5%E7%A8%8B2.png" alt="jenkins_工程2"></p>
<p><img src="/images/jenkins_%E5%B7%A5%E7%A8%8B3.png" alt="jenkins_工程3"></p>
<p><img src="/images/jenkins_%E5%B7%A5%E7%A8%8B4.png" alt="jenkins_工程4"></p>
<p><img src="/images/jenkins_%E5%B7%A5%E7%A8%8B5.png" alt="jenkins_工程5"></p>
<p><img src="/images/jenkins_%E5%B7%A5%E7%A8%8B6.png" alt="jenkins_工程6"></p>
<h3 id="jenkins-配置部署项目（前端）"><a href="#jenkins-配置部署项目（前端）" class="headerlink" title="jenkins 配置部署项目（前端）"></a>jenkins 配置部署项目（前端）</h3><ol>
<li><p>我的前端项目是nvm环境下的，所以在jenkins中下载nvm插件</p>
<ol>
<li>项目配置示例<img src="/images/jenkins_%E5%89%8D%E7%AB%AF2.png" alt="jenkins_前端2"></li>
</ol>
<p><img src="/images/jenkins_%E5%89%8D%E7%AB%AF1.png" alt="jenkins_前端1"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
  </entry>
  <entry>
    <title>jupyter_notebook</title>
    <url>/2019/06/12/jupyter-notebook/</url>
    <content><![CDATA[<h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter_notebook"></a>jupyter_notebook</h3><p>说明：将代码文档集中的工具</p>
<span id="more"></span>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li>首先安装anaconda，因为它自带</li>
<li>在终端下输入：conda install jupyter notebook</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li>如果使用环境，在环境中使用notebook。可以在外部环境下看到多出的带环境名的notebook，可以点击启动</li>
</ol>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<ol start="2">
<li><p>可以在终端启动（推荐），终端启动那么notebook的目录就是当前目录：jupyter notebook</p>
</li>
<li><p>打开浏览器后可以在浏览器中新建env然后编写代码</p>
</li>
</ol>
<h5 id="jupyter-notebook结合环境env"><a href="#jupyter-notebook结合环境env" class="headerlink" title="jupyter_notebook结合环境env"></a>jupyter_notebook结合环境env</h5><p>目的：能够自动切换环境，不同环境不同目录</p>
<ol>
<li>安装环境结合库:conda install nb_conda</li>
</ol>
<h5 id="代码自动补全"><a href="#代码自动补全" class="headerlink" title="代码自动补全"></a>代码自动补全</h5><ol>
<li>包：conda install pyreadline</li>
<li>在notebook中写时直接按下tab可以提示代码</li>
</ol>
]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
      <tags>
        <tag>DataAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>layui自适应</title>
    <url>/2020/05/13/layui%E8%87%AA%E9%80%82%E5%BA%94/</url>
    <content><![CDATA[<h3 id="layui自适应"><a href="#layui自适应" class="headerlink" title="layui自适应"></a>layui自适应</h3><p>layui页面的自适应问题</p>
<span id="more"></span>

<h4 id="自适应页面布局"><a href="#自适应页面布局" class="headerlink" title="自适应页面布局"></a>自适应页面布局</h4><p>官方提供了<code>layui-body</code>但是使用后会自动向右便宜，这是官方为了适配本身的侧边栏页面，需要手动将left改为0px。</p>
<p><code>layui-card</code>会让页面底部变为白色，区别于body的灰色。</p>
<h5 id="宽度自适应-设定全局布局layui-fluid-内部使用layui-row，layui-row内部使用-lt-div-class-quot-layui-col-md8-quot-gt-8表示12个中占8位长度。"><a href="#宽度自适应-设定全局布局layui-fluid-内部使用layui-row，layui-row内部使用-lt-div-class-quot-layui-col-md8-quot-gt-8表示12个中占8位长度。" class="headerlink" title="宽度自适应:设定全局布局layui-fluid,内部使用layui-row，layui-row内部使用&lt;div class=&quot;layui-col-md8&quot;&gt; 8表示12个中占8位长度。"></a>宽度自适应:设定全局布局<code>layui-fluid</code>,内部使用<code>layui-row</code>，<code>layui-row</code>内部使用<code>&lt;div class=&quot;layui-col-md8&quot;&gt;</code> 8表示12个中占8位长度。</h5><p>页面布局如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图模导入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../assets/libs/layui/css/layui.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../assets/module/admin.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../assets/css/theme.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;layui-body&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 0px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin:10px;margin-top:0px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-left:10px;padding-top:5px;padding-bottom: 0px;padding-right: 10px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-fluid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding:0px;margin: 0px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md8&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 2px;&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;search-text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;图像名称&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px;&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">lay-submit</span> <span class="attr">lay-filter</span>=<span class="string">&quot;search-graph&quot;</span>&gt;</span>查询</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;</span>重置</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: -14px;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;pic-mod-table&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;pic-mod-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span><span class="attr">style</span>=<span class="string">&quot;margin-top: 11px;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;his-pic-mod-table&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;his-pic-mod-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md4&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--                &lt;label class=&quot;layui-form-label&quot;&gt;添加附件：&lt;/label&gt;--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filePath&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filePath&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline shangc_txt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px;padding-left: 10px;width: 100%&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload-svg-btn&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon&quot;</span>&gt;</span><span class="symbol">&amp;#xe67c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>选择文件</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload-list&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #D9D9D9;width: 98%&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding:0px;margin: 0px;overflow-y: auto;margin-top: 2px;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件大小<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;upload-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-disabled&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/libs/layui/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/libs/jquery/jquery-3.2.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/js/applicationUtil.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/graph.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="高度自适应"><a href="#高度自适应" class="headerlink" title="高度自适应"></a>高度自适应</h5><h6 id="数据表格"><a href="#数据表格" class="headerlink" title="数据表格"></a>数据表格</h6><p>如下代码，可以直接在方法渲染中，官方做法：数据表格参数：<code>height:&#39;full-20&#39;</code>，20表示上下预留的像素，这个方法只能适用于页面单行数据表格的情况，如果两行同样数据表格，下面的表格会被顶出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">      <span class="attr">elem</span>: <span class="string">&#x27;#pic-mod-table&#x27;</span></span><br><span class="line">      , <span class="attr">id</span>: <span class="string">&#x27;pic-mod-table&#x27;</span></span><br><span class="line">      , <span class="attr">url</span>: applicationUtil.gatewayURL + <span class="string">&#x27;/pssc-graph/graph/graph-name&#x27;</span> <span class="comment">//数据接口</span></span><br><span class="line">      , <span class="attr">response</span>: &#123;</span><br><span class="line">          <span class="attr">statusCode</span>: <span class="number">200</span> <span class="comment">//规定成功的状态码，默认：0</span></span><br><span class="line">          , <span class="attr">countName</span>: <span class="string">&#x27;totalCount&#x27;</span> <span class="comment">//规定数据总数的字段名称，默认：count</span></span><br><span class="line">          , <span class="attr">dataName</span>: <span class="string">&#x27;list&#x27;</span> <span class="comment">//规定数据列表的字段名称，默认：data</span></span><br><span class="line">      &#125;</span><br><span class="line">      , <span class="attr">limit</span>: <span class="number">20</span></span><br><span class="line">      , <span class="attr">parseData</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">//res 即为原始返回的数据</span></span><br><span class="line">          <span class="comment">// console.log(res.data.list);</span></span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">              <span class="string">&quot;code&quot;</span>: res.code, <span class="comment">//解析接口状态</span></span><br><span class="line">              <span class="string">&quot;msg&quot;</span>: res.msg, <span class="comment">//解析提示文本</span></span><br><span class="line">              <span class="string">&quot;totalCount&quot;</span>: res.data.totalCount, <span class="comment">//解析数据长度</span></span><br><span class="line">              <span class="comment">// &quot;count&quot;: 19, //解析数据长度</span></span><br><span class="line">              <span class="string">&quot;list&quot;</span>: res.data.list <span class="comment">//解析数据列表</span></span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      , <span class="attr">height</span>: <span class="string">&#x27;full-20&#x27;</span></span><br><span class="line">      , <span class="attr">totalRow</span>: <span class="literal">false</span></span><br><span class="line">      , <span class="attr">page</span>: <span class="literal">true</span> <span class="comment">//开启分页</span></span><br><span class="line">      , <span class="attr">cols</span>: [[ <span class="comment">//表头</span></span><br><span class="line">          &#123;<span class="attr">field</span>: <span class="string">&#x27;objId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">fixed</span>: <span class="string">&#x27;left&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">          , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphId&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模标识&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;28%&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">          , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphName&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模名称&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;28%&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">          , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphType&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模类型&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;11%&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">          , &#123;<span class="attr">field</span>: <span class="string">&#x27;createTime&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;创建时间&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;17%&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">          , &#123;<span class="attr">field</span>: <span class="string">&#x27;graphVersion&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;图模版本&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;14%&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">      ]]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="js监听resize事件"><a href="#js监听resize事件" class="headerlink" title="js监听resize事件"></a>js监听resize事件</h6><p>手动获取页面高度，并根据比例判断页面占比和高度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> form = layui.form;</span><br><span class="line"><span class="keyword">var</span> allHeight = $(<span class="string">&#x27;.layui-body&#x27;</span>).height() - <span class="number">15</span>;</span><br><span class="line"><span class="keyword">var</span> offsetPercent = (allHeight - <span class="number">70</span>) / allHeight</span><br><span class="line">allHeight *= offsetPercent;</span><br><span class="line"><span class="keyword">var</span> halfHeight = allHeight / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> lay_off_size = halfHeight</span><br><span class="line">$(<span class="string">&#x27;.layui-upload-list&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, allHeight * <span class="number">0.994</span> - $(<span class="string">&quot;#upload&quot;</span>).height());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自适应问题</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    allHeight = $(<span class="string">&#x27;.layui-body&#x27;</span>).height() - <span class="number">15</span>;</span><br><span class="line">    offsetPercent = (allHeight - <span class="number">70</span>) / allHeight</span><br><span class="line">    allHeight *= offsetPercent;</span><br><span class="line">    halfHeight = allHeight / <span class="number">2</span>;</span><br><span class="line">    $(<span class="string">&#x27;.layui-upload-list&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, allHeight * <span class="number">0.994</span> - $(<span class="string">&quot;#upload&quot;</span>).height());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resize all table</span></span><br><span class="line">    table.reload(<span class="string">&#x27;pic-mod-table&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">height</span>: halfHeight</span><br><span class="line">    &#125;);</span><br><span class="line">    table.reload(<span class="string">&#x27;task-pic-mod-table&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">height</span>: halfHeight</span><br><span class="line">    &#125;);</span><br><span class="line">    table.reload(<span class="string">&#x27;his-pic-mod-table&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">height</span>: halfHeight</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LayUi</category>
      </categories>
      <tags>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-YouCompleteMe配置</title>
    <url>/2019/06/25/linux-YouCompleteMe%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="折腾笔记"><a href="#折腾笔记" class="headerlink" title="折腾笔记"></a>折腾笔记</h3><p>这是一款linux在vim下的插件，自动补全代码</p>
<h4 id="配置vim的插件管理器vundle"><a href="#配置vim的插件管理器vundle" class="headerlink" title="配置vim的插件管理器vundle"></a>配置vim的插件管理器vundle</h4><p>执行一下命令导入vundle包</p>
<pre><code>git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre>
<p>配置~/.vimrc （最好别改/etc/vimrc) 配置后重新打开，以下配置里写了两个插件：auto-format和nerdTree,这两个差价可以稍后写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot; vundle</span><br><span class="line">set nocompatible              &quot; required</span><br><span class="line">filetype off                  &quot; required</span><br><span class="line"></span><br><span class="line">&quot; set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class="line">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class="line"></span><br><span class="line">&quot; let Vundle manage Vundle, required</span><br><span class="line">Plugin &#x27;gmarik/Vundle.vim&#x27;</span><br><span class="line"></span><br><span class="line">&quot; Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)</span><br><span class="line">Plugin &#x27;Chiel92/vim-autoformat&#x27;</span><br><span class="line">nnoremap &lt;F6&gt; :Autoformat&lt;CR&gt;</span><br><span class="line">let g:autoformat_autoindent = 0 </span><br><span class="line">let g:autoformat_retab = 0 </span><br><span class="line">let g:autoformat_remove_trailing_spaces = 0 </span><br><span class="line">                           </span><br><span class="line">Plugin &#x27;https://github.com/scrooloose/nerdtree&#x27;</span><br><span class="line">nnoremap &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; All of your Plugins must be added before the following line</span><br><span class="line">call vundle#end()            &quot; required</span><br><span class="line">filetype plugin indent on    &quot; required</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置插件后重新打开vim，输入:PluginInstall开始安装那两个插件</p>
<h4 id="配置安装YCM"><a href="#配置安装YCM" class="headerlink" title="配置安装YCM"></a>配置安装YCM</h4><ol>
<li><p>Ensure that your version of Vim is at least 7.4.1578 and that it has support for Python 2 or Python 3 scripting.确保安装的vim版本在7.4以上（vim –version)确保vim支持python2/3</p>
</li>
<li><p>下载YCM本体，有两种安装方式：</p>
<p> a. 使用vundle安装（推荐）：在vimrc插件配置里写入： Plugin ‘Valloric/YouCompleteMe’，执行：PluginInstall。</p>
<p> b. 或者在~/.vim/bundle/下使用</p>
<p> git clone <a href="https://github.com/ycm-core/YouCompleteMe.git">https://github.com/ycm-core/YouCompleteMe.git</a>,</p>
<p> 在下载后需要执行git submodule update –init –recursive </p>
</li>
<li><p>安装YCM：（下载C语言家族支持的情况下）</p>
<ol>
<li>载好cmake和python head文件类似：python-dev,python3-dev,但是archlinux好像也么得</li>
</ol>
<p> 然后为了支持c语言，我们需要编译ycm_core，首先执行以下命令</p>
<pre><code>   cd ~
   mkdir ycm_build
   cd ycm_build
</code></pre>
</li>
<li><p>然后下载最新的libclang或者clangd（编译的支持文件），由于archlinux下好像么得libclang，我从llvm.org <a href="http://http//releases.llvm.org/download.html">llvm.org</a>.下载了clangd的编译版本，<a href="http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-aarch64-linux-gnu.tar.xz">archlinux编译过版本</a><br>下载后将文件放入~/ycm_temp/llvm_root_dir（不存在请创建）</p>
</li>
<li><p>执行编译配置：（系统是linux，Generator选UnixMakefiles，需要cmake和make提前装好）</p>
<pre><code>  cmake -G &quot;Unix Makefiles&quot; -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
  
</code></pre>
<p> 编译结束，当前目录生成配置文件</p>
</li>
<li><p>执行编译本体</p>
<pre><code>    cmake --build . --target ycm_core --config Release
</code></pre>
<p>官方文档中说–config Release是为了windows特有的，可以不加</p>
<p>注意：在cmake编译好配置文件后不能更改当前文件所在的目录，否则编译本体会找不到目录</p>
</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下自动转移mysql数据库脚本</title>
    <url>/2019/03/29/linux%E4%B8%8B%E8%87%AA%E5%8A%A8%E8%BD%AC%E7%A7%BBmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>使用此脚本将远程服务器的数据库导入，且显示sql文件在 back_dir=”/root/databases_save</p>
<span id="more"></span>

<ol>
<li>这是本地mysql的情况</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">实现将远程数据库sql导入到本地数据库且将sql文件存放本地目录用于以后传输</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">target mysql info</span></span><br><span class="line">mysql_host_remote=&quot;39.108.159.175&quot;</span><br><span class="line">mysql_user_remote=&quot;root&quot;</span><br><span class="line">mysql_password_remote=&quot;0800&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">local</span> mysql info</span></span><br><span class="line">mysql_host_local=&quot;localhost&quot;</span><br><span class="line">mysql_user_local=&quot;root&quot;</span><br><span class="line">mysql_password_local=&quot;0800&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">sql back directory</span></span><br><span class="line">root_dir=&quot;/root&quot;</span><br><span class="line">back_dir=&quot;/root/databases_save&quot;</span><br><span class="line">data_dir=&quot;databases&quot;</span><br><span class="line">store_dir=&quot;databases&quot;</span><br><span class="line">if [ ! -d $back_dir ]; then</span><br><span class="line">	mkdir -p $back_dir</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">备份的数据库数组</span></span><br><span class="line">db_arr=$(echo &quot;show databases;&quot; | mysql -u$mysql_user_remote -p$mysql_password_remote -h$mysql_host_remote)</span><br><span class="line"><span class="meta">#</span><span class="bash">不需要备份的单例数据库</span></span><br><span class="line">nodeldb=&quot;information_schema&quot;</span><br><span class="line">nodeldb2=&quot;performance_schema&quot;</span><br><span class="line">nodeldb3=&quot;Database&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">当前日期</span></span><br><span class="line"><span class="meta">#</span><span class="bash">date = $(date <span class="string">&#x27;+%Y%m%d&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line">date=$(date -d &#x27;+0 days&#x27; +%Y%m%d)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">zip 打包</span></span><br><span class="line"><span class="meta">#</span><span class="bash">zipname=<span class="string">&quot;sql_save_&quot;</span><span class="variable">$date</span><span class="string">&quot;.zip&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> 到备份目录</span></span><br><span class="line">cd $back_dir</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">循环备份并且导入到本地数据库</span></span><br><span class="line">for dbname in $&#123;db_arr&#125;</span><br><span class="line">do</span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="keyword">if</span> [[ <span class="variable">$dbname</span> != <span class="variable">$nodeldb</span> ]] &amp;&amp; [[ <span class="variable">$dbname</span> != <span class="variable">$nodeldb2</span> ]] &amp;&amp; [[ <span class="variable">$dbname</span> != <span class="variable">$nodeldb3</span> ]]; <span class="keyword">then</span></span></span><br><span class="line">	if [ $dbname == &quot;test&quot; ]; then</span><br><span class="line">		sqlfile=$dbname-$date&quot;.sql&quot;</span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">## -B 命令可以直接创建带建库语句的sql文件，但是导入必须得生命数据库 是否有不带数据库名的导入方法？</span></span></span><br><span class="line">		mysqldump  --add-drop-database -u$mysql_user_remote -p$mysql_password_remote -h$mysql_host_remote -B $dbname &gt; $sqlfile</span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">## 导入之前先在本地建库</span></span></span><br><span class="line"><span class="meta">		#</span><span class="bash">$(<span class="built_in">echo</span> <span class="string">&quot;create database &quot;</span><span class="variable">$dbname</span> | mysql -u<span class="variable">$mysql_user_local</span> -p<span class="variable">$mysql_password_local</span> -h<span class="variable">$mysql_host_local</span>)</span></span><br><span class="line"><span class="meta">		#</span><span class="bash">mysqldump -u<span class="variable">$mysql_user_local</span> -p<span class="variable">$mysql_password_local</span> -h<span class="variable">$mysql_host_local</span> <span class="variable">$dbname</span> &lt; <span class="variable">$sqlfile</span></span></span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">## 很奇怪 只有source有效 使用mysqldump回复表不会被恢复</span></span></span><br><span class="line"><span class="meta">		$</span><span class="bash">(<span class="built_in">echo</span> <span class="string">&quot;source &quot;</span><span class="variable">$back_dir</span><span class="string">&quot;/&quot;</span><span class="variable">$sqlfile</span> | mysql -u<span class="variable">$mysql_user_local</span> -p<span class="variable">$mysql_password_local</span> -h<span class="variable">$mysql_host_local</span>)</span></span><br><span class="line">	fi</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .tar打包所有sql可用于以后传输</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tar -zcPpf <span class="variable">$back_dir</span>/<span class="variable">$zipname</span> --directory / <span class="variable">$back_dir</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">打包后删除sql文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">if</span> [ $? = 0 ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	rm *.sql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">fi</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">mysqldum 到本地数据库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果使用docker部署本地mysql </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">实现将远程数据库sql导入到本地数据库且将sql文件存放本地目录用于以后传输</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">target mysql info</span></span><br><span class="line">mysql_host_remote=&quot;192.168.0.100&quot;</span><br><span class="line">mysql_user_remote=&quot;root&quot;</span><br><span class="line">mysql_password_remote=&quot;123&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">local</span> mysql info</span></span><br><span class="line">mysql_host_local=&quot;localhost&quot;</span><br><span class="line">mysql_user_local=&quot;root&quot;</span><br><span class="line">mysql_password_local=&quot;123&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">sql back directory</span></span><br><span class="line">back_dir=&quot;/root/mysql/data/databases_save&quot;</span><br><span class="line">source_dir=&quot;/var/lib/mysql/databases_save&quot;</span><br><span class="line">if [ ! -d $back_dir ]; then</span><br><span class="line">	mkdir -p $back_dir</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##太坑了 公司的mysql是docker里的容器，使用所有命令前添加：  docker exec -i mysql-server</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 但是会使用source会出错，因为mysql内部容器没有权限打开外部sql文件</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">备份的数据库数组</span></span><br><span class="line">db_arr=$(echo &quot;show databases;&quot; | mysql -u$mysql_user_remote -p$mysql_password_remote -h$mysql_host_remote)</span><br><span class="line"><span class="meta">#</span><span class="bash">不需要备份的单例数据库</span></span><br><span class="line">nodeldb=&quot;information_schema&quot;</span><br><span class="line">nodeldb2=&quot;performance_schema&quot;</span><br><span class="line">nodeldb3=&quot;mysql&quot;</span><br><span class="line">nodeldb4=&quot;sys&quot;</span><br><span class="line">nodeldb5=&quot;Database&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">当前日期</span></span><br><span class="line"><span class="meta">#</span><span class="bash">date = $(date <span class="string">&#x27;+%Y%m%d&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line">date=$(date -d &#x27;+0 days&#x27; +%Y%m%d)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">zip 打包</span></span><br><span class="line"><span class="meta">#</span><span class="bash">zipname=<span class="string">&quot;sql_save_&quot;</span><span class="variable">$date</span><span class="string">&quot;.zip&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> 到备份目录</span></span><br><span class="line">cd $back_dir</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">循环备份并且导入到本地数据库</span></span><br><span class="line">for dbname in $&#123;db_arr&#125;</span><br><span class="line">do</span><br><span class="line">	if [[ $dbname != $nodeldb ]] &amp;&amp; [[ $dbname != $nodeldb2 ]] &amp;&amp; [[ $dbname != $nodeldb3 ]] &amp;&amp; [[ $dbname != $nodeldb4 ]] &amp;&amp; [[ $dbname != $nodeldb5 ]]; then</span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="keyword">if</span> [ <span class="variable">$dbname</span> == <span class="string">&quot;test&quot;</span> ]; <span class="keyword">then</span></span></span><br><span class="line">		sqlfile=$dbname-$date&quot;.sql&quot;</span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">## -B 命令可以直接创建带建库语句的sql文件，但是导入必须得声明数据库 是否有不带数据库名的导入方法？</span></span></span><br><span class="line">		mysqldump --add-drop-database -u$mysql_user_remote -p$mysql_password_remote -h$mysql_host_remote -B $dbname &gt; $sqlfile</span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">## 导入之前先在本地建库</span></span></span><br><span class="line"><span class="meta">		#</span><span class="bash">$(<span class="built_in">echo</span> <span class="string">&quot;create database &quot;</span><span class="variable">$dbname</span> | mysql -u<span class="variable">$mysql_user_local</span> -p<span class="variable">$mysql_password_local</span> -h<span class="variable">$mysql_host_local</span>)</span></span><br><span class="line"><span class="meta">		#</span><span class="bash">mysqldump -u<span class="variable">$mysql_user_local</span> -p<span class="variable">$mysql_password_local</span> -h<span class="variable">$mysql_host_local</span> <span class="variable">$dbname</span> &lt; <span class="variable">$sqlfile</span></span></span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">## 很奇怪 只有source有效 使用mysqldump回复表不会被恢复</span></span></span><br><span class="line"><span class="meta">		$</span><span class="bash">(<span class="built_in">echo</span> <span class="string">&quot;source &quot;</span><span class="variable">$source_dir</span><span class="string">&quot;/&quot;</span><span class="variable">$sqlfile</span> | docker <span class="built_in">exec</span> -i mysql-server mysql -u<span class="variable">$mysql_user_local</span> -p<span class="variable">$mysql_password_local</span> -h<span class="variable">$mysql_host_local</span>)</span></span><br><span class="line">	fi</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .tar打包所有sql可用于以后传输</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tar -zcPpf <span class="variable">$back_dir</span>/<span class="variable">$zipname</span> --directory / <span class="variable">$back_dir</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">打包后删除sql文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">if</span> [ $? = 0 ]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	rm *.sql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">fi</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">mysqldum 到本地数据库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+oss+json+request</title>
    <url>/2019/05/12/log1/</url>
    <content><![CDATA[<h4 id="python-调用oss实例"><a href="#python-调用oss实例" class="headerlink" title="python 调用oss实例"></a>python 调用oss实例</h4><p>code:</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># parse json and use api to upload all question</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> url_utils  </span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"></span><br><span class="line">QUESTION_BANK_ID=<span class="number">88</span></span><br><span class="line">QUESTION_ADD_URL=<span class="string">&#x27;http://47.99.50.105:8882/api/v1/questions/add&#x27;</span></span><br><span class="line">X_USERID=<span class="string">&#x27;72&#x27;</span></span><br><span class="line">X_ORGANIZATION_ID = <span class="string">&#x27;21&#x27;</span></span><br><span class="line"></span><br><span class="line">rootURL = <span class="string">&#x27;http://miscrofile.oss-cn-hangzhou.aliyuncs.com/&#x27;</span></span><br><span class="line">targetFold = <span class="string">&#x27;root/question/yuanketang/&#x27;</span></span><br><span class="line"></span><br><span class="line">access_key_id = <span class="string">&#x27;LTAILQg6DvGdPrFN&#x27;</span></span><br><span class="line">access_key_secret = <span class="string">&#x27;pN6ScRagLy6k2dehw8BheFmNR7WDtZ&#x27;</span></span><br><span class="line">bucket_name = <span class="string">&#x27;miscrofile&#x27;</span></span><br><span class="line">oss_url = <span class="string">&#x27;http://oss-cn-hangzhou.aliyuncs.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadFileViaSDK</span>(<span class="params">imgName,targetFold</span>):</span></span><br><span class="line">    <span class="comment">#(signature,dir,host,accessId,policy)=getToken(url,imgName)</span></span><br><span class="line">    bucket = oss2.Bucket(oss2.Auth(access_key_id,access_key_secret), oss_url, bucket_name)</span><br><span class="line">    <span class="comment"># do upload file</span></span><br><span class="line">    key = targetFold+imgName</span><br><span class="line">    bucket.put_object_from_file(key,imgName)</span><br><span class="line">    result = bucket.get_object(key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAndUploadPic</span>(<span class="params">localUrl</span>):</span></span><br><span class="line">    img = re.match(<span class="string">r&#x27;.*/(.*png)&#x27;</span>,localUrl).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#get pic from this url</span></span><br><span class="line">    urlretrieve(localUrl, <span class="string">&#x27;./&#x27;</span>+img)         </span><br><span class="line">    <span class="comment">#upload this picture and return url</span></span><br><span class="line">    uploadFileViaSDK(img,targetFold)</span><br><span class="line">    <span class="keyword">return</span> rootURL+targetFold+img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doReplace</span>(<span class="params">line</span>):</span></span><br><span class="line">    <span class="comment">#picm = re.match(r&#x27;.*?(http.*png)&#x27;,line)</span></span><br><span class="line">    <span class="comment">#if picm:</span></span><br><span class="line">    <span class="comment">#    localUrl = picm.group(1)</span></span><br><span class="line">    <span class="comment">#    remoteUrl = getAndUploadPic(localUrl)</span></span><br><span class="line">    <span class="comment">#    line = re.sub(r&#x27;http.*png&#x27;,remoteUrl,line)</span></span><br><span class="line">    <span class="comment">#return line</span></span><br><span class="line">    pics = re.findall(<span class="string">r&#x27;http.*?png&#x27;</span>,line)</span><br><span class="line">    <span class="keyword">for</span> localUrl <span class="keyword">in</span> pics:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;do replace pic&#x27;</span></span><br><span class="line">        line = re.sub(localUrl,getAndUploadPic(localUrl),line)</span><br><span class="line">    <span class="built_in">print</span> line</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace picures&#x27; local url with oss-url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replacePicUrl</span>(<span class="params">question</span>):</span></span><br><span class="line">    questionJson = json.dumps(question)</span><br><span class="line">    question = question.loads </span><br><span class="line">    <span class="comment">#question[&#x27;analysis&#x27;] = doReplace(str(question[&#x27;analysis&#x27;]))</span></span><br><span class="line">    <span class="comment">#question[&#x27;answer&#x27;] = doReplace(str(question[&#x27;answer&#x27;]))</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># pre-operation of every question</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commonChange</span>(<span class="params">question,categoryId</span>):</span></span><br><span class="line">    <span class="comment">#replacePicUrl(question)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;updateTime&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;version&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;disabled&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;author&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;reviewed&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;createTime&#x27;</span>]</span><br><span class="line">    question[<span class="string">&#x27;questionBankId&#x27;</span>] = QUESTION_BANK_ID</span><br><span class="line">    question[<span class="string">&#x27;knowledgePointIds&#x27;</span>]=[question[<span class="string">&#x27;knowledgePoints&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;id&#x27;</span>]]</span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;knowledgePoints&#x27;</span>]</span><br><span class="line">    <span class="comment"># del tags&#x27;s id</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(question[<span class="string">&#x27;tags&#x27;</span>])):</span><br><span class="line">        <span class="keyword">del</span> question[<span class="string">&#x27;tags&#x27;</span>][i][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="comment"># convert difficulty</span></span><br><span class="line">    <span class="keyword">if</span> question[<span class="string">&#x27;difficulty&#x27;</span>] == <span class="string">&#x27;SIMPLE&#x27;</span> :</span><br><span class="line">        question[<span class="string">&#x27;difficulty&#x27;</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;difficulty&#x27;</span>] == <span class="string">&#x27;NORMAL&#x27;</span> :</span><br><span class="line">        question[<span class="string">&#x27;difficulty&#x27;</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;difficulty&#x27;</span>] == <span class="string">&#x27;HARD&#x27;</span> :</span><br><span class="line">        question[<span class="string">&#x27;difficulty&#x27;</span>]=<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;error , unknown difficulty type&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add categoryId</span></span><br><span class="line">    question[<span class="string">&#x27;categoryId&#x27;</span>] = categoryId</span><br><span class="line"></span><br><span class="line">    <span class="comment"># convert questionType</span></span><br><span class="line">    <span class="keyword">if</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="string">&#x27;TRUE_OR_FALSE&#x27;</span>:</span><br><span class="line">        question[<span class="string">&#x27;questionType&#x27;</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="string">&#x27;SINGLE_CHOICE&#x27;</span>:</span><br><span class="line">        question[<span class="string">&#x27;questionType&#x27;</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="string">&#x27;MULTIPLE_CHOICE&#x27;</span>:</span><br><span class="line">        question[<span class="string">&#x27;questionType&#x27;</span>]=<span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="string">&#x27;FILL_IN_BLANK&#x27;</span>:</span><br><span class="line">        question[<span class="string">&#x27;questionType&#x27;</span>]=<span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="string">&#x27;SUBJECTIVE&#x27;</span>:</span><br><span class="line">        question[<span class="string">&#x27;questionType&#x27;</span>]=<span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;error , unknown question type&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format all types of questions </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatQuestion</span>(<span class="params">question,categoryId</span>):</span></span><br><span class="line">    commonChange(question,categoryId)</span><br><span class="line"></span><br><span class="line">    question = json.loads(doReplace(json.dumps(question)))</span><br><span class="line">    <span class="comment"># 题型  0：判断题checked，1：单选题checked，2：多选题checked，3：填空题checked，4：简答题，5：代码题</span></span><br><span class="line">    <span class="keyword">if</span> question[<span class="string">&#x27;questionType&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        formatJudgeQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">1</span>:</span><br><span class="line">        formatSingleChoiceQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">2</span>:</span><br><span class="line">        formatMuitlChoiceQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">3</span>:</span><br><span class="line">        formatFillQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">4</span>:</span><br><span class="line">        formatAnswerQuestion(question)</span><br><span class="line">    <span class="keyword">elif</span> question[<span class="string">&#x27;questionType&#x27;</span>]==<span class="number">5</span>:</span><br><span class="line">        formatCodeQuestion(question)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;error can\&#x27;t parse&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatSingleChoiceQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 单选题&#x27;</span></span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;answer&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(question[<span class="string">&#x27;options&#x27;</span>])):</span><br><span class="line">        <span class="keyword">del</span> question[<span class="string">&#x27;options&#x27;</span>][i][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    url_utils.pushData(json.dumps(question),QUESTION_ADD_URL,X_USERID,X_ORGANIZATION_ID)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatJudgeQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 判断题&#x27;</span></span><br><span class="line">    <span class="comment"># get answer</span></span><br><span class="line">    question[<span class="string">&#x27;answer&#x27;</span>] = question[<span class="string">&#x27;answer&#x27;</span>][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    url_utils.pushData(json.dumps(question),QUESTION_ADD_URL,X_USERID,X_ORGANIZATION_ID)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatMuitlChoiceQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 多选题&#x27;</span></span><br><span class="line">    <span class="keyword">del</span> question[<span class="string">&#x27;answer&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(question[<span class="string">&#x27;options&#x27;</span>])):</span><br><span class="line">        <span class="keyword">del</span> question[<span class="string">&#x27;options&#x27;</span>][i][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    url_utils.pushData(json.dumps(question),QUESTION_ADD_URL,X_USERID,X_ORGANIZATION_ID)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatFillQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 填空题&#x27;</span></span><br><span class="line">    <span class="comment"># format question blank</span></span><br><span class="line">    parseStr = question[<span class="string">&#x27;stem&#x27;</span>]</span><br><span class="line">    blankID=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    blanks=[]</span><br><span class="line">    <span class="keyword">while</span> re.match(<span class="string">r&#x27;.*(__.&#123;1&#125;__).*&#x27;</span>,parseStr):</span><br><span class="line">        blankID=re.match(<span class="string">r&#x27;.*(__.&#123;1&#125;__).*&#x27;</span>,parseStr).group(<span class="number">1</span>)         </span><br><span class="line">        parseStr = re.sub(blankID,<span class="string">&#x27;&#x27;</span>,parseStr)</span><br><span class="line">        blanks.append(&#123;</span><br><span class="line">            <span class="string">&quot;blankAnswer&quot;</span>:[question[<span class="string">&#x27;blankItems&#x27;</span>][blankID][<span class="string">&#x27;answer&#x27;</span>][<span class="string">&#x27;value&#x27;</span>]],</span><br><span class="line">            <span class="string">&quot;blankId&quot;</span>:blankID    </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    question[<span class="string">&#x27;blanks&#x27;</span>] = json.dumps(blanks)</span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    url_utils.pushData(json.dumps(question),QUESTION_ADD_URL,X_USERID,X_ORGANIZATION_ID)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatAnswerQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 简答题&#x27;</span></span><br><span class="line">    <span class="comment"># get answer</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question[<span class="string">&#x27;answer&#x27;</span>]=question[<span class="string">&#x27;answer&#x27;</span>][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> e</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;error  no answer,and stem is: &#x27;</span>+question[<span class="string">&#x27;stem&#x27;</span>]</span><br><span class="line">    <span class="comment">#push data </span></span><br><span class="line">    url_utils.pushData(json.dumps(question),QUESTION_ADD_URL,X_USERID,X_ORGANIZATION_ID)</span><br><span class="line">    <span class="comment">#exit(&#x27;test formatSingleChoiceQuestion&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatCodeQuestion</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;format 代码题&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># parse every question in the list</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseQuestions</span>(<span class="params">questionArray,categoryId</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(questionArray)):</span><br><span class="line">        load_json = json.loads(questionArray[i])</span><br><span class="line">        formatQuestion(load_json[<span class="string">&#x27;res&#x27;</span>],categoryId)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create and parse questions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doAction</span>(<span class="params">getAllQuestionUrl,getSingleQuestionUrl,token,requirementBasicBody,categoryName</span>):</span></span><br><span class="line">    <span class="comment"># create category</span></span><br><span class="line">    categoryId = url_utils.createCategory(categoryName,<span class="string">&#x27;http://47.99.50.105:8882/api/v1/category/add&#x27;</span>,X_USERID,X_ORGANIZATION_ID)</span><br><span class="line">    <span class="comment"># get and parse &#x27;需求分析&#x27; data</span></span><br><span class="line">    questionArray = url_utils.getAndParseData(getAllQuestionUrl,getSingleQuestionUrl,token,requirementBasicBody)</span><br><span class="line">    parseQuestions(questionArray,categoryId)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># define environment</span></span><br><span class="line">    token = <span class="string">&#x27;bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJtc2ciOiJzdWNjZXNzIiwiY29kZSI6MCwidXNlcl9uYW1lIjoicm9vdCIsInNjb3BlIjpbImFsbCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1NTc3MjA1OTgsInVzZXJJZCI6MSwiYXV0aG9yaXRpZXMiOlsiUk9MRV9VU0VSIiwiUk9MRV9URUFDSEVSIl0sImp0aSI6ImEwY2MwYjkzLTZlNjUtNDBiNy05YjY3LWQ3OGI1NmQ3MGM0OCIsImNsaWVudF9pZCI6Inl1YW50dSJ9.adVGNhqKZm6rIeLnmmL3a1Jx8A5oDbf31Q5LNkI0Z-rIzsmYIJ15FNXKLmPO2_H2izr9VQ5vDirHoP9YY_jrPpZvtB57hTYP4n116yIjAtlScVQzVlHi_bwtZH7OSdbwcJ76nJzluvbD-xIk177i9tmMI3KjKrToPNHdIlLUGBMBo25RjplFig1MRrfvv-DAZnH7ymxoCGbNnnaGtKmYJIgCIk5IAAhekFaF-iKIyQT7bFMN5KYAM02YwvbWjQYs0C4l_nACZ-yG9KW24s5iepna44E_34UW4rsNzAdGods1P039CXrkVH83M14hxpI2qClmKZASmvWqAQizM1tF6Q&#x27;</span></span><br><span class="line">    getAllQuestionUrl = <span class="string">&#x27;http://192.168.0.100:18080/api/v1/questions/search/conditions&#x27;</span></span><br><span class="line">    getSingleQuestionUrl = <span class="string">&#x27;http://192.168.0.100:18080/api/v1/question/&#x27;</span></span><br><span class="line"></span><br><span class="line">    body = []</span><br><span class="line">    category = []</span><br><span class="line">    <span class="comment"># define &#x27;需求基础&#x27; finished</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[2415],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;需求基础&#x27;</span>)</span><br><span class="line">    <span class="comment"># define &#x27;oop&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[3004,3006,3007,3008,3009,3010,3011,3020,3021,3035,3523],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;OOP&#x27;</span>)</span><br><span class="line">    <span class="comment"># &#x27;职责分配&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[3379],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;职责分配&#x27;</span>)</span><br><span class="line">    <span class="comment"># &#x27;模块化&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[2749],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;模块化&#x27;</span>)</span><br><span class="line">    <span class="comment"># &#x27;设计模式&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[2457],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;设计模式&#x27;</span>)</span><br><span class="line">    <span class="comment"># &#x27;起始体系结构构建&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[2982],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;起始体系结构构建&#x27;</span>)</span><br><span class="line">    <span class="comment"># &#x27;OO分析&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[2673,2708,2715,2717,3054,3055,3056,2716],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;OO分析&#x27;</span>)</span><br><span class="line">    <span class="comment"># &#x27;用例描述&#x27;</span></span><br><span class="line">    body.append(<span class="string">&#x27;&#123;&quot;knowledgePointIds&quot;:[2673],&quot;difficulties&quot;:null,&quot;questionTypes&quot;:null,&quot;knowledgeState&quot;:null,&quot;pageSize&quot;:1000,&quot;page&quot;:0,&quot;keywords&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line">    category.append(<span class="string">&#x27;用例描述&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># do </span></span><br><span class="line">    <span class="comment">#doAction(getAllQuestionUrl,getSingleQuestionUrl,token,bodyA,&quot;需求基础&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(body)):</span><br><span class="line">        doAction(getAllQuestionUrl,getSingleQuestionUrl,token,body[i],category[i])</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro 扩展分区+添加swap分区</title>
    <url>/2019/04/25/manjaro-%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA-%E6%B7%BB%E5%8A%A0swap%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h3 id="archlinux–》manjaro-分区问题"><a href="#archlinux–》manjaro-分区问题" class="headerlink" title="archlinux–》manjaro 分区问题"></a>archlinux–》manjaro 分区问题</h3><p>由于linux系统的空间不足，去windows系统下面压缩了8个g，感觉windows下面的软件估计都不怎么用得到了，linux太方便了，如果用一个月，windows用不到就删了买个ipad写office</p>
<span id="more"></span>

<ol>
<li><p>分区问题：使用kde自带的kde分区管理器，或者使用GParted，如果没有ide，使用fdisk来创建交换分区（假设 /dev/sdb2 是创建的交换分区）</p>
</li>
<li><p>建立分区，右键建立，记住建立的设备名：sda8这样的</p>
</li>
<li><p>建立交换分区：使用 mkswap 命令来设置交换分区：
　　</p>
<pre><code>   # mkswap /dev/sdb2
</code></pre>
<p> 启用交换分区：</p>
<pre><code>  # swapon /dev/sdb2
</code></pre>
</li>
</ol>
<p>最后去检查/etc/fstab内是否写入了(这是boot时启动的信息):</p>
<p>/dev/sda8 swap swap defaults 0 0</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 中 el不被解释</title>
    <url>/2019/03/08/maven-%E4%B8%AD-el%E4%B8%8D%E8%A2%AB%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h5 id="原因：maven生成的web-xml版本太低"><a href="#原因：maven生成的web-xml版本太低" class="headerlink" title="原因：maven生成的web.xml版本太低"></a>原因：maven生成的web.xml版本太低</h5><h5 id="解决方案：-在jsp前-lt-page-isELIgnored-quot-false-quot-gt"><a href="#解决方案：-在jsp前-lt-page-isELIgnored-quot-false-quot-gt" class="headerlink" title="解决方案： 在jsp前+&lt;%@ page isELIgnored=&quot;false&quot; %&gt;"></a>解决方案： 在jsp前+<code>&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code></h5><span id="more"></span>

<p>更好的解决方案：将这部分2.3版本的换为2.4版本的即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正常的格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="如果还不解释"><a href="#如果还不解释" class="headerlink" title="如果还不解释"></a>如果还不解释</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1: maven pom配置</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2：web.xml 必须这样</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>el</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 从远程库更新问题</title>
    <url>/2019/03/14/maven-%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%BA%93%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>maven 默认的中央仓库的速度不是很理想, 所以换成了阿里云的镜像, 但使用后发现, 无法正常更新索引了, Maven 的索引功能可以让 IDEA<br>    自动提示一些信息</p>
<p>对于网上的大部分mirror配置都会导致Idea的update失败，使用下面的配置</p>
<span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
  </entry>
  <entry>
    <title>orika</title>
    <url>/2019/03/28/orika/</url>
    <content><![CDATA[<h3 id="orika-转换自定义实体类"><a href="#orika-转换自定义实体类" class="headerlink" title="orika 转换自定义实体类"></a>orika 转换自定义实体类</h3><p>orkia 类似 javaEE里的 beanutils 不过功能更加强大，用于po，vo，dto对象的转换。 下面的例子是使用jpa，@query自定义返回的实体，将这个实体转为domain里的vo对象。</p>
<p>1.首先注册，由于获得的query结果是List&lt;Object[]&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;SELECT prices_is_sale,CONCAT(ROUND(COUNT(prices_is_sale)/(SELECT COUNT(prices_is_sale) FROM DataSet)*100,2),&#x27;%&#x27;)&quot; +</span></span><br><span class="line"><span class="meta">        &quot;   FROM DataSet&quot; +</span></span><br><span class="line"><span class="meta">        &quot;   GROUP BY prices_is_sale&quot;,nativeQuery = true)</span></span><br><span class="line">List&lt;Object[]&gt; getSoldPercentage();</span><br></pre></td></tr></table></figure>

<p>​    每条Object[] 0对应第一个字段 1对应第二个字段 以此类推，所以要注册时指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapperFactory.classMap(Object[].class, SoldPercentageVO.class)</span><br><span class="line">        .field(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;percentage&quot;</span>).field(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;sale&quot;</span>)</span><br><span class="line">        .byDefault().register();</span><br></pre></td></tr></table></figure>



<ol>
<li><p>转换代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> PageVO&lt;SoldPercentageVO&gt; <span class="title">getSoldPercentage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Object[]&gt; soldPercentage = <span class="keyword">this</span>.shoesDao.getSoldPercentage();</span><br><span class="line"><span class="comment">//        SoldPercentageVO out = (SoldPercentageVO) ConveterUtil.mapOneTowOne(soldPercentage.get(0), SoldPercentageVO.class);</span></span><br><span class="line">        AssertUtil.AssertNotNull(soldPercentage, ShoeErrorEnum.EMPTY_SHOE);</span><br><span class="line">        List&lt;SoldPercentageVO&gt; list = soldPercentage.stream()</span><br><span class="line">                .map(data -&gt; (SoldPercentageVO) ConveterUtil.mapOneTowOne(data, SoldPercentageVO.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        PageVO&lt;SoldPercentageVO&gt; voList = <span class="keyword">new</span> PageVO&lt;&gt;();</span><br><span class="line">        voList.setTotal(list.size());</span><br><span class="line">        voList.setData(list);</span><br><span class="line">        <span class="keyword">return</span> voList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>orika</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2020/05/09/python/</url>
    <content><![CDATA[<h3 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h3><hr>
<p>1、python对大小写敏感</p>
<p> 定义变量始终使用小写，true或false这种特殊关键字开头大写</p>
<hr>
<p>2、引号使用</p>
<p> ①三引号可定义分开的字符串</p>
<pre><code> course = &#39;&#39;&#39;
hi john
here is your first email

thank you
&#39;&#39;&#39;

print(course)
</code></pre>
<p> ②单引号套双引号</p>
<pre><code> course = &#39;python for &quot;beginners&quot;&#39;
print(course)
</code></pre>
<p>输出python for “beginners”    </p>
<p>③双引号套单引号</p>
<pre><code>course = &quot;python&#39;s beginners&quot;
print(course)
</code></pre>
<p>输出python’s beginners</p>
<hr>
<p>3、索引</p>
<p>①负指数索引</p>
<pre><code>course = &quot;python for beginners&quot;
print(course[-1])
</code></pre>
<p>输出s</p>
<p>②</p>
<pre><code>    course = &quot;python for beginners&quot;
    print(course[0:3])
</code></pre>
<p>输出pyt (排除字符和索引3)</p>
<p>③</p>
<p>course = “python for beginners”<br>    print(course[:])<br>输出python for beginners（默认索引全部）</p>
<p>④</p>
<pre><code>name=&#39;jennifer&#39;
print(name[1:-1])
</code></pre>
<p>输出ennife</p>
<hr>
<p>4、花括号定义占位符 打了f以后，引号里的内容会被直接输出，加上花括号可以保证像first这种定义量可以输出你给的赋值</p>
<pre><code>msg=f&#39;&#123;first&#125; [&#123;last&#125;] is a coder
print(msg)
</code></pre>
<p>输出john [smith] is a coder</p>
<p>format格式化函数</p>
<pre><code>my_list = [&#39;菜鸟教程&#39;, &#39;www.runoob.com&#39;]
print(&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;.format(my_list))  # &quot;0&quot; 是必须的
</code></pre>
<p> 输出 网站名：菜鸟教程, 地址 <a href="http://www.runoob.com/">www.runoob.com</a></p>
<hr>
<p> 5、替换字符</p>
<pre><code> course=&#39;python for beginners&#39;
print(course.replace(&#39;beginners&#39;,&#39;absolute beginners&#39;))
</code></pre>
<p>输出python for absolute beginners</p>
<hr>
<p>6、find方法 返回字符或字符序列（find大小写敏感）</p>
<pre><code>course=&#39;python for beginners&#39;
print(course.find(&#39;beginners&#39;))
</code></pre>
<p>输出11</p>
<hr>
<p>7、in 产生布尔值的</p>
<pre><code>course=&#39;python for beginners&#39;
print(&#39;python&#39; in course)
</code></pre>
<p>输出true</p>
<hr>
<p>8、运算</p>
<p>①除法返回整数</p>
<pre><code>print(10 // 3)
</code></pre>
<p>输出3</p>
<p>②除法</p>
<pre><code>print（10 / 3）
</code></pre>
<p>输出3.33333</p>
<p>③除法返回余数</p>
<pre><code>print（10 % 3）
</code></pre>
<p>输出1（返回余数）</p>
<p>④立方</p>
<pre><code>print(10 **3)
</code></pre>
<p>输出1000</p>
<p>⑤增广赋值运算</p>
<pre><code>x=10
x-=3
print(x)
</code></pre>
<hr>
<p>9、一些内置函数</p>
<p>①round</p>
<pre><code>    x=2.4
    print(round(x))
</code></pre>
<p>输出2（四舍五入）</p>
<p>②abs绝对值</p>
<pre><code>print(abs(-2.9))
</code></pre>
<p>输出2.9</p>
<hr>
<p>10、引入模块</p>
<pre><code>import math
print(math.ceil(2.9))
</code></pre>
<p>输出3（ceil向上取整，floor向下取整）</p>
<hr>
<p>11、if语句</p>
<pre><code>is_hot=False
is_cold=False
if is_hot:
    print(&quot;it&#39;s a hot day&quot;)
    print(&#39;drink plenty of water&#39;)
elif is_cold:
    print(&quot;it&#39;s a cold day&quot;)
    print(&quot;wear warm clothes&quot;)
else:
    print(&quot;it&#39;s a lovely day&quot;)
print(&quot;enjoy your day&quot;)   //按shift加tab缩进
</code></pre>
<p>输出it’s a lovely day</p>
<p>enjoy your day</p>
<hr>
<p>12、逻辑运算符：and、or、not</p>
<pre><code>has_high_income=True
has_criminal_record=False

if has_high_income and not has_criminal_record:
    print(&quot;eligible for loan&quot;)
</code></pre>
<hr>
<p> 13、列表</p>
<p>① 添加</p>
<pre><code>matrix.append([10,11,12])
</code></pre>
<p>② 插入</p>
<pre><code> number.insert(0,6)  //0是插入位置，6是插入数字
</code></pre>
<p>③ 移除</p>
<pre><code> number=[5,3,7,2,9]
number.remove(5)
</code></pre>
<p>④清除所有</p>
<pre><code>number.clear()
</code></pre>
<p>⑤删除列表最后一项</p>
<pre><code>number.pop()
</code></pre>
<p>⑥ 索引位置</p>
<pre><code> number=[5,3,7,2,9]
print(number.index(7))
</code></pre>
<p> ⑦检查字符串中是否存在该字符</p>
<pre><code> number=[5,3,7,2,9]
print(50 in number)
</code></pre>
<p> 输出False</p>
<p> ⑧列表排序</p>
<pre><code> number=[5,3,7,2,9]
number.sort()   //reverse逆序
print(number)
</code></pre>
<p> ⑨复制</p>
<pre><code> number=[5,3,7,2,9]
number2=number.copy()
number.append(10)
print(number2)
</code></pre>
<p> 输出[5, 3, 7, 2, 9]</p>
<p> ⑩删除列表中重复数字</p>
<pre><code> numbers=[2,9,2,4,6,5,8,7,9]
uniques=[]
for number in numbers:
    if number not in uniques:
        uniques.append(number)
print(uniques)
</code></pre>
<hr>
<p> 14、元组  不可改变</p>
<pre><code> numbers=(2,5,8)
print(numbers[0])
</code></pre>
<hr>
<p>  15、解压缩（可适用于元组和列表）</p>
<pre><code>  x,y,z=coordinate 可以代替x=coordinate[0]
                            y=coordinate[1]
                            z=coordinate[2]
</code></pre>
<hr>
<p>16、字典</p>
<p>①</p>
<pre><code>customer=&#123;
&quot;name&quot;:&quot;tzq&quot;,
&quot;age&quot;:23,
&quot;is_verified&quot;:True
&#125;
print(customer[&quot;name&quot;])
</code></pre>
<p>   如果用get方法print(customer.get(“birthdate”))</p>
<p>  输出none</p>
<p>  print(customer.get(“birthdate”,”Jan 1 1980”))设置默认值</p>
<p>②将输入数字转变成英文输出</p>
<pre><code> phone=input(&quot;phone:&quot;)
digital_mapping=&#123;
&quot;1&quot;:&quot;One&quot;,
&quot;2&quot;:&quot;Two&quot;,
&quot;3&quot;:&quot;Three&quot;,
&quot;4&quot;:&quot;Four&quot;,
&quot;5&quot;:&quot;Five&quot;,
&quot;6&quot;:&quot;Six&quot;,
&quot;7&quot;:&quot;Seven&quot;,
&quot;8&quot;:&quot;Eight&quot;,
&quot;9&quot;:&quot;Nine&quot;,
&quot;0&quot;:&quot;Zero&quot;
&#125;
output=&quot;&quot;
for ch in phone:
    output+=digital_mapping.get(ch)+&quot; &quot;
print(output)
</code></pre>
<hr>
<p> 17、创建函数 </p>
<p> 关键字参数</p>
<pre><code> def cal_cost(total=50,shipping=10,discount=0.1):
</code></pre>
<p> 函数使用</p>
<pre><code> def emoji_converter(message):
    words=message.split(&quot; &quot;)
    emojis=&#123;
    &quot;:)&quot;:&quot;😊&quot;,
    &quot;:(&quot;:&quot;😢&quot;
    &#125;
    output=&quot;&quot;
    for word in words:
        output+=emojis.get(word,word)+&quot; &quot;
    return output

message=input(&quot;&gt;&quot;)
result=emoji_converter(message)
print(result)
</code></pre>
<p> 18、错误处理</p>
<pre><code> try:
    age=int(input(&#39;age:&#39;))
    print(age)

except ValueError:
    print(&#39;invalid value&#39;)
 
 
</code></pre>
<p> 19、类</p>
<pre><code> class Point:
def move(self):
    print(&quot;move&quot;)
def draw(self):
    print(&#39;draw&#39;)

point1=Point()
point1.draw()
</code></pre>
<hr>
<p>20、构造函数</p>
<pre><code>class Person:
def __init__(self,name):
    self.name=name
def talk(self):
    print(f&#39;hi, i am &#123;self.name&#125;&#39;)

john=Person(&quot;john smith&quot;)
john.talk()

bob=Person(&quot;bob smith&quot;)
bob.talk()
</code></pre>
<hr>
<p> 21、继承（空类里写pass）</p>
<pre><code> class Mammal:
    def walk(self):
        print(&quot;walk&quot;)

class Dog(Mammal):
    pass
class Cat(Mammal):
    pass
</code></pre>
<p>22、导入模块</p>
<pre><code>import converters
from converters import kg_to_lbs  （导入模块的函数）
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python的str和bytes问题</title>
    <url>/2019/07/18/python%E7%9A%84str%E5%92%8Cbytes%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="python字符编码问题"><a href="#python字符编码问题" class="headerlink" title="python字符编码问题"></a>python字符编码问题</h3><p>最近在复习python，又遇到了编码问题，下定决心弄懂，把自己的理解写出来。</p>
<h4 id="什么是编码"><a href="#什么是编码" class="headerlink" title="什么是编码"></a>什么是编码</h4><ol>
<li>编码是由于计算机无法识别除了0/1以外的东西而产生的。早起只有英文字母的时代，一个字节即可以表达所有字母，这个编码叫ascall，每个字母通过这个表可以将字母转为对应的二进制数，存在磁盘中。 例如字母B的ascall是66，转为二进制：<code>0100002</code>存在磁盘上。如果这时候一个不兼容ascall码表的单字节码表读取的时候认不得这个二进制，就会产生乱码。</li>
<li>后来由于发展，ascall码不够用，出现了很多码表，其中以一种规范为unicode（万国码），这个表里英文是2字节表示，中文3字节，不兼容ascall码，注意的是unicode不是物理存储实现，所以需要一种存储方式和ascall的存储方式兼容。 所以又有人推出了 utf-8规范，这个规范是对unicode的实现，具体做法是对unicode的对应字符序号（码点：code-point）使用边长字节进行存放。内存中unicode是2字节存放码点。 在python中显示验证： a变量存放了str类型的unicode的中文，在python3里头unicode的字自动会转为中文的，类型都是str。这里将str编码为utf-8，a就是这3字节（24位）的数。再使用gbk编码解码读取，gbk不兼容utf-8显然无法识别这串二进制数。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;\u8bf7&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;请&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe8\xaf\xb7&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= a.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;gbk&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xb7 in position 2: incomplete multibyte sequence</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="python的unicode和str区别"><a href="#python的unicode和str区别" class="headerlink" title="python的unicode和str区别"></a>python的unicode和str区别</h4><ol>
<li><p>str在python2.7里指向的是二进制，在python3里是unicode字符（统一了str和unicode,取消了unicode对象），2.7 print时会转为unicode显示，因为内存默认读取unicode编码。</p>
<p> python3 str为unicode字符集，传输需要编码：</p>
<p> str ==&gt; encode：bytes</p>
<p> bytes ==&gt; decode：str</p>
</li>
<li><p>python2 里unicode是文本字符串，str是字节字符串！！！能直接看到str的二进制表示，看不到unicode对象的二进制内存表示！unicode对象和str对象之间转换需要encode和decode，内存里默认的用unicode编码但是存放的是unicode的序号（code-point）的二进制，所以str的二进制解码就是unicode字符</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;唐&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">   <span class="string">&#x27;\xe5\x94\x90&#x27;</span></span><br><span class="line">   &gt;&gt;&gt; a.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="string">u&#x27;\u5510&#x27;</span></span><br><span class="line">   &gt;&gt;&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> python2将字节字符串和文本字符串视为一致了，这是一个设计错误，所以在3里取消了！</p>
<p> python会自动处理他们的关系。例如将unicode对象和str对象拼接时，python自动对str进行转换，转为unicode，但是转换的decode方式为默认的ascall，但这年头谁还纯用ascall，所以非常容易出错，很烦。</p>
<p> 例如：a为str对象，b为unicode对象，两者拼接，str对象是二进制，需要将str转为unicode，默认执行str.decode(‘ascall’)，但是实际文本是utf-8的二进制，所以出错。</p>
</li>
<li><p>（2.7）<code>str</code>是python内存的一种二进制编码（但是编码方式取决于环境：如果是在解释器中写，二进制为终端的编码类型，文件的话则是文件保存编码类型），python读取这个str对象（二进制序列）就知道是什么字符，显示到显示器。</p>
<p> <code>unicode</code>对象是一种字符集并非二进制（本质在内存中是2个字节标识的序号二进制），如果要存储<code>unicode</code>对象到磁盘，需要自己指定编码方式如<code>utf-8</code>（以三个字节表示中文），如果指定的编码方式如<code>gbk</code>会无法写入，因为<code>gbk</code>不支持<code>unicode</code>编码。</p>
<p> 但是在python中是无法直接看到<code>unicode</code>对象的二进制数。（注意的是在<code>python3</code>中<code>unicode</code>和<code>str</code>都为<code>str</code>类型）</p>
<p> （2.7）举例子： ‘唐’ 如果是str类型 且在终端的解释器环境下为gbk，那么<code>a = &#39;唐&#39;</code> <code>a</code>在内存里就是<code>gbk</code>的二进制数组。再次打印 <code>a</code> 时计算机读取内存的二进制，根据终端的码表显示，如果写的时候终端为<code>utf-8</code>,打印的时候改成<code>gbk</code>那么应该会乱码。</p>
<p> 在python中验证乱码：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;唐&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a 	<span class="comment">#python2.7里头直接打印a打印的是a指向的内存的二进制数，需要print函数</span></span><br><span class="line"><span class="string">&#x27;\xe5\x94\x90&#x27;</span> <span class="comment"># 内存里头的二进制数，因为终端是utf-8所以是三个字节24位</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">唐</span><br><span class="line"><span class="comment"># 这时候我将终端的编码改为了gbk</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">鍞�</span><br><span class="line"><span class="comment"># 乱码，因为gbk读取这个24位读不懂 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="使用py2需要注意的点（参考了StackOverflow"><a href="#使用py2需要注意的点（参考了StackOverflow" class="headerlink" title="使用py2需要注意的点（参考了StackOverflow)"></a>使用py2需要注意的点（参考了StackOverflow)</h4><ol>
<li><p>所有文本字符串都应该是unicode类型，而不是str类型。如果处理的是文本，而变量类型是str，这就是bug了！(因为在内存中默认的是unicode，磁盘中才是对于编码后的二进制)</p>
</li>
<li><p>若要将字节串解码成字符串，需要使用正确的解码，即 var.decode(encoding)（如， var.decode(‘utf-8’) ）。将文本字符串编码成字节，使用var.encode(encoding)。</p>
</li>
<li><p>永远不要对unicode字符串使用 str() （str转为了二进制，编码方式取决于环境），也不要在不指定编码的情况下就对字节串使用 unicode() 。</p>
</li>
<li><p>当应用从外部（磁盘，网络）读取数据时，应将其视为字节串，即str类型的，接着调用.decode() 将其解释成文本。同样，在将文本发送到外部时，总是对文本调用.encode() 。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python类setter注解问题</title>
    <url>/2019/07/10/python%E7%B1%BBsetter%E6%B3%A8%E8%A7%A3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>配置爬虫线程池时出现的问题：定义一个线程类，在类内方法外声明变量，按照python规则，这个是非实例所能拥有的静态变量。</p>
<p>变量为<code>dict</code>类型<code>&#123;&#125;</code>。且为这个变量设定了setter和getter。为了能够让实例也能访问类变量使用了注解<code>property</code>。类代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello+&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">input</span>))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;stop&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _pool = &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pool</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> ThreadPool._pool</span><br><span class="line"></span><br><span class="line"><span class="meta">	@pool.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pool</span>(<span class="params">self, pool</span>):</span></span><br><span class="line">        ThreadPool._pool = pool</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>以下是使用方式：第三行为什么可以直接使用dict的方法新增？就像是直接访问变量而不是通过setter和getter一样，待解决。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tp = ThreadPool()</span><br><span class="line">timer = threading.Timer(<span class="number">1</span>, thread, [<span class="number">1</span>])</span><br><span class="line">tp.pool[timer.name]=timer</span><br><span class="line"><span class="built_in">print</span>(tp.pool)</span><br><span class="line">timer.start()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python解析word文档</title>
    <url>/2019/04/15/python%E8%A7%A3%E6%9E%90word%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="今天公司新需求，解析word习题集"><a href="#今天公司新需求，解析word习题集" class="headerlink" title="今天公司新需求，解析word习题集"></a>今天公司新需求，解析word习题集</h3><p>使用python-docx这个库解析</p>
<span id="more"></span>

<h4 id="dockx的官方API描述"><a href="#dockx的官方API描述" class="headerlink" title="dockx的官方API描述"></a>dockx的官方API描述</h4><p>官方的比那些blog好多了：<a href="https://python-docx.readthedocs.io/en/latest/dev/analysis/features/shapes/shapes-inline.html">https://python-docx.readthedocs.io/en/latest/dev/analysis/features/shapes/shapes-inline.html</a></p>
<h4 id="使用ElementTree解析word的树"><a href="#使用ElementTree解析word的树" class="headerlink" title="使用ElementTree解析word的树"></a>使用ElementTree解析word的树</h4><p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePic2</span>(<span class="params">questionArray, bookNameWord</span>):</span></span><br><span class="line">    fs = docx.Document(bookNameWord)</span><br><span class="line">    <span class="comment"># parse pic</span></span><br><span class="line">    proxy = []</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> fs.paragraphs:</span><br><span class="line">        proxy.append(p._element.xml)</span><br><span class="line">    rIds = []</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> proxy:</span><br><span class="line">     <span class="comment"># 一段一个根树</span></span><br><span class="line">        root = ET.fromstring(p)</span><br><span class="line">     <span class="comment"># 获得&lt;w:r&gt;树，所有的&lt;w:pict&gt;树均是&lt;w:r&gt;树的子树</span></span><br><span class="line">        pictr_str = <span class="string">&quot;&#123;http://schemas.openxmlformats.org/wordprocessingml/2006/main&#125;r&quot;</span></span><br><span class="line">        pictrs = root.findall(pictr_str)</span><br><span class="line">        image_str = <span class="string">&quot;*/&#123;urn:schemas-microsoft-com:vml&#125;shape/&#123;urn:schemas-microsoft-com:vml&#125;imagedata&quot;</span></span><br><span class="line">        <span class="keyword">for</span> pictr <span class="keyword">in</span> pictrs:</span><br><span class="line">            <span class="comment"># 获得所有&lt;v:imagedata&gt;标签</span></span><br><span class="line">            pict = pictr.findall(image_str)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pict) &gt; <span class="number">0</span>:</span><br><span class="line">                rIds.append(pict[<span class="number">0</span>].attrib[<span class="string">&#x27;&#123;http://schemas.openxmlformats.org/officeDocument/2006/relationships&#125;id&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePic</span>(<span class="params">questionArray,bookNameWord</span>):</span></span><br><span class="line">    fs = docx.Document(bookNameWord)</span><br><span class="line">    <span class="keyword">for</span> shap <span class="keyword">in</span> fs.inline_shapes:</span><br><span class="line">        tree = shap._inline.xml</span><br><span class="line">        root = ET.fromstring(tree)</span><br><span class="line">        root.findall(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">#print (json.dumps(shap.__dict__, default=lambda o: o.__dict__))</span></span><br><span class="line">    <span class="comment">#for line in fs.paragraphs:</span></span><br><span class="line">    <span class="comment">#    print(line.text)</span></span><br><span class="line"></span><br><span class="line">questionArray = []</span><br><span class="line">parsePic(questionArray, <span class="string">&#x27;./test.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python解析习题集</title>
    <url>/2019/04/11/python%E8%A7%A3%E6%9E%90%E4%B9%A0%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h3 id="使用python解析txt题目文本"><a href="#使用python解析txt题目文本" class="headerlink" title="使用python解析txt题目文本"></a>使用python解析txt题目文本</h3><p> 公司需求，解析一本习题集，将所有的单选题和答案解析放在一个对象，转成json输出</p>
 <span id="more"></span>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> post_question <span class="keyword">import</span> uploadFileViaSDK</span><br><span class="line"><span class="keyword">from</span> extract_word_pic <span class="keyword">import</span> word2pic</span><br><span class="line"><span class="keyword">from</span> format_json <span class="keyword">import</span> formatJson</span><br><span class="line"></span><br><span class="line"><span class="comment">#reload(sys)</span></span><br><span class="line"><span class="comment">#sys.setdefaultencoding(&#x27;utf8&#x27;)</span></span><br><span class="line"><span class="comment">#TODO 优化图片，优化tag寻图算法（不同word版本导致的tag变动问题）</span></span><br><span class="line"></span><br><span class="line">SINGLE_CHOICE = <span class="string">&#x27;single_choice_question&#x27;</span></span><br><span class="line">FILL_IN = <span class="string">&#x27;fill_in_question&#x27;</span></span><br><span class="line">ANSWER_QUESTION = <span class="string">&#x27;answer_question&#x27;</span></span><br><span class="line">OBJECTIVE_QUESTION = <span class="string">&#x27;objective_question&#x27;</span></span><br><span class="line"></span><br><span class="line">QUESTION_BANK_ID=<span class="number">153</span></span><br><span class="line">QUESTION_ADD_URL=<span class="string">&#x27;http://192.168.0.100:8882/api/v1/questions/add&#x27;</span></span><br><span class="line">X_USERID=<span class="string">&#x27;72&#x27;</span></span><br><span class="line">X_ORGANIZATION_ID = <span class="string">&#x27;21&#x27;</span></span><br><span class="line"></span><br><span class="line">UPLOAD_OSS = <span class="literal">False</span></span><br><span class="line">PUSH_DATA = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRidByRel</span>(<span class="params">rid</span>):</span></span><br><span class="line">   root = ET.ElementTree(file=<span class="string">&#x27;./word_pic_save/document.xml.rels&#x27;</span>)</span><br><span class="line">   <span class="keyword">for</span> ele <span class="keyword">in</span> root.<span class="built_in">iter</span>():</span><br><span class="line">      <span class="keyword">if</span> ele.tag == <span class="string">&quot;&#123;http://schemas.openxmlformats.org/package/2006/relationships&#125;Relationship&quot;</span>:</span><br><span class="line">         <span class="keyword">if</span> ele.get(<span class="string">&#x27;Id&#x27;</span>) == rid:</span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">&#x27;media/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,ele.get(<span class="string">&#x27;Target&#x27;</span>))</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Null&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseLinePic</span>(<span class="params">line</span>):</span></span><br><span class="line">   root = ET.fromstring(line.paragraph_format.element.xml)</span><br><span class="line">   outStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   <span class="keyword">for</span> ele <span class="keyword">in</span> root.<span class="built_in">iter</span>():</span><br><span class="line">      <span class="comment"># print(ele.tag)</span></span><br><span class="line">      <span class="comment"># continue</span></span><br><span class="line">      <span class="keyword">if</span>(ele.tag==<span class="string">&quot;&#123;http://schemas.openxmlformats.org/wordprocessingml/2006/main&#125;t&quot;</span>):</span><br><span class="line">         outStr += ele.text</span><br><span class="line">      <span class="keyword">if</span>(ele.tag == <span class="string">&quot;&#123;urn:schemas-microsoft-com:vml&#125;imagedata&quot;</span>):</span><br><span class="line">         rid = ele.get(<span class="string">&#x27;&#123;http://schemas.openxmlformats.org/officeDocument/2006/relationships&#125;id&#x27;</span>)</span><br><span class="line">         <span class="keyword">if</span> UPLOAD_OSS:</span><br><span class="line">             outStr += uploadOSS(re.sub(<span class="string">&#x27;wmf&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,parseRidByRel(rid)))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             outStr += <span class="string">&quot;&lt;word-pic&gt;&quot;</span>+re.sub(<span class="string">&#x27;wmf&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,parseRidByRel(rid))+<span class="string">&quot;&lt;/word-pic&gt;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> outStr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pushData</span>(<span class="params">json_data, url</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;X-UserId&#x27;</span>: X_USERID&#125;</span><br><span class="line">    response = requests.post(url, json=json.loads(json_data), headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;insert succeed &#x27;</span>+response.text</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;failed&#x27;</span>+<span class="built_in">str</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadOSS</span>(<span class="params">imageFile</span>):</span></span><br><span class="line">        <span class="comment"># print picID+&quot; is the id&quot;</span></span><br><span class="line">        rootURL = <span class="string">&#x27;https://miscrofile.oss-cn-hangzhou.aliyuncs.com/&#x27;</span></span><br><span class="line">        targetFold = <span class="string">&#x27;root/question/computer_science/&#x27;</span></span><br><span class="line">        targetFile = imageFile </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            uploadFileViaSDK(<span class="string">&#x27;./word_pic_save/&#x27;</span>+targetFile, targetFold)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="built_in">str</span>(picID)+<span class="string">&#x27; pic upload failed&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;img src=\&#x27;&#x27;</span> + rootURL+targetFold+targetFile+<span class="string">&#x27;\&#x27;/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># parse the line&#x27;s pic,upload this picture and return the replaced line</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadOSSOld</span>(<span class="params">picID</span>):</span></span><br><span class="line">        <span class="comment"># print picID+&quot; is the id&quot;</span></span><br><span class="line">        rootURL = <span class="string">&#x27;https://miscrofile.oss-cn-hangzhou.aliyuncs.com/&#x27;</span></span><br><span class="line">        targetFold = <span class="string">&#x27;root/question/computer_science/&#x27;</span></span><br><span class="line">        targetFile = <span class="string">&#x27;image&#x27;</span>+<span class="built_in">str</span>(picID)+<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> UPLOAD_OSS == <span class="literal">False</span>:</span><br><span class="line">            <span class="comment">#return &#x27;&lt;word-pic&gt;&#x27; +targetFile+&#x27;&lt;word-pic/&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> targetFile</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            uploadFileViaSDK(<span class="string">&#x27;./word_pic_save/&#x27;</span>+targetFile, targetFold)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="built_in">str</span>(picID)+<span class="string">&#x27; pic upload failed&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;img src=\&#x27;&#x27;</span> + rootURL+targetFold+targetFile+<span class="string">&#x27;\&#x27;/&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePic</span>(<span class="params">line, counter</span>):</span></span><br><span class="line">    <span class="comment"># indentify pic</span></span><br><span class="line">    root = ET.fromstring(line.paragraph_format.element.xml)</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> root.<span class="built_in">iter</span>():</span><br><span class="line">        <span class="keyword">if</span>(ele.tag == <span class="string">&#x27;&#123;http://schemas.openxmlformats.org/wordprocessingml/2006/main&#125;pict&#x27;</span>):</span><br><span class="line">            counter[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> uploadOSS(counter[<span class="number">0</span>])+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>:</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    options = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    stem = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    analysis = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    point = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    short_question_answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># format options</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">formatOptions</span>(<span class="params">self</span>):</span></span><br><span class="line">        checkedOptions = []</span><br><span class="line">        <span class="keyword">if</span> self.options != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> self.<span class="built_in">type</span> == SINGLE_CHOICE <span class="keyword">and</span> <span class="built_in">len</span>(self.options) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># print &quot;****options***&quot;+json.dumps(question, default=lambda o: o.__dict__,sort_keys=True, indent=4,ensure_ascii=False)</span></span><br><span class="line">            <span class="comment">#	seq =  re.match(r&#x27;^([A|B|C|D|a|b|c|d])[\.|•]?\s*(.*)&#x27;,question.option[0].strip())</span></span><br><span class="line">            <span class="comment">#	dot =  re.match(r&#x27;^([A|B|C|D|a|b|c|d])[\.|•]\s*(.*)&#x27;,question.option[0].strip())</span></span><br><span class="line">            <span class="keyword">for</span> op <span class="keyword">in</span> self.options:</span><br><span class="line">                <span class="comment"># able to judge</span></span><br><span class="line">                seq = re.match(</span><br><span class="line">                    <span class="string">r&#x27;^([A|B|C|D|a|b|c|d])[\.|•]?\s*(.*)&#x27;</span>, op.strip())</span><br><span class="line">                dot = re.match(</span><br><span class="line">                    <span class="string">r&#x27;^([A|B|C|D|a|b|c|d])[\.|•]\s*(.*)&#x27;</span>, op.strip())</span><br><span class="line">                <span class="keyword">if</span> seq:</span><br><span class="line">                    <span class="comment"># sequence shuould be the same type</span></span><br><span class="line">                    <span class="keyword">if</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;A&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;B&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;C&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                        srchType = <span class="string">&quot;UPPERCASE&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;b&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;c&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                        srchType = <span class="string">&quot;LOWERCASE&quot;</span></span><br><span class="line">                    <span class="comment"># proceed with seqType and dot</span></span><br><span class="line">                    <span class="comment"># a b c d</span></span><br><span class="line">                    <span class="keyword">if</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;A&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                        <span class="keyword">if</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)B[\.|•]\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)B[\.|•]?\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)b[\.|•]\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)b[\.|•]?\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="comment"># B options exists</span></span><br><span class="line">                        <span class="keyword">if</span> rest1:</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;A.&#x27;</span> + rest1.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)C[\.|•]\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">elif</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)C[\.|•]?\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)c[\.|•]\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)c[\.|•]?\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># C options exists</span></span><br><span class="line">                            <span class="keyword">if</span> rest2:</span><br><span class="line">                                checkedOptions.append(</span><br><span class="line">                                    <span class="string">&#x27;B.&#x27;</span> + rest2.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                                    rest3 = re.match(</span><br><span class="line">                                        <span class="string">r&#x27;(.*)D[\.|•]\s*(.*)&#x27;</span>, rest2.group(<span class="number">2</span>))</span><br><span class="line">                                <span class="keyword">elif</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                                    rest3 = re.match(</span><br><span class="line">                                        <span class="string">r&#x27;(.*)D[\.|•]?\s*(.*)&#x27;</span>, rest2.group(<span class="number">2</span>))</span><br><span class="line">                                <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                                    rest3 = re.match(</span><br><span class="line">                                        <span class="string">r&#x27;(.*)d[\.|•]\s*(.*)&#x27;</span>, rest2.group(<span class="number">2</span>))</span><br><span class="line">                                <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                                    rest3 = re.match(</span><br><span class="line">                                        <span class="string">r&#x27;(.*)d[\.|•]?\s*(.*)&#x27;</span>, rest2.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">                                <span class="comment"># rest3 = re.match(r&#x27;(.*)[D|d][\.|•]?\s*(.*)&#x27;,rest2.group(2))</span></span><br><span class="line">                                <span class="comment"># D options exists</span></span><br><span class="line">                                <span class="keyword">if</span> rest3:</span><br><span class="line">                                    checkedOptions.append(</span><br><span class="line">                                        <span class="string">&#x27;C.&#x27;</span> + rest3.group(<span class="number">1</span>))</span><br><span class="line">                                    checkedOptions.append(</span><br><span class="line">                                        <span class="string">&#x27;D.&#x27;</span> + rest3.group(<span class="number">2</span>))</span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    checkedOptions.append(</span><br><span class="line">                                        <span class="string">&#x27;C.&#x27;</span> + rest2.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                checkedOptions.append(</span><br><span class="line">                                    <span class="string">&#x27;B.&#x27;</span> + rest1.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;A.&#x27;</span> + seq.group(<span class="number">2</span>))</span><br><span class="line">                    <span class="comment"># b c d</span></span><br><span class="line">                    <span class="keyword">elif</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;B&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                        <span class="keyword">if</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)C[\.|•]\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)C[\.|•]?\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)c[\.|•]\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)c[\.|•]?\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="comment"># rest1 = re.match(r&#x27;(.*)[C|c][\.|•]?\s*(.*)&#x27;,seq.group(2))</span></span><br><span class="line">                        <span class="comment"># C options exists</span></span><br><span class="line">                        <span class="keyword">if</span> rest1:</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;B.&#x27;</span> + rest1.group(<span class="number">1</span>))</span><br><span class="line">                            <span class="keyword">if</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)D[\.|•]\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">elif</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)D[\.|•]?\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)d[\.|•]\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                                rest2 = re.match(</span><br><span class="line">                                    <span class="string">r&#x27;(.*)d[\.|•]?\s*(.*)&#x27;</span>, rest1.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="comment">#	rest2 = re.match(r&#x27;(.*)[D|d][\.|•]?\s*(.*)&#x27;,rest1.group(2))</span></span><br><span class="line">                            <span class="comment"># D options exists</span></span><br><span class="line">                            <span class="keyword">if</span> rest2:</span><br><span class="line">                                checkedOptions.append(</span><br><span class="line">                                    <span class="string">&#x27;C.&#x27;</span> + rest2.group(<span class="number">1</span>))</span><br><span class="line">                                checkedOptions.append(</span><br><span class="line">                                    <span class="string">&#x27;D.&#x27;</span> + rest2.group(<span class="number">2</span>))</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                checkedOptions.append(</span><br><span class="line">                                    <span class="string">&#x27;C.&#x27;</span> + rest1.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;B.&#x27;</span> + seq.group(<span class="number">2</span>))</span><br><span class="line">                    <span class="comment"># c d</span></span><br><span class="line">                    <span class="keyword">elif</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;C&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                        <span class="keyword">if</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)D[\.|•]\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;UPPERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)D[\.|•]?\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)d[\.|•]\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">elif</span> srchType == <span class="string">&#x27;LOWERCASE&#x27;</span> <span class="keyword">and</span> dot == <span class="literal">None</span>:</span><br><span class="line">                            rest1 = re.match(</span><br><span class="line">                                <span class="string">r&#x27;(.*)d[\.|•]?\s*(.*)&#x27;</span>, seq.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="comment"># rest1 = re.match(r&#x27;(.*)[D|d][\.|•]?\s*(.*)&#x27;,seq.group(2))</span></span><br><span class="line">                        <span class="comment"># D options exists</span></span><br><span class="line">                        <span class="keyword">if</span> rest1:</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;C.&#x27;</span> + rest1.group(<span class="number">1</span>))</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;D.&#x27;</span> + rest1.group(<span class="number">2</span>))</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            checkedOptions.append(<span class="string">&#x27;C.&#x27;</span> + seq.group(<span class="number">2</span>))</span><br><span class="line">                    <span class="comment"># d</span></span><br><span class="line">                    <span class="keyword">elif</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;D&#x27;</span> <span class="keyword">or</span> seq.group(<span class="number">1</span>) == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                        checkedOptions.append(<span class="string">&#x27;D.&#x27;</span> + seq.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">            self.options = checkedOptions</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(checkedOptions) != <span class="number">4</span>:</span><br><span class="line">                self.<span class="built_in">id</span> = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">formatQuestion</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> formatJson(json.dumps(self, default=<span class="keyword">lambda</span> o: o.__dict__, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>),QUESTION_BANK_ID,SINGLE_CHOICE,FILL_IN,ANSWER_QUESTION,OBJECTIVE_QUESTION)</span><br><span class="line">        <span class="comment">#print json.dumps(self, default=lambda o: o.__dict__, sort_keys=True, indent=4, ensure_ascii=False)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chapter</span>:</span></span><br><span class="line">    chapterText = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    questionArray = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, chapterText</span>):</span></span><br><span class="line">        self.chapterText = chapterText</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseQuestion</span>(<span class="params">self, singleChoiceText, questionType</span>):</span></span><br><span class="line">        questionArray = []</span><br><span class="line">        flag = <span class="string">&#x27;unstart&#x27;</span></span><br><span class="line">        tempString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        options = []</span><br><span class="line">        results = singleChoiceText.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> results:</span><br><span class="line">            <span class="comment"># remove chinese &quot;quanjiao&quot;</span></span><br><span class="line">            line = line.replace(<span class="string">&#x27;\xa1\xa1&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment"># match empth line</span></span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;^\s*$&#x27;</span>, line):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># match item such as text begining with 1.or 12 .etc</span></span><br><span class="line">            m = re.search(<span class="string">r&#x27;^[0-9]+[\.|•]\s*(.*)$&#x27;</span>, line.strip())</span><br><span class="line">            <span class="comment"># Match if it is an option</span></span><br><span class="line">            m_op = re.search(<span class="string">r&#x27;^[A|B|C|D|a|b|c|d]\s*(.*)$&#x27;</span>, line.strip())</span><br><span class="line">            <span class="keyword">if</span> m != <span class="literal">None</span> <span class="keyword">or</span> m_op == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> m:</span><br><span class="line">                    <span class="comment">#if flag == &#x27;option&#x27; or flag == &#x27;stem&#x27;:</span></span><br><span class="line">                    <span class="keyword">if</span> flag == <span class="string">&#x27;option&#x27;</span> <span class="keyword">or</span> (questionType != SINGLE_CHOICE <span class="keyword">and</span> flag==<span class="string">&#x27;stem&#x27;</span>):</span><br><span class="line">                        <span class="keyword">if</span> flag == <span class="string">&#x27;stem&#x27;</span>:</span><br><span class="line">                            question.stem = re.sub(</span><br><span class="line">                                <span class="string">&#x27;^[0-9]*\.?&#x27;</span>, <span class="string">&#x27;&#x27;</span>, tempString)</span><br><span class="line">                        <span class="comment"># save the last option</span></span><br><span class="line">                        question.options = options</span><br><span class="line">                        questionArray.append(question)</span><br><span class="line">                        options = []</span><br><span class="line">                        tempString = <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="comment"># get question id</span></span><br><span class="line">                    qid = re.search(</span><br><span class="line">                        <span class="string">r&#x27;\s*([0-9]*)[\.|•]\s*(.*)$&#x27;</span>, line).group(<span class="number">1</span>)</span><br><span class="line">                    question = Question()</span><br><span class="line">                    question.<span class="built_in">id</span> = qid</span><br><span class="line">                    question.<span class="built_in">type</span> = questionType</span><br><span class="line">                    <span class="comment"># reset to 1 starting filling topic</span></span><br><span class="line">                    flag = <span class="string">&#x27;stem&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> m_op == <span class="literal">None</span> <span class="keyword">and</span> flag == <span class="string">&#x27;stem&#x27;</span>:</span><br><span class="line">                    tempString += line</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># fill question topic</span></span><br><span class="line">                <span class="keyword">if</span> flag == <span class="string">&#x27;stem&#x27;</span>:</span><br><span class="line">                    question.stem = re.sub(<span class="string">&#x27;^[0-9]*\.?&#x27;</span>, <span class="string">&#x27;&#x27;</span>, tempString)</span><br><span class="line">                    tempString = <span class="string">&quot;&quot;</span></span><br><span class="line">                    flag = <span class="string">&#x27;option&#x27;</span></span><br><span class="line">                res = re.split(</span><br><span class="line">                    <span class="string">r&#x27;\s*[A|B|C|D|a|b|c|d]\s*\.&#123;3&#125;\s*\s*&#x27;</span>, line.strip())</span><br><span class="line"></span><br><span class="line">                <span class="comment"># match options</span></span><br><span class="line">                <span class="keyword">for</span> elem <span class="keyword">in</span> res:</span><br><span class="line">                    <span class="keyword">if</span> elem:</span><br><span class="line">                        options.append(elem)</span><br><span class="line">        <span class="comment"># end finish appending</span></span><br><span class="line">        question.options = options</span><br><span class="line">        questionArray.append(question)</span><br><span class="line">        <span class="keyword">if</span> question.stem == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            question.stem = re.sub(<span class="string">&#x27;^[0-9]*\.?&#x27;</span>, <span class="string">&#x27;&#x27;</span>, tempString)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> questionArray</span><br><span class="line"></span><br><span class="line">    <span class="comment"># used to merge data to topic</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendAnswer2Topic</span>(<span class="params">self, questionArray, <span class="built_in">id</span>, answer, point, analysis, short_question_answer</span>):</span></span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> (question <span class="keyword">for</span> question <span class="keyword">in</span> questionArray <span class="keyword">if</span> question.<span class="built_in">id</span> == <span class="built_in">id</span>):</span><br><span class="line">            elem.short_question_answer = short_question_answer</span><br><span class="line">            elem.answer = answer</span><br><span class="line">            elem.point = point</span><br><span class="line">            elem.analysis = analysis</span><br><span class="line"></span><br><span class="line">    <span class="comment"># append answer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendAnswer</span>(<span class="params">self, answerText</span>):</span></span><br><span class="line">        <span class="comment">#print answerText</span></span><br><span class="line">         <span class="comment"># status to identify the operation status,-1 no, 1 answer, 2 point, 3 analysis , 4 nomal</span></span><br><span class="line">        status = -<span class="number">1</span></span><br><span class="line">        result = answerText.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        answer_question_answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">            <span class="comment"># remove chinese &quot;quanjiao&quot;</span></span><br><span class="line">            line = line.replace(<span class="string">&#x27;\xa1\xa1&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># match empth line</span></span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;^\s*$&#x27;</span>, line):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># match answer id line</span></span><br><span class="line">            aidm = re.match(<span class="string">r&#x27;\s*([0-9]*)[\.|•]&#x27;</span>, line)</span><br><span class="line">            <span class="comment"># print &#x27;** aidm is:&#x27;+str(aidm)</span></span><br><span class="line">            <span class="comment"># match answer</span></span><br><span class="line">            answerm = re.match(<span class="string">r&#x27;\s*[0-9]*\s*\.?\s*【答案】(.*)&#x27;</span>, line)</span><br><span class="line">            <span class="comment"># match point</span></span><br><span class="line">            pointm = re.match(<span class="string">r&#x27;\s*【考点】(.*)&#x27;</span>, line)</span><br><span class="line">            <span class="comment"># match analysis</span></span><br><span class="line">            analysism = re.match(<span class="string">r&#x27;\s*【解析】(.*)&#x27;</span>, line)</span><br><span class="line">            <span class="comment"># match answer of answer-question</span></span><br><span class="line">            answer_question_answerm = re.match(<span class="string">r&#x27;\s*【参考答案】(.*)&#x27;</span>, line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># judge status</span></span><br><span class="line">            <span class="keyword">if</span> aidm:</span><br><span class="line">                <span class="comment"># encounter init part, handle result if it exists</span></span><br><span class="line">                <span class="keyword">if</span> status != -<span class="number">1</span>:</span><br><span class="line">                    <span class="comment"># append operation</span></span><br><span class="line">                    self.appendAnswer2Topic(self.questionArray,</span><br><span class="line">                                            aid, answer, point, analysis, answer_question_answer)</span><br><span class="line"></span><br><span class="line">                aid = aidm.group(<span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> answer_question_answerm:</span><br><span class="line">                answer_question_answer = <span class="string">&#x27;[answer_question_answer]&#x27;</span> + answer_question_answerm.group(<span class="number">1</span>)</span><br><span class="line">                status = <span class="number">4</span>    </span><br><span class="line">            <span class="keyword">elif</span> answerm:</span><br><span class="line">                answer = <span class="string">&#x27;[answer]&#x27;</span> + answerm.group(<span class="number">1</span>)</span><br><span class="line">                status = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> pointm:</span><br><span class="line">                point = <span class="string">&#x27;[point]&#x27;</span> + pointm.group(<span class="number">1</span>)</span><br><span class="line">                status = <span class="number">2</span></span><br><span class="line">            <span class="keyword">elif</span> analysism:</span><br><span class="line">                analysis = <span class="string">&#x27;[analysis]&#x27;</span> + analysism.group(<span class="number">1</span>)</span><br><span class="line">                status = <span class="number">3</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> status == <span class="number">3</span>:</span><br><span class="line">                    analysis += line</span><br><span class="line">                <span class="keyword">if</span> status == <span class="number">2</span>:</span><br><span class="line">                    point += line</span><br><span class="line">                <span class="keyword">if</span> status == <span class="number">4</span>:</span><br><span class="line">                    answer_question_answer += line</span><br><span class="line">                <span class="keyword">if</span> status == <span class="number">1</span>:</span><br><span class="line">                    answer += line</span><br><span class="line">                <span class="comment"># if status != -1:</span></span><br><span class="line">                <span class="comment">#    status = 4</span></span><br><span class="line">        <span class="comment"># end finish appending</span></span><br><span class="line">        self.appendAnswer2Topic(self.questionArray, aid,</span><br><span class="line">                                answer, point, analysis,answer_question_answer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">devideAnswerAndQuestion</span>(<span class="params">self, chapterText</span>):</span></span><br><span class="line">        <span class="comment">#print &#x27;*****************&#x27;</span></span><br><span class="line">        <span class="comment">#print chapterText</span></span><br><span class="line">        result = re.split(<span class="string">r&#x27;\s*参考答案与解析\s*&#x27;</span>, chapterText)</span><br><span class="line">        <span class="keyword">return</span> (result[<span class="number">0</span>], result[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseDiffQuestion</span>(<span class="params">self, questionText</span>):</span></span><br><span class="line">         <span class="comment"># define question array</span></span><br><span class="line">        singleQuestionText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        fillQuestionText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        answerQuestionText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        objectiveQuestionText = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        questions = re.split(<span class="string">r&#x27;(单项选择题|填空题|简答题|综合应用题)&#x27;</span>, questionText)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(questions)):</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;单项选择题&#x27;</span>, questions[i]) <span class="keyword">and</span> re.match(<span class="string">r&#x27;.*[单项选择题,填空题,简答题,综合应用题]&#x27;</span>, questions[i+<span class="number">1</span>]) == <span class="literal">None</span>:</span><br><span class="line">                singleQuestionText = questions[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;填空题&#x27;</span>, questions[i]) <span class="keyword">and</span> re.match(<span class="string">r&#x27;.*[单项选择题,填空题,简答题,综合应用题]&#x27;</span>, questions[i+<span class="number">1</span>]) == <span class="literal">None</span>:</span><br><span class="line">                fillQuestionText = questions[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;简答题&#x27;</span>, questions[i]) <span class="keyword">and</span> re.match(<span class="string">r&#x27;.*[单项选择题,填空题,简答题,综合应用题]&#x27;</span>, questions[i+<span class="number">1</span>]) == <span class="literal">None</span>:</span><br><span class="line">                answerQuestionText = questions[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;综合应用题&#x27;</span>, questions[i]) <span class="keyword">and</span> re.match(<span class="string">r&#x27;.*[单项选择题,填空题,简答题,综合应用题]&#x27;</span>, questions[i+<span class="number">1</span>]) == <span class="literal">None</span>:</span><br><span class="line">                objectiveQuestionText = questions[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># convert stem</span></span><br><span class="line">        <span class="keyword">if</span> singleQuestionText != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            self.questionArray += self.parseQuestion(</span><br><span class="line">                singleQuestionText, SINGLE_CHOICE)</span><br><span class="line">        <span class="keyword">if</span> fillQuestionText != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            self.questionArray += self.parseQuestion(fillQuestionText, FILL_IN)</span><br><span class="line">        <span class="keyword">if</span> answerQuestionText != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            self.questionArray += self.parseQuestion(</span><br><span class="line">                answerQuestionText, ANSWER_QUESTION)</span><br><span class="line">        <span class="keyword">if</span> objectiveQuestionText != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            self.questionArray += self.parseQuestion(</span><br><span class="line">                objectiveQuestionText, OBJECTIVE_QUESTION)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseChapter</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># split question and answer</span></span><br><span class="line">        (questionText, answerText) = self.devideAnswerAndQuestion(self.chapterText)</span><br><span class="line">        <span class="comment"># split question and parse them into questionArray</span></span><br><span class="line">        self.parseDiffQuestion(questionText)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># format single_choice_question&#x27;s option</span></span><br><span class="line">        <span class="keyword">for</span> single_choice <span class="keyword">in</span> (question <span class="keyword">for</span> question <span class="keyword">in</span> self.questionArray <span class="keyword">if</span> question.<span class="built_in">type</span> == SINGLE_CHOICE):</span><br><span class="line">            single_choice.formatOptions()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># append answer</span></span><br><span class="line">        self.appendAnswer(answerText)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print json.dumps(self.questionArray, default=lambda o: o.__dict__, sort_keys=True, indent=4, ensure_ascii=False)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getQuestionArray</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.questionArray</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span></span><br><span class="line">    chapters = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showChapter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.chapters)):</span><br><span class="line">            <span class="built_in">print</span> (self.chapters[i].chapterText)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># skip category and replace every line&#x27;s picture to picture number</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseChapter</span>(<span class="params">self, wordFile</span>):</span></span><br><span class="line">        <span class="comment"># define parse status</span></span><br><span class="line">        parseStatus = <span class="string">&#x27;unstart&#x27;</span></span><br><span class="line">        <span class="comment"># define plain text as the content of chapter</span></span><br><span class="line">        chapterText = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># open the book file</span></span><br><span class="line">        fs = docx.Document(wordFile)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fs.paragraphs:</span><br><span class="line"></span><br><span class="line">            line.text = parseLinePic(line)</span><br><span class="line">            <span class="comment"># remove chinese &quot;quanjiao&quot;</span></span><br><span class="line">            line = line.text.decode().encode(<span class="string">&#x27;utf-8&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            line = line.replace(<span class="string">&#x27;\xa1\xa1&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># match empth line</span></span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;^\s*$&#x27;</span>, line):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># match chapter</span></span><br><span class="line">            chapterIdm = re.match(<span class="string">r&#x27;\s*第(.*)章\s*&#x27;</span>, line)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># chapter title</span></span><br><span class="line">            <span class="keyword">if</span> chapterIdm:</span><br><span class="line">                <span class="comment"># if the parsing progress is started record the text</span></span><br><span class="line">                <span class="keyword">if</span> parseStatus == <span class="string">&#x27;start&#x27;</span>:</span><br><span class="line">                    self.chapters.append(Chapter(chapterText))</span><br><span class="line">                    chapterText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                parseStatus = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">            <span class="comment"># normal line</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> parseStatus == <span class="string">&#x27;start&#x27;</span>:</span><br><span class="line">                    chapterText += line</span><br><span class="line"></span><br><span class="line">        <span class="comment"># finish the last chapter</span></span><br><span class="line">        self.chapters.append(Chapter(chapterText))</span><br><span class="line">        <span class="comment">#print (chapterText)</span></span><br><span class="line">        chapterText = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getChapters</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.chapters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">path</span>):</span></span><br><span class="line">    book = Book()</span><br><span class="line">    book.parseChapter(path)</span><br><span class="line">    <span class="comment"># book.showChapter()</span></span><br><span class="line">    chapters = book.getChapters()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chapters)):</span><br><span class="line">        chapters[i].parseChapter()</span><br><span class="line">        <span class="keyword">for</span> question <span class="keyword">in</span> chapters[i].getQuestionArray():</span><br><span class="line">            jsonObj  = question.formatQuestion()</span><br><span class="line">            questionJson =  json.dumps(jsonObj, default=<span class="keyword">lambda</span> o: o.__dict__, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">            <span class="built_in">print</span> questionJson</span><br><span class="line">            <span class="keyword">if</span> PUSH_DATA:</span><br><span class="line">                pushData(questionJson,QUESTION_ADD_URL)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># main(&quot;./&quot;, &quot;http://192.168.0.99:8882/api/v1/questions/add&quot;)</span></span><br><span class="line">    main(<span class="string">&#x27;./computer_science.docx&#x27;</span>)</span><br><span class="line">    <span class="comment"># main(&#x27;./cp1.docx&#x27;)</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python非常简单的线程管理</title>
    <url>/2019/07/10/python%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>多线程爬虫，带一个网页后台，调用接口传递json即可多线程爬虫。因为爬虫时间长需要提供接口取消线程。（每个搜索主题对应一个线程）</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading                                                                                                                                                   </span><br><span class="line">--<span class="keyword">import</span> sys</span><br><span class="line">  <span class="keyword">import</span> time</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">--<span class="function"><span class="keyword">def</span> <span class="title">thread</span>(<span class="params">d_input, pool, thread_id</span>):</span></span><br><span class="line">--    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">          <span class="keyword">if</span> pool.pool[thread_id] == -<span class="number">1</span>:</span><br><span class="line">              exit()</span><br><span class="line">--        <span class="built_in">print</span>(<span class="string">&#x27;thread run &#x27;</span>+<span class="built_in">str</span>(thread_id)+<span class="string">&#x27;****&#x27;</span>+<span class="built_in">str</span>(d_input))</span><br><span class="line">          time.sleep(<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">--<span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">      _pool = &#123;&#125;</span><br><span class="line">      _count = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">      @property</span></span><br><span class="line">--    <span class="function"><span class="keyword">def</span> <span class="title">pool</span>(<span class="params">self</span>):</span></span><br><span class="line">          <span class="keyword">return</span> ThreadPool._pool</span><br><span class="line">  </span><br><span class="line"><span class="meta">      @property</span></span><br><span class="line">--    <span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">self</span>):</span></span><br><span class="line">          <span class="keyword">return</span> ThreadPool._count</span><br><span class="line">  </span><br><span class="line"><span class="meta">      @count.setter</span></span><br><span class="line">--    <span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">self, count</span>):</span></span><br><span class="line">          ThreadPool._count = count</span><br><span class="line">  </span><br><span class="line"><span class="meta">      @pool.setter</span></span><br><span class="line">--    <span class="function"><span class="keyword">def</span> <span class="title">pool</span>(<span class="params">self, pool</span>):</span></span><br><span class="line">          ThreadPool._pool = pool</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">--<span class="function"><span class="keyword">def</span> <span class="title">mainThread</span>():</span></span><br><span class="line">      <span class="comment"># prepare the thread pool</span></span><br><span class="line">      pool = ThreadPool()</span><br><span class="line">      <span class="comment"># start up ten thread</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">          <span class="comment"># start up a thread and pass the thread id and pool object</span></span><br><span class="line">          timer = threading.Timer(<span class="number">1</span>, thread, [i, pool, pool.count])</span><br><span class="line">          <span class="comment"># store the pool id</span></span><br><span class="line">          pool.pool[pool.count] = <span class="number">1</span> </span><br><span class="line">          pool.count += <span class="number">1</span></span><br><span class="line">          timer.start()</span><br><span class="line">  </span><br><span class="line">      <span class="comment"># start for a while</span></span><br><span class="line">      time.sleep(<span class="number">4</span>)</span><br><span class="line">      <span class="comment"># end one thread</span></span><br><span class="line">      pool.pool[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">      pool.pool[<span class="number">1</span>] = -<span class="number">1</span></span><br><span class="line">      pool.pool[<span class="number">2</span>] = -<span class="number">1</span></span><br><span class="line">      pool.pool[<span class="number">3</span>] = -<span class="number">1</span></span><br><span class="line">      pool.pool[<span class="number">4</span>] = -<span class="number">1</span></span><br><span class="line">      pool.pool[<span class="number">5</span>] = -<span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  mainThread()        </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq</title>
    <url>/2019/04/04/rabbitmq/</url>
    <content><![CDATA[<h4 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h4><p>消息队列服务</p>
<span id="more"></span>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>很多</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol>
<li><p>rabbitmq-plugins enable rabbitmq_management 启动网页控制，记得打开端口</p>
</li>
<li><p>rabbitmqctl add_user root root123</p>
</li>
<li><p>rabbitmqctl change_password root root321</p>
</li>
<li><p> rabbitmqctl delete_user root</p>
</li>
<li><p>rabbitmqctl list_users -q</p>
</li>
<li><p>   用户的角色分为5种类型：</p>
<p>   none：无任何角色。新创建的用户的角色默认为none。<br>   management：可以访问Web管理页面。Web管理页面在5.3章节中会有详细介绍。<br>   policymaker：包含management的所有权限，并且可以管理策略（policy）和参数（parameter）。详细参考5.5章节。<br>   monitoring：包含management的所有权限，并且可以看到所有连接（connections）、信道（channels）以及节点相关的信息。<br>   administartor：包含monitoring的所有权限，并且可以管理用户、虚拟主机、权限、策略、参数等等。administator代表了最高的权限。<br>   用户的角色可以通过rabbitmqctl set_user_tags {username} {tag …}命令设置。其中username参数表示需要设置角色的用户名称；tag参数用于设置0个、1个或者多个的角色，设置之后任何之前现有的身份都会被删除。使用示例如下：<br>   [root@node1 ~]# rabbitmqctl set_user_tags root monitoring<br>   Setting tags for user “root” to [monitoring]<br>   [root@node1 ~]# rabbitmqctl list_users -q<br>   guest        [administrator]<br>   root         [monitoring]<br>   [root@node1 ~]# rabbitmqctl set_user_tags root policymaker -q<br>   [root@node1 ~]# rabbitmqctl list_users -q<br>   guest        [administrator]<br>   root         [policymaker]<br>   [root@node1 ~]# rabbitmqctl set_user_tags root<br>   Setting tags for user “root” to []<br>   [root@node1 ~]# rabbitmqctl list_users -q<br>   guest        [administrator]<br>   root         []<br>   [root@node1 ~]# rabbitmqctl set_user_tags root policymaker,management<br>   Setting tags for user “root” to [‘policymaker,management’]<br>   [root@node1 ~]# rabbitmqctl list_users -q<br>   guest        [administrator]<br>   root         [policymaker,management]</p>
</li>
<li><p>   rabbitmqctl set_permissions -p VHostPath User ConfP WriteP ReadP<br> // 具有/vhost1这个virtual host中所有资源的配置、写、读权限以便管理其中的资源 </p>
</li>
</ol>
<pre><code>rabbitmqctl set_permissions -p / yuantu &#39;.&#39; &#39;.&#39; &#39;.*&#39;
</code></pre>
<ol start="8">
<li></li>
<li></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>serverConfigure</title>
    <url>/2019/04/21/serverConfigure/</url>
    <content><![CDATA[<h3 id="配置阿里云服务器作为后台管理端"><a href="#配置阿里云服务器作为后台管理端" class="headerlink" title="配置阿里云服务器作为后台管理端"></a>配置阿里云服务器作为后台管理端</h3><ol>
<li>后端管理部署在阿里云</li>
<li>后端管理部署脚本/deploy.sh</li>
<li>后端同步只需登陆阿里云点击deploy</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>socketio实时推送</title>
    <url>/2021/03/17/socketio%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h1 id="socketio-实时推送"><a href="#socketio-实时推送" class="headerlink" title="socketio 实时推送"></a>socketio 实时推送</h1><p>不仅是简单的建立连接响应，还要每隔一段时间推送数据到客户端</p>
<span id="more"></span>

<h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.corundumstudio.socketio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-socketio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.56<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="yml-配置"><a href="#yml-配置" class="headerlink" title="yml 配置"></a>yml 配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">socketio:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9922</span>		<span class="comment">#监听端口</span></span><br><span class="line">  <span class="comment"># host: 127.0.0.1	#监听的ip</span></span><br><span class="line">  <span class="comment"># 设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器</span></span><br><span class="line">  <span class="comment"># maxFramePayloadLength: 1048576</span></span><br><span class="line">  <span class="comment"># 设置http交互最大内容长度</span></span><br><span class="line">  <span class="comment"># maxHttpContentLength: 1048576</span></span><br><span class="line">  <span class="comment"># socket连接数大小（如只监听一个端口boss线程组为1即可）</span></span><br><span class="line">  <span class="comment"># bossCount: 1</span></span><br><span class="line">  <span class="comment"># workCount: 100</span></span><br><span class="line">  <span class="comment"># allowCustomRequests: true</span></span><br><span class="line">  <span class="comment"># 协议升级超时时间（毫秒），默认10秒。HTTP握手升级为ws协议超时时间</span></span><br><span class="line">  <span class="comment"># upgradeTimeout: 1000000</span></span><br><span class="line">  <span class="comment"># Ping消息超时时间（毫秒），默认60秒，这个时间间隔内没有接收到心跳消息就会发送超时事件</span></span><br><span class="line">  <span class="comment"># pingTimeout: 6000000</span></span><br><span class="line">  <span class="comment"># Ping消息间隔（毫秒），默认25秒。客户端向服务器发送一条心跳消息间隔</span></span><br><span class="line">  <span class="comment"># pingInterval: 25000</span></span><br></pre></td></tr></table></figure>

<h2 id="socketio-配置"><a href="#socketio-配置" class="headerlink" title="socketio 配置"></a>socketio 配置</h2><p>@Configuration 和 @Bean 将spring管理的socketIOServer配置为我们自定义的server</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cc.crrc.manage.mq.RabbitmqChannelListener;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOClient;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOServer;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.ExceptionListener;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.Inet4Address;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketIOConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;socketio.port:&#x27;&#x27;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> socketIOPort;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SocketIOConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;socketIOServer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SocketIOServer <span class="title">socketIOServer</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        com.corundumstudio.socketio.Configuration configuration = <span class="keyword">new</span> com.corundumstudio.socketio.Configuration();</span><br><span class="line">        configuration.setPort(socketIOPort);</span><br><span class="line">        configuration.setExceptionListener(<span class="keyword">new</span> ExceptionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventException</span><span class="params">(Exception e, List&lt;Object&gt; list, SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;客户端:&quot;</span> + socketIOClient.getRemoteAddress() + <span class="string">&quot; EventException：&quot;</span> +e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDisconnectException</span><span class="params">(Exception e, SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;客户端:&quot;</span> + socketIOClient.getRemoteAddress() + <span class="string">&quot; DisconnectException：&quot;</span> +e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectException</span><span class="params">(Exception e, SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;客户端:&quot;</span> + socketIOClient.getRemoteAddress() + <span class="string">&quot; ConnectException：&quot;</span> +e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPingException</span><span class="params">(Exception e, SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;客户端:&quot;</span> + socketIOClient.getRemoteAddress() + <span class="string">&quot; PingException：&quot;</span> +e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext channelHandlerContext, Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        configuration.setOrigin(&quot;*&quot;);</span></span><br><span class="line"><span class="comment">//        configuration.setSocketConfig();</span></span><br><span class="line"><span class="comment">//        configuration.setWorkerThreads(1);</span></span><br><span class="line"><span class="comment">//         configuration.setAllowCustomRequests(true);</span></span><br><span class="line"><span class="comment">//        configuration.setUpgradeTimeout(10000);</span></span><br><span class="line"><span class="comment">//        configuration.setPingTimeout(60000);</span></span><br><span class="line"><span class="comment">//        configuration.setPingInterval(25000);</span></span><br><span class="line"><span class="comment">//        configuration.setMaxHttpContentLength(2071738);</span></span><br><span class="line"><span class="comment">//        configuration.setMaxFramePayloadLength(2071738);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SocketIOServer(configuration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>configuration.setExceptionListener(new ExceptionListener() &#123;...</code>可以不用写 这里只是重写了异常监听，用于记录日志到系统。</p>
<h2 id="定义线程处理接口"><a href="#定义线程处理接口" class="headerlink" title="定义线程处理接口"></a>定义线程处理接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MonitorProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(String value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现线程处理接口"><a href="#实现线程处理接口" class="headerlink" title="实现线程处理接口"></a>实现线程处理接口</h2><p>处理传递过来的message 产生返回消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPSProcessor</span> <span class="keyword">implements</span> <span class="title">MonitorProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GPSProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MtrVehicleService vehicleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="映射主题和处理类"><a href="#映射主题和处理类" class="headerlink" title="映射主题和处理类"></a>映射主题和处理类</h2><p>将所有类根据名字存入map中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SocketRoute</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LINE_MONITOR(<span class="string">&quot;lineMonitor&quot;</span>, <span class="string">&quot;/line&quot;</span>, LineMonitorProcessor.class, <span class="number">2000</span>),</span><br><span class="line">    VEHICLE_MONITOR(<span class="string">&quot;trainMonitor&quot;</span>, <span class="string">&quot;/vehicle&quot;</span>, VehicleMonitorProcessor.class, <span class="number">1000</span>),</span><br><span class="line">    VEHICLE_GPS(<span class="string">&quot;GPSMonitor&quot;</span>, <span class="string">&quot;/gps&quot;</span>, GPSProcessor.class, <span class="number">2000</span>),</span><br><span class="line">    VEHICLE_FAULT(<span class="string">&quot;faultInform&quot;</span>, <span class="string">&quot;/fault&quot;</span>, GlobalFaultInformProcessor.class, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, SocketRoute&gt; routes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (SocketRoute route : SocketRoute.values()) &#123;</span><br><span class="line">            routes.put(route.getCmd(),route);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends MonitorProcessor&gt; monitorClass;</span><br><span class="line">    <span class="keyword">private</span> String nameSpace;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> intervalTime;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line"></span><br><span class="line">    SocketRoute(String cmd, String nameSpace, Class&lt;? extends MonitorProcessor&gt; monitorClass, <span class="keyword">int</span> intervalTime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cmd = cmd;</span><br><span class="line">        <span class="keyword">this</span>.nameSpace = nameSpace;</span><br><span class="line">        <span class="keyword">this</span>.monitorClass = monitorClass;</span><br><span class="line">        <span class="keyword">this</span>.intervalTime = intervalTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends MonitorProcessor&gt; getMonitorClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> monitorClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNameSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameSpace;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getIntervalTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> intervalTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> SocketRoute <span class="title">getSocketRoute</span><span class="params">(String cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> routes.get(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="创建server"><a href="#创建server" class="headerlink" title="创建server"></a>创建server</h2><p>配置socketIOServer启动类，并且在spring容器初始化后启动，有两种方式实现自动启动 </p>
<ol>
<li><p>实现CommandLineRunner接口 实现里面的run方法</p>
</li>
<li><p>@PostConstruct标签描述方法，被描述的方法会自动在构建后执行</p>
</li>
<li><p>以下这种实现是多线程共享一个socket通道，如果数据量大还是和前端建立多个通道好。</p>
</li>
</ol>
<p>前端后端约定监听<code>talk</code>事件，且发送的json内容的两个key分别为<code>cmd</code>和<code>message</code>，定义一个SocketRoute的enum 保存不同cmd的处理事件和间隔时间。假设发送的json为<code>&#123;&quot;cmd&quot;:&quot;GPSMonitor&quot;,&quot;message&quot;:&#123;&quot;vehicle&quot;:&quot;t&quot;&#125;&#125;</code>，通过枚举类找到 GPSMonitor为key的值的类，将该类的对象作为线程的内部对象，启动新的线程，首先根据key取消之前的线程，再重写启动新的线程，内部调用传递类的process方法。</p>
<p>处理线程内部根据是否循环loop和循环间隔interval 不停调用处理对象的process方法和<code>socketIOClient.sendEvent(&quot;message&quot;, returnVal);</code>返回客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketIOStartup</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SocketIOStartup.class);</span><br><span class="line">    <span class="comment">// 保存当前运行的socket线程 一个key一个线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, SocketThread&gt; socketThreadMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketIOServer socketIOServer;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startUpServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bindListener();</span><br><span class="line">        socketIOServer.startAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        connect();</span><br><span class="line">        disconnect();</span><br><span class="line">        bindEventListener();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 可以不写，这里重写connect的监听方法用于日志记录</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        socketIOServer.addConnectListener(<span class="keyword">new</span> ConnectListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;&#123;&#125;已连接&quot;</span>, socketIOClient.getRemoteAddress().toString() + socketIOClient.getSessionId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 可以不写，这里重写disconnect的监听方法用于日志记录</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        socketIOServer.addDisconnectListener(<span class="keyword">new</span> DisconnectListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                SocketThread st = socketThreadMap.get(socketIOClient.getSessionId().toString());</span><br><span class="line">                <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    st.setLoop(<span class="keyword">false</span>);</span><br><span class="line">                    socketThreadMap.remove(socketIOClient.getSessionId().toString());</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">&quot;&#123;&#125;已关闭&quot;</span>, socketIOClient.getSessionId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 绑定监听事件：cmd 实现监听方法 前端也要发送该事件才能调用这个方法：socket.emit(&quot;cmd&quot;..</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindEventListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        socketIOServer.addEventListener(<span class="string">&quot;talk&quot;</span>, Object.class, <span class="keyword">new</span> DataListener&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onData</span><span class="params">(SocketIOClient socketIOClient, Object value, AckRequest ackRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                sendMessage(socketIOClient, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 消息处理方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(SocketIOClient socketIOClient, Object object)</span> <span class="keyword">throws</span> JsonParseException </span>&#123;</span><br><span class="line">        String cmd;</span><br><span class="line">        String value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonString = JSONObject.toJSONString(object);</span><br><span class="line">            JSONObject cmdJson = JSONObject.parseObject(jsonString);</span><br><span class="line">            cmd = cmdJson.getString(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            value = cmdJson.getString(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RestApiException(ExceptionInfoEnum.DATA_PARSE_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            throw new RestApiException(ExceptionInfoEnum.URL_PARAMETER_MISMATCH_EXCEPTION);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">		<span class="comment">//得到处理类</span></span><br><span class="line">        SocketRoute route = SocketRoute.getSocketRoute(cmd);</span><br><span class="line">        <span class="keyword">if</span> (route == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;找不到该cmd:&quot;</span> + cmd + <span class="string">&quot; 对应的处理方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MonitorProcessor processor = SpringBeanUtils.getBean(route.getMonitorClass());</span><br><span class="line">        <span class="comment">// 将该处理类作为包装成线程启动</span></span><br><span class="line">        startThread(socketIOClient, processor, value, route.getIntervalTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(SocketIOClient socketIOClient, MonitorProcessor processor, String value, <span class="keyword">long</span> interval)</span> </span>&#123;</span><br><span class="line">        SocketThread st = socketThreadMap.get(socketIOClient.getSessionId().toString());</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            st.setLoop(<span class="keyword">false</span>);</span><br><span class="line">            socketThreadMap.remove(socketIOClient.getSessionId().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        SocketThread st_new = <span class="keyword">new</span> SocketThread(socketIOClient, processor, value, interval);</span><br><span class="line">        socketThreadMap.put(socketIOClient.getSessionId().toString(), st_new);</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(st_new);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SocketThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> SocketIOClient socketIOClient;</span><br><span class="line">        <span class="keyword">private</span> MonitorProcessor processor;</span><br><span class="line">        <span class="keyword">private</span> String value;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> interval;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SocketThread</span><span class="params">(SocketIOClient socketIOClient, MonitorProcessor processor, String value, <span class="keyword">long</span> interval)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socketIOClient = socketIOClient;</span><br><span class="line">            <span class="keyword">this</span>.processor = processor;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.interval = interval;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.loop = loop;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (loop &amp;&amp; socketIOClient.isChannelOpen()) &#123;</span><br><span class="line">                Object returnVal = processor.process(value);</span><br><span class="line">                <span class="keyword">if</span> (loop &amp;&amp; socketIOClient.isChannelOpen()) &#123;</span><br><span class="line">                    socketIOClient.sendEvent(<span class="string">&quot;message&quot;</span>, returnVal);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(interval);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    logger.error(<span class="string">&quot;Socket clientId:&#123;&#125; &#123;&#125;&quot;</span>, socketIOClient.getSessionId(), e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        startUpServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="前端测试"><a href="#前端测试" class="headerlink" title="前端测试"></a>前端测试</h2><p>npm install socketio</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script src=&quot;/js/socketio/socket.io.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/socket.io/2.3.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> first = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> socket ;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">&quot;#connectBtn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(first)&#123;</span></span><br><span class="line"><span class="javascript">                socket = io.connect(<span class="string">&#x27;http://localhost:9922&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(socket)</span></span><br><span class="line"><span class="javascript">                socket.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#content&quot;</span>).text(<span class="string">&quot;连接成功&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                 socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                   $(<span class="string">&quot;#content&quot;</span>).text(<span class="string">&quot;连接断开&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                socket.on(<span class="string">&quot;message&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#content&quot;</span>).text(data);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    socket.connect();</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           $(<span class="string">&quot;#cancelBtn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                socket.disconnect();</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(socket);</span></span><br><span class="line"><span class="javascript">           &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           $(<span class="string">&quot;#sendBtn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                socket.emit(<span class="string">&quot;cmd&quot;</span>,<span class="built_in">JSON</span>.parse($(<span class="string">&quot;#message&quot;</span>).val()));</span></span><br><span class="line"><span class="javascript">           &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;connectBtn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;连接&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cancelBtn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>断开<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendBtn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Spring Basic</title>
    <url>/2019/03/11/spring-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="spring-Basic"><a href="#spring-Basic" class="headerlink" title="spring Basic"></a>spring Basic</h1><span id="more"></span>

<blockquote>
<p><code>Spring</code> 的核心：<code>AOP</code>,<code>IOC</code></p>
<p>带来了以下的优势</p>
<blockquote>
<ol>
<li>为什么说<code>Spring</code>解耦了？</li>
</ol>
<p>原始<code>javaEE</code>的开发时，内部所有对象都是自己手动声明的，因此类和类的耦合也重，<code>Spring</code>带来的第一个好处就是类的解耦，<code>Spring</code>将所有程序中需要生成的对象由他自己控制，每个对象(<code>bean</code>)的创建到死亡都由<code>Spring</code>来管理</p>
<p>这样带来的好处是每个对象想要使用其他对象时，只需要问<code>Spring</code>要就行了，类和类之间不在有直接的耦合关系</p>
</blockquote>
<blockquote>
<ol start="2">
<li>AOP 的好处？</li>
</ol>
<p>面向切面编程，提供了一个统一管理接口的方法</p>
</blockquote>
<blockquote>
<ol start="3">
<li>事务开发？</li>
</ol>
<p>原来的事务开发是真正的编程式的，在开启一个事务前你得写一些控制代码，结束了事务也得写，Spring带来了配置方式，只要配置好那些方法需要事务即可，不需要像原来那样每个方法写事务控制代码</p>
</blockquote>
<blockquote>
<ol start="4">
<li>方便测试？</li>
</ol>
<p>spring带来的junit4等工具可以方便快捷的编写测试用例</p>
</blockquote>
<blockquote>
<ol start="5">
<li>spring还集成了许多其他框架如 <code>Structs</code>,<code>Hibernate</code>等</li>
</ol>
</blockquote>
<blockquote>
<ol start="6">
<li>封装了很多工具的API如JDBC，JDBC原始的代码是很麻烦的，Spring封装填写了很多参数</li>
</ol>
</blockquote>
</blockquote>
<h1 id="Spring-IOC内容"><a href="#Spring-IOC内容" class="headerlink" title="Spring IOC内容"></a>Spring IOC内容</h1><h2 id="配置bean"><a href="#配置bean" class="headerlink" title="配置bean"></a>配置bean</h2><blockquote>
<p>上面说了，以后所有的对象都不再由我们手动new出来了，都交给spring来生成，我们拿过来用就行了，那么spring怎么知道哪些对象(Bean)要生成出来呢，我们需要提供一个xml配置文件告诉它</p>
<p>不过首先要知道怎么定位一个类文件，在java开发中，每个类文件属于一个包，我们可以通过<code>包名+文件名</code>找到类，假如一个文件名为<code>test.java</code>处在<code>com.tr.example</code>包下，那么我们可以通过<code>com.tr.example.test</code>定位</p>
<p>光说无法体会，以下以一个例子说明</p>
</blockquote>
<h2 id="搭建spring环境"><a href="#搭建spring环境" class="headerlink" title="搭建spring环境"></a>搭建spring环境</h2><blockquote>
<ol>
<li>先用maven导入spring的包</li>
<li>创建对象</li>
<li>配置文件内配置对象</li>
<li>通过spring获取对象</li>
</ol>
</blockquote>
<blockquote>
<p>新建maven工程，打开idea，选择maven，随便选择启动器都行，反正pom文件自己配置就行了</p>
<p>在pom文件中添加spring的核心依赖：<code>spring-context</code> 这个依赖包含了5个核心包，写好后点击同步等待包下载即可</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置好依赖后，创建interface接口和对应的实现，众所周知interface接口可以对应很多个实现，具体对应哪个我们可以xml中配置，先创建interface代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>具体实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.example.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello from user dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写配置bean 文件名就叫ApplicationConfig.xml放在resources目录下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这步bean的配置定义基本完成了，现在其他类可以轻松的从spring中获取这些bean了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.example.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationConfig.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行代码即可看到效果</p>
<p>这里可以看到使用类的所有对象都不是自己生成的，都是从spring获取的</p>
</blockquote>
<h2 id="Spring的配置文件"><a href="#Spring的配置文件" class="headerlink" title="Spring的配置文件"></a>Spring的配置文件</h2><h3 id="Bean标签的基本配置"><a href="#Bean标签的基本配置" class="headerlink" title="Bean标签的基本配置"></a>Bean标签的基本配置</h3><blockquote>
<p>所有对象交由Spring创建，默认情况下Spring创建是调用无参构造函数的类似<code>new A()</code></p>
<p>id ：唯一性标识用来标志类，不可以重复</p>
<p>class：类的全路径标识</p>
</blockquote>
<h3 id="Bean的标签范围配置"><a href="#Bean的标签范围配置" class="headerlink" title="Bean的标签范围配置"></a>Bean的标签范围配置</h3><blockquote>
<p>scope：对象的作用范围</p>
<ul>
<li>singleton：默认的,单例  在加载配置文件的时候，实例就已经被创建了，当应用停止时才销毁</li>
<li>prototype：多例的  只有bean被获取时才创建一个新的返回，无指针引用就被gc回收了</li>
<li>request：Spring创建后会将对象存入request中</li>
<li>session：创建后存入session中</li>
<li>global session：创建后存入Portle环境，若无Portle环境则存入session</li>
</ul>
<p>测试scope很简单，只要修改例子中的xml配置即可，可以在代码内打印bean的地址查看<code>&lt;bean id=&quot;userDao&quot; class=&quot;com.tr.example.impl.UserDaoImpl&quot; scope=&quot;prototype&quot;/&gt;</code></p>
</blockquote>
<h3 id="Bean的声明周期"><a href="#Bean的声明周期" class="headerlink" title="Bean的声明周期"></a>Bean的声明周期</h3><blockquote>
<p>可以在xml中给类声明创建和销毁时调用的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao impl created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init user dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy user dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello from user dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Bean实例化的三种方式"><a href="#Bean实例化的三种方式" class="headerlink" title="Bean实例化的三种方式"></a>Bean实例化的三种方式</h3><blockquote>
<ul>
<li>无参构造</li>
<li>工厂静态方法实例化</li>
<li>工厂实例方法实例化</li>
</ul>
<p>无参构造很简单，提供构造函数即可，下面研究工厂方法，首先创建静态工厂类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.example.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.tr.example.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后告诉spring，创建这个对象使用工厂来创建</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.tr.example.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这就是静态工厂的方式了</p>
<p>再来看看动态工厂，创建工厂</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.example.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.tr.example.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  UserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置xml，首先要声明一个Factory的bean，我们目标bean需要和Factory的bean关联</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.tr.example.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;bean id=&quot;userDao&quot; class=&quot;com.tr.example.factory.StaticFactory&quot; factory-method=&quot;getUserDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.factory.DynamicFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么要用工厂？ 不觉得麻烦吗？其实是因为很多对象创建的时候不是单单一个new那么简单，创建的对象可能引用了很多其他对象，需要再new更多对象作为参数传入，使用工厂就相当于有人帮我们完成了复杂的创建逻辑</p>
</blockquote>
<h3 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h3><blockquote>
<p>先配置好三层架构：<code>controller,dao,service</code>，在xml中配置好service和dao层的bean</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.tr.example.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;bean id=&quot;userDao&quot; class=&quot;com.tr.example.factory.StaticFactory&quot; factory-method=&quot;getUserDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;myFactory&quot; class=&quot;com.tr.example.factory.DynamicFactory&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; factory-bean=&quot;myFactory&quot; factory-method=&quot;getUserDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在controller层中新建方法使用service的bean</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationConfig.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里其实有问题，我们代码中从spring那里获取了service的bean，调用了save方法，执行到save方法的时候又去spring里获取了dao的bean，然后调用save方法，可以看出service层的这个类是引用了dao层的类的，他们存在耦合关系，但是当前做法是从外部将dao层的bean注入进去的：即手动获取调用</p>
<p>但是这样不好，我们更希望不要自己手动去spring里面获取bean，让spring把需要的bean送过来，我只需要声明一下<code>private 类 a</code> 像这样 spring自动把对应的bean注入到<code>a</code>中，spring提供了在内部结合的方式DI(Dependency injection)，通过xml配置和set的方式注入</p>
<p>先配置下我们需要被注入的类，写上set方法给spring调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do service&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们需要通知spring，把UserDao的bean调用set方法传递进来</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样就完成了bean注入，直接运行controller的方法可以看到没问题，不过这么写xml有点啰嗦，Spring还提供了命名空间p可以精简xml书写</p>
<p>首先添加命名空间：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>





<blockquote>
<p>Bean还提供了另一种注入方式，构造方式注入，先给个构造函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do service&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>惯例，配置xml让spring调用构造函数的时候把bean注入进来</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试即可</p>
<p>要注意的是，set的时候 name属性指的是set方法后面的小写开头的名字，构造函数模式下name指的是参数接口的名字</p>
</blockquote>
<h3 id="Bean依赖注入的数据类型"><a href="#Bean依赖注入的数据类型" class="headerlink" title="Bean依赖注入的数据类型"></a>Bean依赖注入的数据类型</h3><blockquote>
<p>Bean可以注入哪些数据类型？</p>
<p>除了对象，普通数据和集合都可以，这里以dao层的类为例，给dao层的类注入普通数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.example.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao impl created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init user dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy user dao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello from user dao&quot;</span>);</span><br><span class="line">        System.out.println(name+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置xml 唯一不同的是 不用ref 改用 value</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDaoBkk&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>然后是集合的注入，dao层的方法中新增以下三个，并且写好set方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line"><span class="keyword">private</span> Properties properties;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建一个User类，这里用了Lombok插件的<code>@Data</code>少写点get set方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后配置下xml，把dao里面用到的都注入进去</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tr&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tzq&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.example.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDaoBkk&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入其他配置文件（分模块）"><a href="#引入其他配置文件（分模块）" class="headerlink" title="引入其他配置文件（分模块）"></a>引入其他配置文件（分模块）</h3><blockquote>
<p>xml配置随便写写就容易过大，必须要分，不然很影响阅读</p>
<p>这里新增一个user的xml，然后主配置文件导入即可</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;ApplicationConfig-user.xml&quot;</span>&gt;</span>/import&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Spring的api"><a href="#Spring的api" class="headerlink" title="Spring的api"></a>Spring的api</h2><blockquote>
<p>applicationContext ：接口类型，代表应用上下文，可以用来获取容器的bean，他有三个实现类分别是</p>
<ul>
<li>ClassPathXmlApplicationContext：从根路径（resources目录）加载xml配置</li>
<li>FileSystemXmlApplicationContext：从磁盘路径读取配置</li>
<li>AnnotationConfigApplicationContext：使用注解配置对象时候用的，用来读取注解</li>
</ul>
</blockquote>
<h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean()"></a>getBean()</h3><blockquote>
<p>getBean有两种方式使用，直接传递bean的id，另一种是通过传递字节码找<code>context.getBean(UserService.class)</code>这样的好处是不用强制转换但是要注意，如果配置了两个都是UserService的bean，只是id不同，那么这种情况只能用传id的方式</p>
<p>不过最新版本还可以用<code>context.getBean(id,UserService.class)</code>传id和类型，也不用强转</p>
</blockquote>
<h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><h3 id="手动读取配置生成数据源对象"><a href="#手动读取配置生成数据源对象" class="headerlink" title="手动读取配置生成数据源对象"></a>手动读取配置生成数据源对象</h3><blockquote>
<p>数据源即连接池的作用：提高性能，能提前初始化资源</p>
<p>常见的数据源：DBCP,DRUID,C3P0</p>
</blockquote>
<blockquote>
<p>开发步骤</p>
<ul>
<li>导入依赖</li>
<li>创建对象</li>
<li>设置参数，驱动，数据库地址，用户名密码等</li>
</ul>
</blockquote>
<blockquote>
<p>导入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建对象使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatasourceTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试Druid管理工具</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test0</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://192.168.10.85:3306/user?useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;0800&quot;</span>);</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试C3P0 管理工具</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://192.168.10.85:3306/user?useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;0800&quot;</span>);</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这两个测试用例中我们可以看到，数据库的信息配置都是手动配置上去的，后期如果修改，必须要找到相关代码配置，可以利用上节的bean注入里面的注入技术把配置信息注入</p>
</blockquote>
<blockquote>
<p>这里不建议xml存放配置，用peoperties文件，简单易懂</p>
<p>在<code>resources</code>目录建立 <code>jdbc.properties</code></p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://192.168.10.85:3306/user?useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">0800</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码里使用我们的配置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试C3P0 管理工具 加载配置文件形式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">    String driver = bundle.getString(<span class="string">&quot;jdbc.driver&quot;</span>);</span><br><span class="line">    String url = bundle.getString(<span class="string">&quot;jdbc.url&quot;</span>);</span><br><span class="line">    String username = bundle.getString(<span class="string">&quot;jdbc.username&quot;</span>);</span><br><span class="line">    String password = bundle.getString(<span class="string">&quot;jdbc.password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">    dataSource.setDriverClass(driver);</span><br><span class="line">    dataSource.setJdbcUrl(url);</span><br><span class="line">    dataSource.setUser(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="用spring配置数据源"><a href="#用spring配置数据源" class="headerlink" title="用spring配置数据源"></a>用spring配置数据源</h3><blockquote>
<p>可以发现不论是<code>druid</code>还是<code>c3p0</code>都是set什么东西，这就可以利用spring帮我们导入这些配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.10.85:3306/user?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0800&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>来测试下这种方式获取bean链接</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationConfig.xml&quot;</span>);</span><br><span class="line">    ComboPooledDataSource dataSource = context.getBean(<span class="string">&quot;dataSource&quot;</span>, ComboPooledDataSource.class);</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring读取properties配置数据源"><a href="#Spring读取properties配置数据源" class="headerlink" title="Spring读取properties配置数据源"></a>Spring读取properties配置数据源</h3><blockquote>
<p>上节的方式是在xml内配置数据源，对每个bean写死了配置，一般是通过读取properties文件的方式动态配置每个bean</p>
</blockquote>
<blockquote>
<p>引入命名空间，只需要改xml就够了</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    加载配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Spring-注解"><a href="#Spring-注解" class="headerlink" title="Spring 注解"></a>Spring 注解</h2><blockquote>
<p>刚刚的那一系列操作已经可以看到xml配置文件写起来真的非常麻烦，注解是代替xml配置的一种方式</p>
</blockquote>
<h3 id="Spring早期版本注解"><a href="#Spring早期版本注解" class="headerlink" title="Spring早期版本注解"></a>Spring早期版本注解</h3><blockquote>
<p> 原始注解，主要用来替代bean配置</p>
</blockquote>
<blockquote>
<ul>
<li>@Component 使用在类上，用于实例化Bean</li>
<li>@Controller 用在web层类</li>
<li>@Service 用在service层</li>
<li>@Repository 用在dao层</li>
<li>@Autowired 用于引用注入</li>
<li>@Qualified 接口@Autowired用于根据名称注入</li>
<li>@Resource 相当于@Autowired+@Qualified</li>
<li>@Value 注入普通属性</li>
<li>@Scope 标记bean范围(单例多例)</li>
<li>@PostConstruct bean的初始化方式指明</li>
<li>@PreDestroy 指明销毁方法</li>
</ul>
</blockquote>
<blockquote>
<p>还是构建三层架构 controller，service，dao，分别写上方法，如同上节的bean学习，写好UserDao，UserService等方法。这不过这次不再使用xml配置文件了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDao的方法 加上@Component标签，相当于在xml中加入了&lt;bean id=&quot;userDao&quot; class=&quot;&quot; /&gt;</span></span><br><span class="line"><span class="keyword">package</span> com.tr.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tr.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.tr.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>还需要配置组件扫描</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 配置</title>
    <url>/2019/03/11/spring-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="maven的pom-xml"><a href="#maven的pom-xml" class="headerlink" title="maven的pom.xml"></a>maven的pom.xml</h3><span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.swb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloSpring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloSpring Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>helloSpring<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">springVersion</span>&gt;</span>3.2.5.RELEASE<span class="tag">&lt;/<span class="name">springVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置resources-applicationContext-xml"><a href="#配置resources-applicationContext-xml" class="headerlink" title="配置resources/applicationContext.xml"></a>配置resources/applicationContext.xml</h3><h5 id="包含了所有bean对象的创建和注入"><a href="#包含了所有bean对象的创建和注入" class="headerlink" title="包含了所有bean对象的创建和注入"></a>包含了所有bean对象的创建和注入</h5><h5 id="spring使用配置文件通过控制反转和依赖注入使得将类和类之间解耦"><a href="#spring使用配置文件通过控制反转和依赖注入使得将类和类之间解耦" class="headerlink" title="spring使用配置文件通过控制反转和依赖注入使得将类和类之间解耦"></a>spring使用配置文件通过控制反转和依赖注入使得将类和类之间解耦</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置user对象 交给spring容器</span></span><br><span class="line"><span class="comment">    Bean元素：使用该元素需要spring管理的对象</span></span><br><span class="line"><span class="comment">        name：给对象起名用与获得，可以重复</span></span><br><span class="line"><span class="comment">        class: 被管理对象的完整类名</span></span><br><span class="line"><span class="comment">        id(早期)：和name一样，名称不可重复</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建方式1：使用空参构造创建</span></span><br><span class="line"><span class="comment">                2：静态工厂</span></span><br><span class="line"><span class="comment">                3：实例工厂</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--scope 1:singleton单例对象 被标识为单例对象，这也是默认属性 大部分使用默认</span></span><br><span class="line"><span class="comment">              2：prototype 每次创建都是新的  如果和struts配合 由于action每次都是新的 要用prototype</span></span><br><span class="line"><span class="comment">              3：request 和request生命周期一样      （不用</span></span><br><span class="line"><span class="comment">              4：session对象与session生命周期一致  （不用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生命周期属性 1. init-method 配置一个方法作为生命周期初始化方法，在对象创建后立即调用</span></span><br><span class="line"><span class="comment">                    2. destory-mothod 配置。。。销毁。。。               关闭时销毁</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--分模块配置 1.import 导入其他配置文件</span></span><br><span class="line"><span class="comment">        &lt;import resource=&quot;applicationContext.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为user对象中名为name的属性注入tom作为值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入对象 得先配置此对象 引用类型用ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构造用于被引用的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.bean.Car&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;奔驰&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--复杂对象注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean name=&quot;cb&quot; class=&quot;com.tr&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;cu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.bean.ComplexUser&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;arr&quot; value=&quot;tom&quot;&gt;&lt;/property&gt;  &amp;lt;!&amp;ndash;只注入一个值&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>jerry<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;tr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;car&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;car2&quot;</span>/&gt;</span>    <span class="comment">&lt;!--值 放入对象 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;car2&quot;</span>/&gt;</span>    <span class="comment">&lt;!--键 放入对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;tr&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;tr&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--================--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构造函数注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--index:因为两个构造函数由于入参顺序不同变为重载函数，可以指定哪个参数先入</span></span><br><span class="line"><span class="comment">            0，1，2，3，4</span></span><br><span class="line"><span class="comment">         type: 指定入参类型 比如 java.lang.Integer</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.bean.Car&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;white&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;benz&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建和使用容器对象"><a href="#创建和使用容器对象" class="headerlink" title="创建和使用容器对象"></a>创建和使用容器对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 创建容器对象</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 向容器要javaBean</span></span><br><span class="line"><span class="comment">//        User user = (User) ac.getBean(&quot;user&quot;);</span></span><br><span class="line">        User user = (User) ac.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        <span class="comment">//3打印user对象</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造函数配置的对象</span></span><br><span class="line">        Car car2 = (Car) ac.getBean(<span class="string">&quot;car2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ComplexUser cu = (ComplexUser) ac.getBean(<span class="string">&quot;cu&quot;</span>);</span><br><span class="line">        System.out.println(cu.getArr()[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(cu.getArr()[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//4(可选) 销毁操作</span></span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="在Action或controller中使用"><a href="#在Action或controller中使用" class="headerlink" title="在Action或controller中使用"></a>在Action或controller中使用</h4><ol>
<li><p>需要将ClassPathXmlApplication对象配置在Application域中，生命周期和项目一致，放在action对象里会导致创建n个</p>
<p>这需要在web.xml中配置监听器 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以让spring容器随着项目启动而启动，销毁而销毁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定加载spring配置文件的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">para-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">para-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">para-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">para-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>struts 项目 在把spring放入容器于项目application后，再取出使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获得servletContext</span></span><br><span class="line">ServletContext sc = ServletActionContext.getServletContext();</span><br><span class="line"><span class="comment">//2.从sc中获得spring容器</span></span><br><span class="line">WebApplicationContext ac = WebApplicationContextUtils.getWebApplicationContext(sc);</span><br><span class="line">ac.getBean(<span class="string">&quot;customerService&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot+mybatis+多数据源动态配置</title>
    <url>/2019/08/01/springBoot-mybatis-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>公司项目需要多数据源选择，尝试过以下方式配置静态数据源,但是项目已经使用了接口和sql一起的方式，使用以下方式需要sql写为xml分离，故使用<code>AbstractRoutingDataSource</code>尝试动态修改数据源</p>
<span id="more"></span>

<p><code>MyBatisConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个数据库 SqlSessionFactory &amp;&amp; SqlSessionTemplate 创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@MapperScan(basePackages = &#123;&quot;com.sichuan.sichuanproject.mapper.primary&quot;&#125;,</span></span><br><span class="line"><span class="meta">            sqlSessionFactoryRef = &quot;sqlSessionFactoryOne&quot;,</span></span><br><span class="line"><span class="meta">            sqlSessionTemplateRef = &quot;sqlSessionTemplateOne&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">DBOne</span></span>&#123;</span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        DataSource dbOneDataSource;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sqlSessionFactoryOne 创建成功。&quot;</span>);</span><br><span class="line">            SqlSessionFactoryBean factoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">            factoryBean.setDataSource(dbOneDataSource);</span><br><span class="line"><span class="comment">//            factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapper/one/*.xml&quot;));</span></span><br><span class="line">            <span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplateOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            SqlSessionTemplate template = <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryOne()); <span class="comment">// 使用上面配置的Factory</span></span><br><span class="line">            <span class="keyword">return</span> template;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二个数据库 SqlSessionFactory &amp;&amp; SqlSessionTemplate 创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@MapperScan(basePackages = &#123;&quot;com.sichuan.sichuanproject.mapper.second&quot;&#125;,</span></span><br><span class="line"><span class="meta">            sqlSessionFactoryRef = &quot;sqlSessionFactoryTwo&quot;,</span></span><br><span class="line"><span class="meta">            sqlSessionTemplateRef =&quot;sqlSessionTemplateTwo&quot; )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DBTwo</span></span>&#123;</span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        DataSource dbTwoDataSource;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;sqlSessionFactoryTwo 创建成功。&quot;</span>);</span><br><span class="line">            SqlSessionFactoryBean factoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">            factoryBean.setDataSource(dbTwoDataSource);</span><br><span class="line">            factoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">&quot;classpath:mapper/two/*.xml&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplateTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            SqlSessionTemplate template = <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryTwo()); <span class="comment">// 使用上面配置的Factory</span></span><br><span class="line">            <span class="keyword">return</span> template;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>思路：在service层使用mapper之前修改datasource（通过注解和aop）</p>
<h3 id="1-配置数据源yum"><a href="#1-配置数据源yum" class="headerlink" title="1.配置数据源yum"></a>1.配置数据源yum</h3><p>spring工程resource目录下<code>application.yum</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#application.yml</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    jdbc-url: jdbc:mysql://59.225.206.13:3711/sc_fxyj?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">    username: root</span><br><span class="line">    password: Scfxyjpasswd741*</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  second-datasource:</span><br><span class="line">    jdbc-url: jdbc:mysql://59.225.206.13:3501/isgs-home?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">    username: rewi</span><br><span class="line">    password: Schlw+Rewis@201907</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-关闭数据源自动扫描"><a href="#2-关闭数据源自动扫描" class="headerlink" title="2.关闭数据源自动扫描"></a>2.关闭数据源自动扫描</h3><p>springboot启动文件<code>工程名Application.java</code> 添加</p>
<p><code>@SpringBootApplication(exclude = &#123;         DataSourceAutoConfiguration.class &#125;)</code></p>
<p>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;</span></span><br><span class="line"><span class="meta">        DataSourceAutoConfiguration.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SichuanprojectApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SichuanprojectApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-配置注解和aop拦截器"><a href="#3-配置注解和aop拦截器" class="headerlink" title="3.配置注解和aop拦截器"></a>3.配置注解和aop拦截器</h3><p>1.先配置一个enum解耦</p>
<p><code>DsEnum.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-08-01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:数据库枚举类型，存放数据库标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DsEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FIRST_DS(<span class="string">&quot;firstDataSource&quot;</span>,<span class="string">&quot;001&quot;</span>,<span class="string">&quot;first数据库&quot;</span>),</span><br><span class="line">    SECOND_DS(<span class="string">&quot;secondDataSource&quot;</span>,<span class="string">&quot;002&quot;</span>,<span class="string">&quot;second数据库&quot;</span>),</span><br><span class="line">    AUTO_DS(<span class="string">&quot;auto&quot;</span>,<span class="string">&quot;003&quot;</span>,<span class="string">&quot;预留字段后期自动获取数据库&quot;</span>),</span><br><span class="line">    NONE(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;999&quot;</span>,<span class="string">&quot;BASE ERROR&quot;</span>)</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ds;</span><br><span class="line">    <span class="keyword">private</span> String baseid;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DsEnum <span class="title">createDSBybaseid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(DsEnum val : DsEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(val.getBaseid().equalsIgnoreCase(cid)) &#123;</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DsEnum.NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DsEnum(String ds, String baseid) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ds = ds;</span><br><span class="line">        <span class="keyword">this</span>.baseid = baseid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DsEnum(String ds, String baseid, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ds = ds;</span><br><span class="line">        <span class="keyword">this</span>.baseid = baseid;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBaseid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.配置一个DynamicDataSource(重要)：java文件只要继承<code>    AbstractRoutingDataSource</code>即可。spring在选择时会走<code>AbstractRoutingDataSource</code>代码选择一个datasource。需要config提前设置一个内部map</p>
<p><code>DynamicDataSource.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-08-01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:数据源路由器，动态数据源设置，负责提取线程中的当前数据库,这是关键，实现动态选择</span></span><br><span class="line"><span class="comment"> * 查看了AbstractRoutingDataSource的源码，发现本质其也是维护一个map，通过key（Object）来选择datasource</span></span><br><span class="line"><span class="comment"> * 所以通过aop注解事先修改key内容，spring选择数据源时过来用key抽取对象</span></span><br><span class="line"><span class="comment"> * 如果传入的对象为null，即key为空，spring会自动选择hikaridatasource作为默认数据源</span></span><br><span class="line"><span class="comment"> * 可在22行断点查看框架代码执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;数据源为:&#123;&#125;&quot;</span>,DataSourceContextHolder.getDB());</span><br><span class="line">        String db = DataSourceContextHolder.getDB();</span><br><span class="line">        <span class="keyword">return</span> db;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.设置一个用于存放key的线程安全类</p>
<p><code>DataSourceContextHolder.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-8-01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:设置线程安全类，存放数据库源标识(String)，用于动态切换数据库源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DsEnum DEFAULT_DS = DsEnum.FIRST_DS;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDB</span><span class="params">(DsEnum db)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;切换到&#123;&#125;数据源&quot;</span>,db.getMessage());</span><br><span class="line">        contextHolder.set(db.getDs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.配置aop拦截器，作用：所有使用DS注释的service前切换数据库</p>
<p><code>DataAspect.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.service.DS;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-08-01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(com.sichuan.sichuanproject.service.DS)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeDSAnnotation</span><span class="params">(JoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获得当前访问的class</span></span><br><span class="line">        Class&lt;?&gt; className = point.getTarget().getClass();</span><br><span class="line">        <span class="comment">//获得访问的方法名</span></span><br><span class="line">        String methodName = point.getSignature().getName();</span><br><span class="line">        <span class="comment">//得到方法的参数的类型</span></span><br><span class="line">        Class[] argClass = ((MethodSignature)point.getSignature()).getParameterTypes();</span><br><span class="line">        DsEnum dsEnum = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到访问的方法对象</span></span><br><span class="line">            Method method = className.getMethod(methodName, argClass);</span><br><span class="line">            <span class="comment">// 判断是否存在@DS注解</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(DS.class)) &#123;</span><br><span class="line">                DS annotation = method.getAnnotation(DS.class);</span><br><span class="line">                <span class="comment">//如果为自动，则根据baseId自动选择数据库</span></span><br><span class="line">                <span class="keyword">if</span>(DsEnum.AUTO_DS == annotation.value()) &#123;</span><br><span class="line">                    <span class="comment">//预留功能 获取baseid的值</span></span><br><span class="line">                    <span class="comment">//Object[] args = point.getArgs();</span></span><br><span class="line">                    String baseid = <span class="string">&quot;200&quot;</span>;</span><br><span class="line">                    dsEnum = DsEnum.createDSBybaseid(baseid);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 取出注解中的数据源名</span></span><br><span class="line">                dsEnum = annotation.value();</span><br><span class="line">                <span class="comment">//切换数据源</span></span><br><span class="line">                DataSourceContextHolder.setDB(dsEnum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;&#123;&#125; 类出现了异常，异常信息为：&#123;&#125;&quot;</span>,getClass().getSimpleName(),e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;@annotation(com.sichuan.sichuanproject.service.DS)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterDSAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//还原数据源</span></span><br><span class="line">        DataSourceContextHolder.clearDB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.配置注解</p>
<p><code>DS.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.config.DsEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-08-01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  用于service切换数据库的ds注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DS &#123;</span><br><span class="line">    <span class="function">DsEnum <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> DsEnum.FIRST_DS</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-spring启动配置数据源"><a href="#4-spring启动配置数据源" class="headerlink" title="4.spring启动配置数据源"></a>4.spring启动配置数据源</h3><p><code>DatasourceConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-31 15:36</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;firstDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">firstDataSrouce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;sendDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.second-datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondDatasource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态数据源，将两个datasource存放在map里，后期使用时通过数据源名提取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;dynamicDataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dynamicDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DynamicDataSource dynamicDataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">        <span class="comment">//配置默认数据源</span></span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(firstDataSrouce());</span><br><span class="line">        <span class="comment">//配置多数据源</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; dsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dsMap.put(<span class="string">&quot;firstDataSource&quot;</span>, firstDataSrouce());</span><br><span class="line">        dsMap.put(<span class="string">&quot;secondDataSource&quot;</span>, secondDatasource());</span><br><span class="line">        dynamicDataSource.setTargetDataSources(dsMap);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="service层调用流程"><a href="#service层调用流程" class="headerlink" title="service层调用流程"></a>service层调用流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sichuan.sichuanproject.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.config.DsEnum;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.domain.WarningSignal;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.dto.StaRewiDTO;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.mapper.primary.WarningSignalMapper;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.mapper.second.StaRewiMapper;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.service.DS;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.service.WarningSignalService;</span><br><span class="line"><span class="keyword">import</span> com.sichuan.sichuanproject.vo.WarningSignalVO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarningSignalServiceImpl</span> <span class="keyword">implements</span> <span class="title">WarningSignalService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WarningSignalMapper warningSignalMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StaRewiMapper staRewiMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DS(value = DsEnum.FIRST_DS)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">addWarningSignal</span><span class="params">(WarningSignal warningSignal)</span> </span>&#123;</span><br><span class="line">        Integer result = warningSignalMapper.addWarningSignal(warningSignal);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @DS(value = DsEnum.FIRST_DS)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;WarningSignalVO&gt; <span class="title">getWarningSignal</span><span class="params">(Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;WarningSignalVO&gt; warningSignalVOList = warningSignalMapper.getWarningSignal();</span><br><span class="line">        PageInfo pageInfo = <span class="keyword">new</span> PageInfo(warningSignalVOList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DS(value = DsEnum.SECOND_DS)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StaRewiDTO&gt; <span class="title">getStaRewi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> staRewiMapper.getWarningSignal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结说明："><a href="#总结说明：" class="headerlink" title="总结说明："></a>总结说明：</h3><ol>
<li><p>Spring启动时执行@Configuration的java：由于停用了自动扫描且配置了动态数据库链接<code>DataSourceConfig.java</code>所以spring连接数据库会优先使用@Primary注解的dynamicDataSource，在代码中创建不同数据库的两个datasource，且将这两个对象放入spring框架map数据结构里，map的key是DsEnum里的key。</p>
</li>
<li><p>service层调用时：由于启动了注解，（么得注解就使用默认数据源）扫描到注解后执行DataAspect，将DataContextHolder里面存放的key改为现在需要数据源的key。执行完毕，执行DynamicDataSource，由于继承了框架AbstractRoutingDataSource，spring自动执行内部的resolveSpecifiedLookupKey方法，这个方法通过DataContextHolder的key取出内部map的数据源。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>struts2 黑马学习</title>
    <url>/2019/03/11/struts2-%E9%BB%91%E9%A9%AC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>struts2学习</title>
    <url>/2019/03/11/struts2%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Struts2-learn"><a href="#Struts2-learn" class="headerlink" title="Struts2 learn"></a>Struts2 learn</h1><hr>
<span id="more"></span>

<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><h4 id="basic-configuration"><a href="#basic-configuration" class="headerlink" title="basic configuration"></a>basic configuration</h4><ol>
<li><p>使用intellij 默认的maven项目管理依赖</p>
</li>
<li><p>配置maven源镜像为国内阿里</p>
</li>
<li><p>pom.xml中添加以下依赖</p>
<ol>
<li><p>在properties中添加struct和log4j变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;<span class="name">struts2.version</span>&gt;</span>2.5.14.1<span class="tag">&lt;/<span class="name">struts2.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j2.version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">log4j2.version</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 添加具体日志和struct依赖</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<ol>
<li>添加运行插件</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.7.v20170914<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webApp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/$&#123;build.finalName&#125;<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">webApp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stopKey</span>&gt;</span>CTRL+C<span class="tag">&lt;/<span class="name">stopKey</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stopPort</span>&gt;</span>8999<span class="tag">&lt;/<span class="name">stopPort</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scanTargets</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scanTarget</span>&gt;</span>src/main/webapp/WEB-INF/web.xml<span class="tag">&lt;/<span class="name">scanTarget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scanTargets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 在intellij 中添加maven命令，命令格式：jetty:run</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="project-structure"><a href="#project-structure" class="headerlink" title="project structure"></a>project structure</h4><ol>
<li><p>添加java文件夹：src/main/java/<packageName>/controller 和dao层  </p>
<p>这里的view是: src/main/webapp/index.jsp</p>
</li>
<li><p>添加拦截器：用于将所有url访问拦截给struts框架 在src/main/resources/struts.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.devMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;basicstruts2&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.controller.HelloWorldAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/HelloWorld.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加log4j的配置：src/main/resources/log4j2.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d %-5p [%t] %C&#123;2&#125; (%F:%L) - %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.opensymphony.xwork2&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.struts2&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><ol>
<li><p>在webapp下添加index.jsp</p>
<ol>
<li>```html<!DOCTYPE html>
&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8” pageEncoding=”UTF-8” %&gt;<br>&lt;%@ taglib prefix=”s” uri=”/struts-tags”%&gt;<html>
<head>
    <meta charset="UTF-8">
    <title>Basic Struts 2 Application - Welcome</title>
</head>
<body>
<h1>Welcome To Struts 2!</h1>
<p><a href="<s:url action='hello'/> ">Link to hello</a> </p>

&lt;s:url action=”hello” var=”helloLink”&gt;<pre><code>&lt;s:param name=&quot;userName&quot;&gt;Bruce Phillips&lt;/s:param&gt;
</code></pre>
</s:url><p><a href="${helloLink}">Hello Bruce Phillips</a></p>


</body>
</html>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 在webapp下添加HelloWorld.jsp</span><br><span class="line"></span><br><span class="line">   ```html</span><br><span class="line">   &lt;%--</span><br><span class="line">     Created by IntelliJ IDEA.</span><br><span class="line">     User: tr</span><br><span class="line">     Date: 19-3-4</span><br><span class="line">     Time: 下午4:18</span><br><span class="line">     To change this template use File | Settings | File Templates.</span><br><span class="line">   --%&gt;</span><br><span class="line">   &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">   &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;title&gt;hello world&lt;/title&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">       &lt;h2&gt;&lt;s:property value=&quot;messageStoreSuccess.message&quot; /&gt;&lt;/h2&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>在webapp下添加error.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: tr</span><br><span class="line">  Date: 19-3-5</span><br><span class="line">  Time: 上午10:06</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>error page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>error info <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;messageStoreError.message&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在java包内的controller文件夹建立HelloWorldAction.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.tr.dao.MessageStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageStore messageStoreSuccess = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> MessageStore messageStoreError = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mgNumber = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        count = random.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(count%mgNumber==<span class="number">0</span>)&#123;</span><br><span class="line">            messageStoreSuccess = <span class="keyword">new</span> MessageStore(<span class="string">&quot;Welcome you are the: &quot;</span>+count);</span><br><span class="line">            <span class="keyword">return</span> SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;messageStoreError = <span class="keyword">new</span> MessageStore(<span class="string">&quot;error count value is: &quot;</span> + count);</span><br><span class="line">        <span class="keyword">return</span> ERROR;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageStore <span class="title">getMessageStoreSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageStoreSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageStore <span class="title">getMessageStoreError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageStoreError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在java包内的dao文件夹建立MessageStore.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageStore</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>运行maven命令 输入 url   类似 0.0.0.:8080/<ProjectName>/index.action</p>
</li>
</ol>
<hr>
<h3 id="Taglib"><a href="#Taglib" class="headerlink" title="Taglib"></a>Taglib</h3><h4 id="url-tag-with-param"><a href="#url-tag-with-param" class="headerlink" title="url tag with param"></a>url tag with param</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">action</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">var</span>=<span class="string">&quot;helloLink&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>Bruce Phillips<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;helloLink&#125;&quot;</span>&gt;</span>Hello Bruce Phillips<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这会产生url的参数 ？userName=Bruce Phillips</p>
<h4 id="struts2-form-tag"><a href="#struts2-form-tag" class="headerlink" title="struts2 form tag"></a>struts2 form tag</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Get your own personal hello by filling out and submitting this form.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Your name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这会产生一个post请求到./hello.action</p>
<h4 id="struts2-property-tag"><a href="#struts2-property-tag" class="headerlink" title="struts2 property tag"></a>struts2 property tag</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;messageStore.message&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>自动调用对应action的getMessageStore方法 再获取内部message</p>
<p>注意的是每个url请求对应的action对象不同，如果希望这些不同对象同享变量，变量要加static</p>
<p><strong>如果getMessageStore返回的messageStore对象执行他的.method()返回不同结果</strong></p>
<ol>
<li>返回的是string 不做变换<br>​        2. 返回的是int 变为string<ol>
<li>返回的是对象，自动调用toString</li>
</ol>
</li>
</ol>
<p>其实最后给人的感觉是可以直接调用java文件里的成员变量</p>
<hr>
<h3 id="Coding-actions"><a href="#Coding-actions" class="headerlink" title="Coding actions"></a>Coding actions</h3><h4 id="action-mapping-in-struts-xml"><a href="#action-mapping-in-struts-xml" class="headerlink" title="action mapping in struts.xml"></a>action mapping in struts.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tr.controller.HelloWorldAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/HelloWorld.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>action和class关联 并且确定了对view的提供</p>
<h4 id="action接受输入的参数"><a href="#action接受输入的参数" class="headerlink" title="action接受输入的参数"></a>action接受输入的参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Your name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要在控制hello的java类中创建一个userName属性并且实现setter和getter</p>
<hr>
<h3 id="Processing-Forms"><a href="#Processing-Forms" class="headerlink" title="Processing Forms"></a>Processing Forms</h3><h4 id="Forms-and-a-Java-model-class"><a href="#Forms-and-a-Java-model-class" class="headerlink" title="Forms and a Java model class"></a>Forms and a Java model class</h4><ol>
<li><p>create a javabean，在dao层创建Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;First Name: &quot;</span> + getFirstName() + <span class="string">&quot; Last Name:  &quot;</span> + getLastName() +</span><br><span class="line">                <span class="string">&quot; Email:      &quot;</span> + getEmail() + <span class="string">&quot; Age:      &quot;</span> + getAge() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>view层<strong>register.jsp</strong></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Register for a prize by completing this form.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;personBean.firstName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;First name&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;personBean.lastName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Last name&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;personBean.email&quot;</span>  <span class="attr">label</span> =<span class="string">&quot;Email&quot;</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;personBean.age&quot;</span>  <span class="attr">label</span>=<span class="string">&quot;Age&quot;</span>  /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">s:submit</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">s:form</span>&gt;</span>	</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>controller层的Register.java</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts.register.model.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Register</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Person personBean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//call Service class to store personBean&#x27;s state in database</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPersonBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonBean</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        personBean = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>注意事项：struts2会首先实例化personBean然后赋值，执行execute的时候已经有personBean这个实例了，不需要手动实例化</li>
<li>添加thankyou.jsp</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Registration Successful<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Thank you for registering for a prize.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your registration information: <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;personBean&quot;</span> /&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;s:url action=&#x27;index&#x27; /&gt;&quot;</span> &gt;</span>Return to home page<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Form-Validation"><a href="#Form-Validation" class="headerlink" title="Form Validation"></a>Form Validation</h3><p><strong>总结一下就是写个validate，在struts.xml里添加</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/register.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后会自己自动显示错误信息，以下为官方详细说明：</p>
<p>重写action里的validata方法，这样会自动调用 方法例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (personBean.getFirstName().length() == <span class="number">0</span>) &#123;</span><br><span class="line">        addFieldError(<span class="string">&quot;personBean.firstName&quot;</span>, <span class="string">&quot;First name is required.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (personBean.getEmail().length() == <span class="number">0</span>) &#123;</span><br><span class="line">        addFieldError(<span class="string">&quot;personBean.email&quot;</span>, <span class="string">&quot;Email is required.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (personBean.getAge() &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        addFieldError(<span class="string">&quot;personBean.age&quot;</span>, <span class="string">&quot;Age is required and must be 18 or older&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If any errors have been added then Struts 2 will not proceed to call the execute method. Rather the Struts 2 framework  will return <code>input</code> as the result of calling the action.</p>
<h4 id="Handle-Input-Being-Returned"><a href="#Handle-Input-Being-Returned" class="headerlink" title="Handle Input Being Returned"></a>Handle Input Being Returned</h4><p>So what should we do if Struts 2 returns <code>input</code>  indicating that the user’s input in the form is not valid? In most  cases  we will want to redisplay the web page that has the form and include in  the form error messages to inform the user what is wrong.</p>
<p>To handle the return value of <code>input</code> we need to add the following result to our action node in <code>struts.xml</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;result name=&quot;input&quot;&gt;/register.jsp&lt;/result&gt;</span><br></pre></td></tr></table></figure>

<p>The above result node goes just after the success result node for the register action and before the closing of the action node.</p>
<h4 id="Error-Messages"><a href="#Error-Messages" class="headerlink" title="Error Messages"></a>Error Messages</h4><p>So when validation fails and Struts 2 returns input, the Struts 2 framework will redisplay the <code>register.jsp</code>. Since we  used Struts 2 form tags, automatically Struts 2 will add the error messages. These error messages are the ones we specified  in the <code>addFieldError</code> method call. The addFieldError method takes two arguments. The first is the form field name to which  the error applies and the second is the error message to display above that form field.</p>
<p>So the following <code>addFieldError</code> method call:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addFieldError(&quot;personBean.firstName&quot;, &quot;First name is required.&quot;)</span><br></pre></td></tr></table></figure>

<p>will cause the message <em>First name is required</em> to be displayed above the <code>firstName</code> field on the form.</p>
<h4 id="如何修改自己form表单错误提示的css"><a href="#如何修改自己form表单错误提示的css" class="headerlink" title="如何修改自己form表单错误提示的css"></a>如何修改自己form表单错误提示的css</h4><p>在html的head里添加&lt;s:head /&gt;</p>
]]></content>
      <categories>
        <category>Struts2</category>
      </categories>
      <tags>
        <tag>struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>surface pro + manjaro</title>
    <url>/2019/03/07/surface-pro-manjaro/</url>
    <content><![CDATA[<h2 id="Config-Surface"><a href="#Config-Surface" class="headerlink" title="Config Surface"></a>Config Surface</h2><h3 id="check-the-official-site-download-the-ImageWriter-in-windows"><a href="#check-the-official-site-download-the-ImageWriter-in-windows" class="headerlink" title="check the official site , download the ImageWriter in windows"></a>check the official site , download the ImageWriter in windows</h3><p>if choose other writer , use DD mode</p>
<h3 id="important-close-the-SecureBootMode-On-Surface"><a href="#important-close-the-SecureBootMode-On-Surface" class="headerlink" title="important : close the SecureBootMode On Surface!!!"></a>important : close the SecureBootMode On Surface!!!</h3><p>push the voice-plus button and powerOn to get into UEFI</p>
<span id="more"></span>

<hr>
<h3 id="plug-in-the-USB"><a href="#plug-in-the-USB" class="headerlink" title="plug in the USB"></a>plug in the USB</h3><ol>
<li><h4 id="set-the-install-option"><a href="#set-the-install-option" class="headerlink" title="set the install option"></a>set the install option</h4></li>
</ol>
<blockquote>
<ol>
<li>tz(timeZone) = Asia/Shanghai</li>
<li>lang = zh_CN </li>
<li>driver = free/nonfree (专属或者开源) </li>
<li><strong>boot</strong> </li>
</ol>
</blockquote>
<ol>
<li><h4 id="install-with-windows"><a href="#install-with-windows" class="headerlink" title="install with windows"></a>install with windows</h4></li>
</ol>
<hr>
<h3 id="configuration-after-installing"><a href="#configuration-after-installing" class="headerlink" title="configuration after installing"></a>configuration after installing</h3><ol>
<li><h4 id="configure-source"><a href="#configure-source" class="headerlink" title="configure source"></a>configure source</h4><ol>
<li>sudo pacman-mirrors -i -c China -m rank   : choose the top one</li>
<li>sudo pacman-Syy    :refresh</li>
<li><strong>add archlinux chinese repository</strong><br>vim /etc/pacman.conf —&gt; then add :<br>[archlinuxcn]<br>Server = <a href="https://mirrors.shu.edu.cn/archlinuxcn/$arch">https://mirrors.shu.edu.cn/archlinuxcn/$arch</a></li>
</ol>
</li>
<li><h4 id="import-GPG-KEY"><a href="#import-GPG-KEY" class="headerlink" title="import GPG KEY"></a>import GPG KEY</h4><ol>
<li>sudo pacman -Sy archlinuxcn-keyring</li>
</ol>
</li>
<li><h4 id="install-yaourt-and-pacaur-and-vim"><a href="#install-yaourt-and-pacaur-and-vim" class="headerlink" title="install yaourt and pacaur and vim"></a>install yaourt and pacaur and vim</h4></li>
<li><h4 id="update-system"><a href="#update-system" class="headerlink" title="update system"></a>update system</h4><ol>
<li>sudo pacman -Syu</li>
</ol>
</li>
</ol>
<h3 id="Some-softwares"><a href="#Some-softwares" class="headerlink" title="Some softwares"></a>Some softwares</h3><ol>
<li><h4 id="搜狗拼音"><a href="#搜狗拼音" class="headerlink" title="搜狗拼音"></a>搜狗拼音</h4><ol>
<li>sudo pacman -S fcitx-sogoupinyin</li>
<li>sudo pacman -S fcitx-im</li>
<li>sudo pacman -S fcitx-configtool</li>
<li>vim ~/.xprofile : add:<br>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=”@im=fcitx”</li>
</ol>
</li>
<li><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><ol>
<li>sudo pacman -R jdk8-openjdk</li>
<li>sudo pacman -R jre8-openjdk</li>
<li>sudo pacman -R jre8-openjdk-headless</li>
<li>yaourt jdk</li>
</ol>
</li>
<li><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><ol>
<li>sudo pacman -S git</li>
</ol>
</li>
<li><h4 id="oh-my-zsh-the-official-site-oh-my-zsh-https-github-com-robbyrussell-oh-my-zsh"><a href="#oh-my-zsh-the-official-site-oh-my-zsh-https-github-com-robbyrussell-oh-my-zsh" class="headerlink" title="oh my zsh : the official site[oh_my_zsh][https://github.com/robbyrussell/oh-my-zsh]"></a>oh my zsh : the official site[oh_my_zsh][<a href="https://github.com/robbyrussell/oh-my-zsh]">https://github.com/robbyrussell/oh-my-zsh]</a></h4><ol>
<li>yaourt -S zsh</li>
<li>sh -c “$(wget <a href="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> -O -)”</li>
<li>vim ~/.zshrc</li>
<li>source ~/.zshrc  :to enable the plugins</li>
</ol>
<h5 id="安装-powerline-fonts"><a href="#安装-powerline-fonts" class="headerlink" title="安装 powerline fonts"></a>安装 powerline fonts</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下载powerline fonts项目</span><br><span class="line">git clone https://github.com/powerline/fonts</span><br><span class="line">// 执行安装</span><br><span class="line">./fonts/install.sh</span><br></pre></td></tr></table></figure>

<h5 id="配置iTerm"><a href="#配置iTerm" class="headerlink" title="配置iTerm"></a>配置iTerm</h5><p>在<code>Preperence → Profiles → Text → Front</code> 中，<br>和<code>Preperence → Profiles → Text → Non-ASCII Font</code>中<br>改变字体为<code>Sauce Code Powerline</code></p>
<p><strong>安装powerline</strong>（参考<a href="https://github.com/banga/powerline-shell">https://github.com/banga/powerline-shell</a>）</p>
<blockquote>
<p>git clone <a href="https://github.com/milkbikis/powerline-shell">https://github.com/milkbikis/powerline-shell</a></p>
<p>cd powerline-shell</p>
<p>./install.py</p>
</blockquote>
<p><strong>３</strong><strong>, 使用zsh替换bash</strong>（重启系统后生效）</p>
<blockquote>
<p>chsh -s /bin/zsh</p>
</blockquote>
<p><strong>４</strong><strong>, 配置zsh</strong></p>
<p>更换powerline主题：</p>
<p>到git克隆的powerline-shell目录下，修改config.py中的theme的设置，然后运行install.py</p>
<p>参考<a href="http://www.cnblogs.com/ma6174/archive/2012/05/08/2490921.html">http://www.cnblogs.com/ma6174/archive/2012/05/08/2490921.html</a></p>
</li>
<li><h4 id="tim"><a href="#tim" class="headerlink" title="tim"></a>tim</h4></li>
<li><h4 id="vim-configuration"><a href="#vim-configuration" class="headerlink" title="vim configuration"></a>vim configuration</h4><ol>
<li>GlobalSettings:/etc/vim/vimrc    or  /etc/vimrc</li>
<li>persional settings : ~/.vimrc</li>
<li>some command:  </li>
</ol>
<blockquote>
<p>set number<br>syntax on<br>set showmode<br>set ecoding=utf-8<br>set t_Co=256<br>filetype indent on<br>set autoindent<br>set tabstop=3<br>set expandtab<br>set cursorline<br>set wrap<br>set hlsearch<br>set ignorecase</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>manjaro</tag>
        <tag>surface</tag>
      </tags>
  </entry>
  <entry>
    <title>vpn</title>
    <url>/2019/07/12/vpn/</url>
    <content><![CDATA[<h3 id="vpn配置"><a href="#vpn配置" class="headerlink" title="vpn配置"></a>vpn配置</h3><p>本脚本适用环境<br>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M</p>
<p>关于本脚本<br>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；<br>2、各版本的启动脚本及配置文件名不再重合；<br>3、每次运行可安装一种版本；<br>4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；<br>5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</p>
<p>默认配置<br>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）<br>密码：自己设定（如不设定，默认为 teddysun.com）<br>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）<br>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）<br>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）<br>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>
<p>客户端下载<br>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p>
<p>使用方法<br>使用root用户登录，依次运行以下命令：</p>
<p>wget –no-check-certificate -O shadowsocks-all.sh <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</a><br>chmod +x shadowsocks-all.sh<br>./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</p>
<p>安装完成后，脚本提示如下</p>
<p>Congratulations, your_shadowsocks_version install completed!<br>Your Server IP        :your_server_ip<br>Your Server Port      :your_server_port<br>Your Password         :your_password<br>Your Encryption Method:your_encryption_method</p>
<p>Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)<br> ss://your_encryption_method:your_password@your_server_ip:your_server_port<br>Your QR Code has been saved as a PNG file path:<br> your_path.png</p>
<p>Welcome to visit:<a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a><br>Enjoy it!</p>
<p>卸载方法<br>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）<br>使用root用户登录，运行以下命令：</p>
<p>./shadowsocks-all.sh uninstall</p>
<p>启动脚本<br>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>
<p>Shadowsocks-Python 版：<br>/etc/init.d/shadowsocks-python start | stop | restart | status</p>
<p>ShadowsocksR 版：<br>/etc/init.d/shadowsocks-r start | stop | restart | status</p>
<p>Shadowsocks-Go 版：<br>/etc/init.d/shadowsocks-go start | stop | restart | status</p>
<p>Shadowsocks-libev 版：<br>/etc/init.d/shadowsocks-libev start | stop | restart | status</p>
<p>各版本默认配置文件<br>Shadowsocks-Python 版：<br>/etc/shadowsocks-python/config.json</p>
<p>ShadowsocksR 版：<br>/etc/shadowsocks-r/config.json</p>
<p>Shadowsocks-Go 版：<br>/etc/shadowsocks-go/config.json</p>
<p>Shadowsocks-libev 版：<br>/etc/shadowsocks-libev/config.json</p>
<p>BBR plus</p>
<p>wget “<a href="https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh&quot;">https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh&quot;</a> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh </p>
<p>BBR</p>
<p>使用BBR加速器<br>让访问速度加速，飞起来！使用 BBR 加速工具。</p>
<p>安装 BBR<br>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh">https://github.com/teddysun/across/raw/master/bbr.sh</a><br>获取读写权限<br>chmod +x bbr.sh<br>启动BBR安装<br>./bbr.sh<br>接着按任意键，开始安装，坐等一会。安装完成一会之后它会提示我们是否重新启动vps，我们输入 y 确定重启服务器。</p>
<p>重新启动之后，输入 lsmod | grep bbr 如果看到 tcp_bbr 就说明 BBR 已经启动了。</p>
<p>再访问一下 Youtube，1080p 超高清，很顺畅不卡顿！</p>
]]></content>
      <categories>
        <category>Vpn</category>
      </categories>
      <tags>
        <tag>Vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>windows+linux subsystem</title>
    <url>/2020/01/31/windows-linux-subsystem/</url>
    <content><![CDATA[<h3 id="windows下的linux子系统"><a href="#windows下的linux子系统" class="headerlink" title="windows下的linux子系统"></a>windows下的linux子系统</h3><p>surface book的manjaro双系统体验糟糕，退而求其次使用子系统</p>
<span id="more"></span>
<h4 id="安装linux"><a href="#安装linux" class="headerlink" title="安装linux"></a>安装linux</h4><ol>
<li><p>控制面板中的：启用功能中，启动linux子系统</p>
</li>
<li><p>自带市场安装一个linux版本</p>
</li>
<li><p>启动安装的linux，进入换源，/etc/apt/source.list 切换对应版本的国内源</p>
<p> sudo apt update</p>
</li>
</ol>
<h4 id="windows下gui准备"><a href="#windows下gui准备" class="headerlink" title="windows下gui准备"></a>windows下gui准备</h4><ol>
<li><p>安装vcxrv（远程软件）<a href="https://sourceforge.net/projects/vcxsrv/">https://sourceforge.net/projects/vcxsrv/</a></p>
</li>
<li><p>启动xlaunch，displaynumber设置0 ，windows给的子系统不支持gui，只能通过远程方式c/s模式了。</p>
</li>
</ol>
<p><img src="/images/pasted-13.png" alt="upload successful"></p>
<h4 id="linux下准备"><a href="#linux下准备" class="headerlink" title="linux下准备"></a>linux下准备</h4><ol>
<li><p>选择一个桌面环境，gnome或者xfce，装哪个都可以</p>
</li>
<li><p>设置输出桌面 <code>echo &quot;export DISPLAY=:0.0&quot; &gt;&gt; ~/.bashrc</code></p>
</li>
<li><p>修改中文环境语言 <code>echo &quot;LANG=zh_CN.UTF-8&quot; &gt;&gt; ~/.profile</code></p>
</li>
<li><p>环境启动配置，这里使用了xfce4</p>
</li>
</ol>
<p><img src="/images/pasted-14.png" alt="upload successful"></p>
<ol start="5">
<li><code>xfce4-session</code> 启动界面，输出到windows下的xlaunch</li>
</ol>
<p><img src="/images/pasted-15.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>wordcloud大数据词云分析</title>
    <url>/2019/06/12/wordcloud%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h3><p>在配置了anaconda和jupyternotebook的情况下，在以上环境下使用python作为工具分析</p>
<span id="more"></span>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ol>
<li>pip3 install wordcloud</li>
</ol>
<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ol>
<li>来源可以为文章，找到一篇文章保存为article.txt</li>
</ol>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ol>
<li>打开notebook，确定article.txt没有问题</li>
</ol>
<p><img src="/images/pasted-9.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
      <tags>
        <tag>DataAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>乱码问题</title>
    <url>/2019/03/11/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="jsp页面乱码"><a href="#jsp页面乱码" class="headerlink" title="jsp页面乱码"></a>jsp页面乱码</h3><span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">   pageEncoding=&quot;UTF-8&quot;%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="tomcat控制台乱码"><a href="#tomcat控制台乱码" class="headerlink" title="tomcat控制台乱码"></a>tomcat控制台乱码</h3><p>tomcat下面 apache-tomcat-7.0.92\conf\logging.properties 把里面的 UTF-8 都改成 GBK<br><a href="https://img-blog.csdnimg.cn/20190110144403828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NfYm9keQ==,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20190110144403828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NfYm9keQ==,size_16,color_FFFFFF,t_70</a></p>
<h3 id="hibernate-输入乱码"><a href="#hibernate-输入乱码" class="headerlink" title="hibernate 输入乱码"></a>hibernate 输入乱码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">处理乱码的filter，原理是通过过滤器/*的路径 把所有请求的编码设置为utf-8</span><br><span class="line"></span><br><span class="line">过滤器类</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tr.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用编码解决方案</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		<span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">		HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">		<span class="comment">// 对request包装增强</span></span><br><span class="line">		HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">		chain.doFilter(myrequest, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义request对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">		<span class="keyword">this</span>.request = request;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 先获得请求方式</span></span><br><span class="line">		String method = request.getMethod();</span><br><span class="line">		<span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// post请求</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 处理post乱码</span></span><br><span class="line">				request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// get请求</span></span><br><span class="line">			Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">			<span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">				<span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">					String[] values = parameterMap.get(parameterName);</span><br><span class="line">					<span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">							<span class="keyword">try</span> &#123;</span><br><span class="line">								<span class="comment">// 处理get乱码</span></span><br><span class="line">								values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">							&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">								e.printStackTrace();</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				hasEncode = <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> parameterMap;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">		String[] values = parameterMap.get(name);</span><br><span class="line">		<span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">		Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">		String[] values = parameterMap.get(name);</span><br><span class="line">		<span class="keyword">return</span> values;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤器web.xml设置</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到1完成前后端分离的web项目</title>
    <url>/2018/04/22/%E4%BB%8E0%E5%88%B01%E5%88%9B%E5%BB%BA%E6%95%B4%E4%B8%AAweb%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="从0到1完成前后端分离的web项目"><a href="#从0到1完成前后端分离的web项目" class="headerlink" title="从0到1完成前后端分离的web项目"></a>从0到1完成前后端分离的web项目</h1><p>最简最少技术栈创建一个完整项目</p>
<span id="more"></span>

<p>技术栈：</p>
<blockquote>
<p>后端： springboot + mybatis（注解形式）<br>前端： jquery+layUI</p>
</blockquote>
<h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><h3 id="创建spring项目"><a href="#创建spring项目" class="headerlink" title="创建spring项目"></a>创建spring项目</h3><p>打开idea 点击新建项目，选择spring initializr</p>
<p><img src="/images/pasted-49.png" alt="upload successful"></p>
<p>一步一步往下填写相关信息，填错了也无所谓，可以复制我的pom文件</p>
<h4 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h4><p>配置mybatis和必要启动组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>retailmanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>retailmanager<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>team work<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置基础文件结构"><a href="#配置基础文件结构" class="headerlink" title="配置基础文件结构"></a>配置基础文件结构</h4><p><img src="/images/pasted-50.png" alt="upload successful"></p>
<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>选择一个数据库，这里选择mysql，无所谓。</p>
<h4 id="创建utf8的数据库"><a href="#创建utf8的数据库" class="headerlink" title="创建utf8的数据库"></a>创建utf8的数据库</h4><p><code>CREATE DATABASE retail_manager DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></p>
<h4 id="创建用户表"><a href="#创建用户表" class="headerlink" title="创建用户表"></a>创建用户表</h4><p>可以用命令行，或者navicate或者idea自带的管理工具</p>
<p><img src="/images/pasted-51.png" alt="upload successful"><br><img src="/images/pasted-53.png" alt="upload successful"></p>
<h3 id="创建实体类和mapper"><a href="#创建实体类和mapper" class="headerlink" title="创建实体类和mapper"></a>创建实体类和mapper</h3><p>实体类bean应该遵守阿里的相关约定，dto vo po 以及互相转换的orika</p>
<p>这里推荐选择lombok，这个插件的好处是不用写getter和setter，可以让代码更加精简。</p>
<p>mapper需要配置mapper的resource文件，这个xml文件格式可以百度下，创建xml文件 填入模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yourproject&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：生成的UserDao里面需要加上<code>@Mapper</code>注解否则无法被扫描到</p>
<h4 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h4><p>注意sevice层的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dql.retailmanager.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dql.retailmanager.dao.mapper.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.dql.retailmanager.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select user by primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add new user to db</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete a user by primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="创建controller"><a href="#创建controller" class="headerlink" title="创建controller"></a>创建controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dql.retailmanager.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dql.retailmanager.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.dql.retailmanager.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="meta">@RequestParam</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUserById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="meta">@RequestParam</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.createUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">8081</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line">    <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">jdbc:mysql://47.107.105.158:3306/test?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mybatis的相关配置</span></span><br><span class="line"><span class="attr">mybatis</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    #mapper配置文件</span></span><br><span class="line">    <span class="meta">mapper-locations</span>: <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">    #开启驼峰命名</span></span><br><span class="line">    <span class="attr">configuration</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">map-underscore-to-camel-case</span>: <span class="string">true</span></span><br></pre></td></tr></table></figure>

<h4 id="完成启动"><a href="#完成启动" class="headerlink" title="完成启动"></a>完成启动</h4><p><img src="/images/pasted-55.png" alt="upload successful"></p>
<h4 id="测试后台"><a href="#测试后台" class="headerlink" title="测试后台"></a>测试后台</h4><p><img src="/images/pasted-56.png" alt="upload successful"></p>
<h4 id="单点登陆校验"><a href="#单点登陆校验" class="headerlink" title="单点登陆校验"></a>单点登陆校验</h4><p>数据库配置session，本地使用localstorage存放sessionid，一般这个单点登录和分布式集群是用redis来管理的，但是这里为了不引入更多技术就用数据库了，问题不大。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">login.js:</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urlInfo <span class="keyword">from</span> <span class="string">&#x27;./baseURL.js&#x27;</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      layui.use(<span class="string">&#x27;form&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> form = layui.form;</span><br><span class="line">        layer.msg(<span class="string">&#x27;login system....&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          form.on(<span class="string">&#x27;submit(login)&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 生成token</span></span><br><span class="line">            <span class="keyword">var</span> rod = <span class="built_in">Math</span>.round(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">            <span class="keyword">var</span> md5rod = $.md5(rod + <span class="string">&#x27;author&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(md5rod);</span><br><span class="line">            $.get(urlInfo.baseUrl + urlInfo.login, &#123;</span><br><span class="line">              <span class="attr">name</span>: data.field.username,</span><br><span class="line">              <span class="attr">pwd</span>: data.field.password,</span><br><span class="line">              <span class="attr">sessionToken</span>: md5rod</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; data != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;token&quot;</span>, md5rod);</span><br><span class="line">                <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;userId&quot;</span>, data.id)</span><br><span class="line">                <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;user&quot;</span>, data);</span><br><span class="line">                location.href = <span class="string">&#x27;index.html&#x27;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">&quot;error user or password&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#login-name&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#login-password&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//监听提交</span></span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">check js:</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否登陆</span></span><br><span class="line">        <span class="keyword">import</span> urlInfo <span class="keyword">from</span> <span class="string">&#x27;./baseURL.js&#x27;</span></span><br><span class="line">        layui.use([<span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> element = layui.element;</span><br><span class="line">            $.get(urlInfo.baseUrl + urlInfo.sessionCheck, &#123;</span><br><span class="line">                <span class="attr">userId</span>: <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;userId&quot;</span>),</span><br><span class="line">                <span class="attr">token</span>: <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 用户未登录过 跳转到登陆页面</span></span><br><span class="line">                    layer.msg(<span class="string">&#x27;please login&#x27;</span>);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">window</span>.location.href = <span class="string">&quot;./login.html&quot;</span>;</span><br><span class="line">                        <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">                    &#125;, <span class="number">1500</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;logined user&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><h3 id="配置nginx反向代理-解决跨域"><a href="#配置nginx反向代理-解决跨域" class="headerlink" title="配置nginx反向代理 解决跨域"></a>配置nginx反向代理 解决跨域</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">	</span><br><span class="line">	server&#123;</span><br><span class="line">		listen 			9999;</span><br><span class="line">		server_name  localhost;</span><br><span class="line">		location / &#123;  </span><br><span class="line">			proxy_pass http://localhost:8081;</span><br><span class="line">		&#125;</span><br><span class="line">		location /user/ &#123;</span><br><span class="line">			proxy_pass http://localhost:8080;</span><br><span class="line">		&#125;</span><br><span class="line">		location /session/ &#123;</span><br><span class="line">			proxy_pass http://localhost:8080;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-58.png" alt="upload successful"></p>
<p>执行reload命令生效配置</p>
<h2 id="配置分页器"><a href="#配置分页器" class="headerlink" title="配置分页器"></a>配置分页器</h2><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pagehelper   </span><br><span class="line">pagehelper:</span><br><span class="line">    helperDialect: mysql</span><br><span class="line">    reasonable: true</span><br><span class="line">    supportMethodsArguments: true</span><br><span class="line">    params: count=countSql</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 内外网双网卡配置</title>
    <url>/2020/05/08/%E5%86%85%E5%A4%96%E7%BD%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>公司配置了内网网口，可以直接插网线使用内网了，手机热点外网查资料，不用频繁切换舒服多了</p>
<span id="more"></span>

<h4 id="内网ip获取"><a href="#内网ip获取" class="headerlink" title="内网ip获取"></a>内网ip获取</h4><p>公司的内网IP分配有问题，分配的c类ip无法连接数据库，只有分配到的b类ip可以。</p>
<p>执行<code>ipconfig /release</code>放弃ip</p>
<p>执行<code>ipconfig /renew</code> 重新获取ip</p>
<p>不停renew 直到获取到一个b类ip 如<code>172.16.224.160</code></p>
<h4 id="双网卡配置"><a href="#双网卡配置" class="headerlink" title="双网卡配置"></a>双网卡配置</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ol>
<li><p>内网的网卡和外网的网卡在分配ip注册完毕的时候会向本地路由表写入访问配置。比如 下图 网络目标 <code>0.0.0.0</code>表示本地所有ip访问，对应网关和接口则是数据包发送的目标地址，跃点数 <code>metrix</code> 表明了访问的优先级（数字越小优先级越高）。</p>
</li>
<li><p>由于同时连接了内外网，因此会存在两个网络目标都为<code>0.0.0.0</code>。因为不同的访问走的网段不同，配置双网卡的目标就是让内网的访问走内网网关，外网的访问走外网网关。</p>
</li>
<li><p> <code>route print -4</code> 打印当前的路由配置， 初始如下图</p>
</li>
</ol>
<p><img src="/images/pasted-21.png" alt="upload successful"></p>
<ol start="4">
<li><p><code>route delete 0.0.0.0 -p</code> 永久删除当且的默认目标<code>0.0.0.0</code>的配置，<code>0.0.0.0</code>表示所有访问请求。</p>
</li>
<li><p><code>route add 0.0.0.0 mask 0.0.0.0 172.20.10.1</code> 配置所有请求走外网：add 访问的网络段 mask 子网掩码 请求走的网关。 这里让所有请求走外网网关，然后让内网请求优先级高一些即可</p>
</li>
<li><p><code>route add 172.16.221.0 mask 255.255.255.0 172.16.224.254</code>  数据库网段在<code>172.16.221.0</code> 内网的网关为<code>172.16.224.254</code></p>
</li>
<li><p>完成后内网数据库的访问会走第五条（优先级最高），访问外网的ip则不会走172.16.21.0网段，默认走第一条。</p>
</li>
</ol>
<p><img src="/images/pasted-22.png" alt="upload successful"></p>
<h4 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h4><p>写了一个自动化的bat，每次插上公司网卡，开好手机热点即可使用。</p>
<p>db_net：要访问的数据库网段。</p>
<p>inner_gateway：内网能通向数据库的网关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo off</span><br><span class="line">echo ur loacl host: @hostname</span><br><span class="line"></span><br><span class="line">set db_net=172.16.221.0</span><br><span class="line">set db_mask=255.255.255.0</span><br><span class="line">set inner_gateway=172.16.224.254</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:: get ip</span><br><span class="line">for /f &quot;tokens=16&quot; %%i in (&#x27;ipconfig ^|find /i &quot;172.16&quot;&#x27;) do set inner_ip=%%i</span><br><span class="line"></span><br><span class="line">for /f &quot;tokens=16&quot; %%j in (&#x27;ipconfig ^|find /i &quot;ipv4&quot;&#x27;) do set internet_ip=%%j</span><br><span class="line"></span><br><span class="line">:: show ip info</span><br><span class="line">echo ======================start======================</span><br><span class="line">echo ur inner ip: %inner_ip%</span><br><span class="line">echo ur internet ip: %internet_ip%</span><br><span class="line"></span><br><span class="line">:: show route info </span><br><span class="line">route print -4</span><br><span class="line"></span><br><span class="line">:: delete default config</span><br><span class="line">route delete 0.0.0.0 -p</span><br><span class="line"></span><br><span class="line">:: configure internet ip</span><br><span class="line">route add 0.0.0.0 mask 0.0.0.0 %internet_ip%%</span><br><span class="line"></span><br><span class="line">:: configure inner ip</span><br><span class="line">route add %db_net% mask %db_mask% %inner_gateway%</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>常用包的maven依赖</title>
    <url>/2019/03/08/%E5%B8%B8%E7%94%A8%E5%8C%85%E7%9A%84maven%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>转载其他人的 pom.xml</p>
<span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-math3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">--------------------- </span><br><span class="line">作者：口袋里的小龙 </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https://blog.csdn.net/koudailidexiaolong/article/details/52239649 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/2020/05/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>多文件批量上传问题，layui下的实现。</p>
<p>layui底层只支持单个文件上传，实现多文件统一上传并在全部上传后生成事件</p>
<span id="more"></span>

<h4 id="前端html"><a href="#前端html" class="headerlink" title="前端html"></a>前端html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--                &lt;label class=&quot;layui-form-label&quot;&gt;添加附件：&lt;/label&gt;--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filePath&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filePath&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline shangc_txt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 5px;padding-left: 10px;width: 100%&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload-svg-btn&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon&quot;</span>&gt;</span><span class="symbol">&amp;#xe67c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>选择文件</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload-list&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #D9D9D9;width: 98%&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding:0px;margin: 0px;overflow-y: auto;margin-top: 2px;&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件大小<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;upload-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-disabled&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-28.png" alt="upload successful"></p>
<h4 id="前端js"><a href="#前端js" class="headerlink" title="前端js"></a>前端js</h4><p>使用了layui的文件上传，在上传过程中手动拼接上传文件的显示和操作ui，done为每个文件上传后的调用，alldone为所有文件上传后的调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成上传task</span></span><br><span class="line">    <span class="keyword">var</span> uploadTaskForm = <span class="function"><span class="keyword">function</span> (<span class="params">uploadForm</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: applicationUtil.gatewayURL + <span class="string">&#x27;/pssc-graph/graph/generate-task&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: uploadForm,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data.code);</span><br><span class="line">                <span class="comment">// layer.msg(data.msg);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//上传svg和cim文件渲染</span></span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> list_view = $(<span class="string">&#x27;#upload-list&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> taskForm = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> uploadListIns = upload.render(&#123;</span><br><span class="line">        <span class="attr">elem</span>: <span class="string">&#x27;#upload-svg-btn&#x27;</span> <span class="comment">//绑定元素</span></span><br><span class="line">        , <span class="attr">url</span>: applicationUtil.gatewayURL + <span class="string">&#x27;/pssc-graph/graph/upload/&#x27;</span> <span class="comment">//上传接口</span></span><br><span class="line">        , <span class="attr">accept</span>: <span class="string">&#x27;file&#x27;</span></span><br><span class="line">        , <span class="attr">exts</span>: <span class="string">&#x27;svg|xml&#x27;</span></span><br><span class="line">        , <span class="attr">auto</span>: <span class="literal">false</span></span><br><span class="line">        , <span class="attr">multiple</span>: <span class="literal">true</span></span><br><span class="line">        , <span class="attr">number</span>: <span class="number">2</span></span><br><span class="line">        , <span class="attr">bindAction</span>: <span class="string">&#x27;#upload&#x27;</span></span><br><span class="line">        , <span class="attr">choose</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//将每次选择的文件追加到文件队列</span></span><br><span class="line">            <span class="keyword">var</span> files = <span class="built_in">this</span>.files = obj.pushFile();</span><br><span class="line">            <span class="comment">//预读本地文件，如果是多文件，则会遍历。(不支持ie8/9)</span></span><br><span class="line">            obj.preview(<span class="function"><span class="keyword">function</span> (<span class="params">index, file, result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="string">&quot;#upload&quot;</span>).hasClass(<span class="string">&quot;layui-btn-disabled&quot;</span>)) &#123;</span><br><span class="line">                    $(<span class="string">&quot;#upload&quot;</span>).removeClass(<span class="string">&quot;layui-btn-disabled&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> tr = $([<span class="string">&#x27;&lt;tr id=&quot;upload-&#x27;</span> + index + <span class="string">&#x27;&quot;&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;td&gt;&#x27;</span> + file.name + <span class="string">&#x27;&lt;/td&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;td&gt;&#x27;</span> + (file.size / <span class="number">1024</span>).toFixed(<span class="number">1</span>) + <span class="string">&#x27;kb&lt;/td&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;td&gt;等待上传&lt;/td&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;td&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;button class=&quot;layui-btn layui-btn-min demo-reload layui-hide&quot;&gt;重传&lt;/button&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;button class=&quot;layui-btn layui-btn-min demo-delete layui-btn-danger&quot;&gt;删除&lt;/button&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;/td&gt;&#x27;</span></span><br><span class="line">                    , <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>].join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">                <span class="comment">// 单个重传</span></span><br><span class="line">                tr.find(<span class="string">&#x27;.demo-reload&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    obj.upload(index, file);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 删除</span></span><br><span class="line">                tr.find(<span class="string">&#x27;.demo-delete&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">delete</span> files[index];</span><br><span class="line">                    tr.remove();</span><br><span class="line">                    uploadListIns.config.elem.next()[<span class="number">0</span>].value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                list_view.append(tr);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        , <span class="attr">allDone</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#filePath&quot;</span>).val(array.toString());</span><br><span class="line">            $(<span class="string">&quot;#upload&quot;</span>).addClass(<span class="string">&quot;layui-btn-disabled&quot;</span>);</span><br><span class="line">            <span class="comment">// console.log(&quot;task form is &quot; + JSON.stringify(taskForm));</span></span><br><span class="line">            <span class="comment">// 文件全部上传完毕 执行生成task任务</span></span><br><span class="line">            uploadTaskForm(<span class="built_in">JSON</span>.stringify(taskForm));</span><br><span class="line">        &#125;</span><br><span class="line">        , <span class="attr">done</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res, index, upload</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//上传完毕回调</span></span><br><span class="line">            <span class="comment">// 每次回调存储回调文件信息</span></span><br><span class="line">            <span class="keyword">if</span> (res.data.svgFileName != <span class="string">&#x27;-1&#x27;</span>) &#123;</span><br><span class="line">                taskForm.svgFileName = res.data.svgFileName;</span><br><span class="line">                taskForm.svgFileId = res.data.svgFileId;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res.data.cimFileName != <span class="string">&#x27;-1&#x27;</span>) &#123;</span><br><span class="line">                taskForm.cimFileName = res.data.cimFileName;</span><br><span class="line">                taskForm.cimFileId = res.data.cimFileId;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res.code == <span class="number">0</span>) &#123;</span><br><span class="line">                array.push(res.filePath);</span><br><span class="line">                <span class="keyword">var</span> tr = list_view.find(<span class="string">&#x27;tr#upload-&#x27;</span> + index)</span><br><span class="line">                    , tds = tr.children();</span><br><span class="line">                tds.eq(<span class="number">2</span>).html(<span class="string">&#x27;&lt;span style=&quot;color:#5FB878;&quot;&gt;上传成功&lt;/span&gt;&#x27;</span>);</span><br><span class="line">                <span class="comment">// tds.eq(3).html(&#x27;&#x27;); //清空</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">delete</span> <span class="built_in">this</span>.files[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.error(index, upload);</span><br><span class="line">        &#125;</span><br><span class="line">        , <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index, upload</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//请求异常回调</span></span><br><span class="line">            <span class="keyword">var</span> tr = list_view.find(<span class="string">&#x27;tr#upload-&#x27;</span> + index)</span><br><span class="line">                , tds = tr.children();</span><br><span class="line">            tds.eq(<span class="number">2</span>).html(<span class="string">&#x27;&lt;span style=&quot;color:#FF5722;&quot;&gt;上传失败&lt;/span&gt;&#x27;</span>);</span><br><span class="line">            tds.eq(<span class="number">3</span>).find(<span class="string">&#x27;.demo-reload&#x27;</span>).removeClass(<span class="string">&#x27;layui-hide&#x27;</span>); <span class="comment">//显示重传</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h4><p>后端获取post方式负载的文件后将文件流压缩位字符流存入数据库即可，后台的mapper和service为正常操作不做展示，注意的事这是单文件接口，layui多次调用此接口实现多文件上传。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于前端使用的框架底层只支持单次文件上传，业务需求同时上传两个文件</span></span><br><span class="line"><span class="comment">     * 解决方案二：抽离task生成，前端配置alldone,完成后调用后台task接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;单次上传图模文件，svg和cim&quot;, notes = &quot;单次上传图模文件，svg和cim&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;GenerateTaskForm&gt; <span class="title">uploadGraphFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;所传文件为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 文件uuid</span></span><br><span class="line">        String fileId = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回前端的文件名</span></span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        GenerateTaskForm form = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将获取的文件名和文件内容存入数据库T-PW-files里</span></span><br><span class="line">            <span class="keyword">int</span> result = IGraphService.insertFileName(fileId, fileName, <span class="string">&quot;123&quot;</span>, ZipUtil.compress(file.getBytes()));</span><br><span class="line">            log.info(<span class="string">&quot;插入文件成功 result code:[&#123;&#125;], 文件名:[&#123;&#125;], uuid:[&#123;&#125;]&quot;</span>, result, fileName, fileId);</span><br><span class="line">            <span class="keyword">if</span> (result &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileName.toLowerCase().lastIndexOf(<span class="string">&quot;.svg&quot;</span>) != -<span class="number">1</span>)</span><br><span class="line">                    form = <span class="keyword">new</span> GenerateTaskForm(fileName, fileId, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (fileName.toLowerCase().lastIndexOf(<span class="string">&quot;.xml&quot;</span>) != -<span class="number">1</span>)</span><br><span class="line">                    form = <span class="keyword">new</span> GenerateTaskForm(<span class="string">&quot;-1&quot;</span>, <span class="string">&quot;-1&quot;</span>, fileName, fileId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取文件字节流失败 错误信息[&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, form);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LayUi</category>
      </categories>
      <tags>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>文本情感分析</title>
    <url>/2019/06/12/%E6%96%87%E6%9C%AC%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="情感分析"><a href="#情感分析" class="headerlink" title="情感分析"></a>情感分析</h3><span id="more"></span>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ol>
<li>pip install snownlp</li>
<li>pip install -U textblob</li>
<li>python -m textblob.download_corpora</li>
</ol>
<h4 id="分析英文"><a href="#分析英文" class="headerlink" title="分析英文"></a>分析英文</h4><ol>
<li>启动jupyter环境</li>
</ol>
<p><img src="/images/pasted-10.png" alt="upload successful"></p>
<h4 id="分析中文"><a href="#分析中文" class="headerlink" title="分析中文"></a>分析中文</h4><p><img src="/images/pasted-11.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>DataAnalysis</category>
      </categories>
      <tags>
        <tag>DataAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>日语</title>
    <url>/2021/03/23/%E6%97%A5%E8%AF%AD/</url>
    <content><![CDATA[<h2 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h2><span id="more"></span>

<h3 id="这个是-那个是"><a href="#这个是-那个是" class="headerlink" title="这个是 那个是"></a>这个是 那个是</h3><p>两者沟通情况下：</p>
<ul>
<li>これ 离说话人最近的</li>
<li>それ 离说话人远的</li>
<li>あれ 离两个说话人都远的</li>
</ul>
<p>变为连体次 即：这个xxx，那个xxx</p>
<ul>
<li>この</li>
<li>あの</li>
<li>その</li>
</ul>
<blockquote>
<blockquote>
<p>eg: <code>この　カメァわ　スミスさんのです</code> 这个相机是史密斯先生的</p>
</blockquote>
</blockquote>
<h3 id="谁-这是谁的伞"><a href="#谁-这是谁的伞" class="headerlink" title="谁 这是谁的伞"></a>谁 这是谁的伞</h3><p>だれ</p>
<blockquote>
<blockquote>
<p>eg: <code>あれわ　だれの　傘ですか</code> 这是谁的伞</p>
</blockquote>
</blockquote>
<h3 id="表示否定-这不是而是"><a href="#表示否定-这不是而是" class="headerlink" title="表示否定 这不是而是"></a>表示否定 这不是而是</h3><p>いいえ　それわ　ｘｘｘ　ありません．ｘｘｘです</p>
<p>不这不是xxx 而是xxx</p>
<blockquote>
<blockquote>
<p>日常用法：直接回答　それわ　ｘｘｘです</p>
</blockquote>
</blockquote>
<h3 id="哪个-我的包是哪个？"><a href="#哪个-我的包是哪个？" class="headerlink" title="哪个  我的包是哪个？"></a>哪个  我的包是哪个？</h3><p>多个物体选一个 至少三个才能用，如果是两个里面选：どちら</p>
<p>どれ</p>
<p>eg: <code>森さんの　かばんわ　どれですか</code>　森先生的包是哪个</p>
<p>eg: <code>その　ノートわ　だれのですか</code>　那个笔是谁的</p>
<h3 id="敬语"><a href="#敬语" class="headerlink" title="敬语"></a>敬语</h3><p>那个人：　このひど</p>
<p>那位敬语：このかた</p>
<p>谁：だれ</p>
<p>谁（敬语）：どなた</p>
<h3 id="多大年纪"><a href="#多大年纪" class="headerlink" title="多大年纪"></a>多大年纪</h3><p>多大年纪：いくつ</p>
<p>美化语： おいくつ</p>
<p>问小孩：なんさい</p>
]]></content>
      <categories>
        <category>日语</category>
      </categories>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>测试日志--压力测试</title>
    <url>/2019/05/24/%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97-%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h4 id="Jmeter压力测试"><a href="#Jmeter压力测试" class="headerlink" title="Jmeter压力测试"></a>Jmeter压力测试</h4><p>这几天有压力测试任务交给我，终于从scriptBoy转职成了testBoy。<br>花了一天时间看了下，选用了JMeter测试工具用作压力测试</p>
<span id="more"></span>

<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol>
<li><p>可以从各个地方下载到，开源免费的，由于使用java所以得把java下载配置好先。</p>
</li>
<li><p>配置JMETER_HOME环境，就是主目录</p>
</li>
<li><p>Path里添加下bin的目录，之后从cmd启动</p>
</li>
<li><p>打开cmd输入jmeter或者找到bin下的jmeter.bat打开</p>
</li>
<li><p>class path添加</p>
<pre><code> %JMETER_HOME%/lib/ext/ApacheJMeter_core.jar;%JMETER_HOME%/lib/jorphan.jar;%JMETER_HOME%/lib/logkit-2.0.jar
</code></pre>
</li>
</ol>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol>
<li><p>先下载个plugin manager:下载jar包到/lib/ext下重启即可</p>
</li>
<li><p>插件里面搜索下载jpgc<br><img src="/images/pasted-4.png" alt="upload successful"></p>
</li>
<li><p>下载后即可创建Stepping Thread测试组，这个是用于控制模拟用户进入行为的。</p>
</li>
</ol>
<p><img src="/images/pasted-5.png" alt="upload successful"></p>
<ol start="4">
<li><p>录制脚本，选择使用chrome脚本录制，安装blazemeter插件，此插件专门记录所有的用户操作转为jml。<br><img src="/images/pasted-6.png" alt="upload successful"></p>
</li>
<li><p>录制脚本结束后下载下来，使用jmeter打开，做进一步的调试，比如添加listener（结果报告）等</p>
</li>
<li><p>最后开始压力测试，注意的是不要使用GUI测试，使用命令行：打开cmd-》输入：<br><img src="/images/pasted-7.png" alt="upload successful"></p>
</li>
<li><p>生成测试报告</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>熔断器Hystrix</title>
    <url>/2019/04/09/%E7%86%94%E6%96%AD%E5%99%A8Hystrix/</url>
    <content><![CDATA[<h3 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h3><p>在分布式系统中，服务与服务之间的依赖错综复杂， 一种不可避免的情况就是某些服务会 出现故障，导致依赖于它们的其他服务出现远程调度的线程阻塞。 Hystrix 是 Netflix 公司开 源的一个项目，它提供了熔断器功能，能够阻止分布式系统中出现联动故障。 Hystrix 是通过 隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高了整个分布式系统 的弹性。</p>
<span id="more"></span>

<p>某个服务的单个点的请求故障会导致用户的请求处于阻塞状态，最终的结果就是整个服务 的线程资源消耗殆尽。由于服务的依赖性，会导致依赖于该故障服务的其他服务也处于线程阻 塞状态，最终导致这些服务的线程资源消耗殆尽， 直到不可用，从而导致整个问服务系统都不 可用，即雪崩效应。<br>为了防止雪崩效应，因而产生了熔断器模型。 Hystrix 是在业界表现非常好的一个熔断器 模型实现的开源组件，它是 Spring Cloud 组件不可缺少的一部分。</p>
<h4 id="在RestTemplate和Ribbon上使用熔断器"><a href="#在RestTemplate和Ribbon上使用熔断器" class="headerlink" title="在RestTemplate和Ribbon上使用熔断器"></a>在RestTemplate和Ribbon上使用熔断器</h4><p>一下配置在eureka-client-ribbon基础上配置</p>
<p>首先在工程的 porn 文件中引用 Hystrix 的起步依赖 spring-cloud-starter-hystrix</p>
<p>然后在 Spring Boot 的启动类 EurekaRibbonClientApplication 加上＠EnableHystrix 注解开启<br>Hystrix 的熔断器功能</p>
<p>修改 RibbonService 的代码， 在 hiO方法上加＠HystrixCommand 注解。有了@HystrixCommand<br>注解， hi（）方法就启用 Hystrix 熔断器的功能， 其中 ， fallbackMethod 为处理回退（fallback）逻 辑的方法。在本例中， 直接返回了一个字符串。在熔断器打开的状态下，会执行 fallback 逻辑。 fall back 的逻辑最好是返回一些静态的字符串，不需要处理复杂的逻辑，也不需要远程调度其 他服务，这样方便执行快速失败，释放线程资源。 如果一定要在 fallback 逻辑中远程调度其他 服务，最好在远程调度其他服务时，也加上熔断器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eureka.eurekaclientribbon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;hiError&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://eureka-client/hello?name=&quot;</span> + name, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiError</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>+name+<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino开发-入门配置</title>
    <url>/2021/11/17/Arduino%E5%BC%80%E5%8F%91-%E5%85%A5%E9%97%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Arduino开发-入门配置"><a href="#Arduino开发-入门配置" class="headerlink" title="Arduino开发 入门配置"></a>Arduino开发 入门配置</h1><blockquote>
<p>单片机开发，得到了一块ESP8266芯片，可以选择micropython或者arduino的系统环境，虽然micropython使用python作为开发语言，简单很多，但是生态和库没有arduino丰富，这里选择了烧录arduino环境到芯片</p>
</blockquote>
<span id="more"></span>

<h2 id="下载arduino的开发ide"><a href="#下载arduino的开发ide" class="headerlink" title="下载arduino的开发ide"></a>下载arduino的开发ide</h2><blockquote>
<p>下载地址：<a href="https://www.arduino.cc/">https://www.arduino.cc/</a></p>
<p>如果和我一样使用linux系统，可以通过版本自带管理器下载，以我的archlinux为例：<code>pacman -S arduino</code></p>
</blockquote>
<h2 id="配置开发板"><a href="#配置开发板" class="headerlink" title="配置开发板"></a>配置开发板</h2><blockquote>
<p>打开file -&gt; preferences </p>
<p>在开发板管理器网址填（Additional Boards Manager URLs）：<code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p>
</blockquote>
<blockquote>
<p>重启IDE环境</p>
<p>找到tools下 开发板选项-&gt;开发板管理器 (Boards Manager)</p>
<p>搜索esp8266，点击下载即可，完成后可选择esp8266的板子了</p>
</blockquote>
<p><img src="/images/pasted-187.png" alt="upload successful"></p>
<p><img src="/images/pasted-188.png" alt="upload successful"> </p>
<blockquote>
<p>插入esp开发板后，这时候会多一个串行端口，点击tools下的port选项选择该端口即可使用实例了</p>
<p>关于端口，如果是在windows下可以直接用设备管理器查看端口，如果是linux下需要<code>sudo chmod +x /dev/ttyUSB0</code> 给新设备赋予权限</p>
</blockquote>
<h2 id="VSC下开发"><a href="#VSC下开发" class="headerlink" title="VSC下开发"></a>VSC下开发</h2><blockquote>
<p>这里更推荐使用VSC替代arduino ide做开发，VSC插件丰富，代码校验等</p>
<p>在VSC下安装以下几个插件</p>
</blockquote>
<p><img src="/images/pasted-189.png" alt="upload successful"></p>
<blockquote>
<p>安装完毕后可以打开<code>.ino</code>的arduino文件，看到如下所示的状态栏，可以快速选择板子类型，开发板端口和打开串口监听</p>
<p>也可以使用F1呼出命令栏，输入arduino，可以配置实例，管理库等</p>
</blockquote>
<p><img src="/images/pasted-190.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux 安装 + 大部分的软件配置</title>
    <url>/2022/03/28/ArchLinux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="ArchLinux安装配置"><a href="#ArchLinux安装配置" class="headerlink" title="ArchLinux安装配置"></a>ArchLinux安装配置</h1><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><p>我的是双系统的配置，在安装之前划分50GB的磁盘空间</p>
<blockquote>
<ol>
<li>去官网下载镜像，制作usb启动盘</li>
<li>开机进入usb的livecd内</li>
</ol>
</blockquote>
<span id="more"></span>

<h3 id="联网设置"><a href="#联网设置" class="headerlink" title="联网设置"></a>联网设置</h3><p>用的笔记本 所以使用wlan联网，arch的livecd环境里提供了iwctl命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iwctl #进入</span><br><span class="line">device list #查看所有网卡设备 这里我只有wlan0设备</span><br><span class="line">station wlan0 get-networks #获取wifi链接</span><br><span class="line">station wlan0 connect wifi名 # 会提示输入密码，输入即可</span><br><span class="line">exit #退出</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>


<h3 id="划分分区"><a href="#划分分区" class="headerlink" title="划分分区"></a>划分分区</h3><blockquote>
<p>划分扇区，按照arch的规定，至少要一个swap分区（否则无法休眠）和一个主分区以及boot分区（boot分区内存放了esp信息）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsblk #查看分区信息</span><br><span class="line">fdisk -l # 查看分区信息</span><br><span class="line">fdisk -l /dev/nvme0n1 # 查看使用的这块硬盘的分区信息</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果在windows中压缩出了50GB，且建立了扇区的话这里要删除这个扇区</span></span><br><span class="line">fdisk /dev/nvme0n1  # 进入管理扇区模式</span><br><span class="line"></span><br><span class="line">p #打印所有分区信息</span><br><span class="line">d #删除分区（我这里删除8号分区50GB的那个，之前在windows下建立了分区）</span><br><span class="line">n #新建swap分区 （提示输入分区头地址信息，回车即可，提示分配大小，输入：+2GB，回车即可）</span><br><span class="line">n #新建boot分区 （提示输入分区头地址信息，回车即可，提示分配大小，输入：+512MB，回车即可）</span><br><span class="line">n #新建主分区 全部回车即可</span><br><span class="line">t #改变两个分区类型（提示数字，选择刚刚建立的两个分区，修改EFI类型和swap类型）</span><br><span class="line">w #写入分区信息 </span><br></pre></td></tr></table></figure>
<blockquote>
<p>新的分区会有新的名字，fdisk -l /dev/nvme0n1 会看到新的三个分区信息 可能是这样的命名：nvme0n1p6（512MB的efi分区） , nvme0n1p7（2GB的swap分区） , nvme0n1p8（47GB的主分区）</p>
</blockquote>
<blockquote>
<p>格式化分区：</p>
<ul>
<li>mkfs.ext4 /dev/nvme0n1p8</li>
<li>mkswap /dev/nvme0n1p7</li>
<li>mkfs.fat -F 32 /dev/nvme0n1p6</li>
</ul>
</blockquote>
<blockquote>
<p>启动交换区：swapon /dev/nvme0n1p7</p>
</blockquote>
<blockquote>
<p>挂载分区：</p>
<ul>
<li>mount /dev/nvme0n1p8 /mnt # 这里挂载到livecd的mnt目录下，因为安装的资料会拷贝进去</li>
<li>mount /dev/nvme0n1p6 /mnt/boot #若无boot目录 mkdir /mnt/boot即可</li>
</ul>
</blockquote>
<h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>pacstrap /mnt base linux linux-firmware  # 开始正式拷贝内核信息和启动条码到主分区和esp分区</p>
<h4 id="2-自动挂载"><a href="#2-自动挂载" class="headerlink" title="2. 自动挂载"></a>2. 自动挂载</h4><p>安装完成后执行：<code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab # 生成自动挂载信息</code>，有了这个文件，每次系统启动就会读取并自动挂载</p>
<h4 id="3-切换到安装好的系统：arch-chroot-mnt"><a href="#3-切换到安装好的系统：arch-chroot-mnt" class="headerlink" title="3. 切换到安装好的系统：arch-chroot /mnt"></a>3. 切换到安装好的系统：arch-chroot /mnt</h4><h4 id="4-配置时区"><a href="#4-配置时区" class="headerlink" title="4. 配置时区"></a>4. 配置时区</h4><p><code>ln -sf /usr/share/zoneinfo/Region/City /etc/localtime</code></p>
<p><code>hwclock --systohc</code></p>
<h4 id="5-配置系统语言"><a href="#5-配置系统语言" class="headerlink" title="5. 配置系统语言"></a>5. 配置系统语言</h4><p>编辑 <code>/etc/locale.gen</code> 取消这个注释 <code>en_US.UTF-8 UTF-8</code></p>
<p>最后生成语言信息 执行： <code>locale-gen</code> </p>
<p>然后编辑<code>/etc/locale.conf</code>文件 写入：<code>LANG=en_US.UTF-8</code></p>
<h4 id="6-写入hostname信息"><a href="#6-写入hostname信息" class="headerlink" title="6. 写入hostname信息"></a>6. 写入hostname信息</h4><p><code>vim /etc/hostname</code>内容可随意</p>
<h4 id="7-生成Initramfs（如果使用了refind需要生成）"><a href="#7-生成Initramfs（如果使用了refind需要生成）" class="headerlink" title="7. 生成Initramfs（如果使用了refind需要生成）"></a>7. 生成Initramfs（如果使用了refind需要生成）</h4><p><code>mkinitcpio -P</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#initramfs 原理：</span><br><span class="line">Linux系统启动时使用initramfs (initram file system), initramfs可以在启动早期提供一个用户态环境，借助它可以完成一些内核在启动阶段不易完成的工作。当然initramfs是可选的，Linux中的内核编译选项默认开启initrd。在下面的示例情况中你可能要考虑用initramfs。</span><br><span class="line"></span><br><span class="line">加载模块，比如第三方driver</span><br><span class="line">定制化启动过程 (比如打印welcome message等)</span><br><span class="line">制作一个非常小的rescue shell</span><br><span class="line">任何kernel不能做的，但在用户态可以做的 (比如执行某些命令)</span><br><span class="line">一个initramfs至少要包含一个文件，文件名为/init。内核将这个文件执行起来的进程作为main init进程(pid 1)。当内核挂载initramfs后，文件系统的根分区还没有被mount, 这意味着你不能访问文件系统中的任何文件。如果你需要一个shell，必须把shell打包到initramfs中，如果你需要一个简单的工具，比如ls, 你也必须把它和它依赖的库或者模块打包到initramfs中。总之，initramfas是一个完全独立运行的体系。</span><br></pre></td></tr></table></figure>

<h4 id="8-修改密码-添加用户"><a href="#8-修改密码-添加用户" class="headerlink" title="8. 修改密码 添加用户"></a>8. 修改密码 添加用户</h4><p><code>passwd</code> # 修改root密码</p>
<p><code>useradd -m -G wheel tr</code> # 创建wheel用户组下的用户tr</p>
<p><code>passwd tr</code>#修改密码</p>
<p>修改文件：<code>/etc/sudoers</code>，取消注释：<code>%wheel ALl=(ALL:ALL) ALL</code>，这样wheel组下的除root用户的其他用户才能执行任何命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-m 创建主目录</span><br><span class="line">-G wheel 指定用户组为wheel（管理员组，如果不是这个组的用户，无法通过su命令成为管理员）</span><br></pre></td></tr></table></figure>

<h4 id="9-1-配置网络源"><a href="#9-1-配置网络源" class="headerlink" title="9.1 配置网络源"></a>9.1 配置网络源</h4><p>镜像配置：<code>vim /etc/pacman.d/mirrorlist</code> </p>
<p>添加内容<code>Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch </code></p>
<p>cn源配置：<code>vim /etc/pacman.conf </code></p>
<p>添加内容：<code>[archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch </code></p>
<p>导入key：<code>pacman -S archlinuxcn-keyring</code></p>
<p>更新仓库：<code>pacman -Syy</code></p>
<h4 id="9-2-安装基本的工具包"><a href="#9-2-安装基本的工具包" class="headerlink" title="9.2 安装基本的工具包"></a>9.2 安装基本的工具包</h4><p>安装一些常用的网络管理工具和编辑工具等，这里面还安装了grub + os-prober，如果不用grub启动可以换成其他boot loader 如rEFind</p>
<p><code>pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo wget vim</code></p>
<h4 id="10-安装配置-boot-loader"><a href="#10-安装配置-boot-loader" class="headerlink" title="10.安装配置 boot loader"></a>10.安装配置 boot loader</h4><p>如果你是intel的cpu，需要安装intel的微码文件：<code>pacman -S intel-ucode</code><br>如果是amd <code>pacman -S amd-ucode</code></p>
<p>推荐使用rEFind，美观多了，使用它之前确保生成了Initramfs,也就是第七步内容</p>
<p>执行<code>pacman -S refind</code> , <code>refind-install</code></p>
<p>执行完后可以查看boot目录是否写入了配置</p>
<h4 id="11-rEFind配置"><a href="#11-rEFind配置" class="headerlink" title="11. rEFind配置"></a>11. rEFind配置</h4><p>refind所有配置都在esp分区也就是boot目录：<code>ls /boot/</code></p>
<p>可以看到refind_linux.conf配置文件，里面写了不同情况下的启动，里面的id是分区id，分区id有很多种，uuid，partuuid，id等，通过命令看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /dev/disk/by-</span><br><span class="line">by-id/        by-label/     by-partlabel/ by-partuuid/  by-path/      by-uuid/</span><br></pre></td></tr></table></figure>

<p>rEFind真正的启动配置：<code>/boot/EFI/refind/refind.conf</code>，这个文件内描述了启动条目包括启动的图标，loader等</p>
<h4 id="12-识别windows问题"><a href="#12-识别windows问题" class="headerlink" title="12. 识别windows问题"></a>12. 识别windows问题</h4><p>不管是用grub还是rEFind，都不需要我们手动执行操作，系统应该可以自动识别，因为使用了UEFI的启动方式，当机器开机时，不再读取MBR内容，而是读取磁盘内的ESP分区，找到ESP的分区启动条目后显示在启动菜单内。</p>
<p>安装完rEFind或者grub后，会在UEFI的启动项内新增启动条目，开机进入UEFI可以看到（Acer是f2进入bios，f12进入UEFI启动序列）</p>
<p>如果使用rEFind启动但是没有windows的图标（不太可能），可以先进入linux系统，手动挂载windows的ESP分区（很小 只有100<br>，里面有个Microsoft目录），把目录的Microsoft目录拷贝到<code>/boot/EFI/</code>下</p>
<h4 id="13-完成安装"><a href="#13-完成安装" class="headerlink" title="13. 完成安装"></a>13. 完成安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit #退出系统</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h3 id="安装后的配置"><a href="#安装后的配置" class="headerlink" title="安装后的配置"></a>安装后的配置</h3><p>大体配置按照文档来：<a href="https://wiki.archlinux.org/title/General_recommendations">安装后的推荐配置</a></p>
<p>开机启动进入新系统</p>
<h4 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h4><p>时间快了8个小时，这个是因为双系统下，linux认为电脑时钟就是UTC时间，时区是上海，所以+了8小时。但是windwos下认为电脑时钟（Bios时间）是本地时间。这个问题可以通过把时区设置为+0或者使用网络时间解决。</p>
<p>timedatectl #查看本机时间</p>
<h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><p>按照archlinux官方文档来：<a href="https://wiki.archlinux.org/title/NetworkManager_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">网络配置</a></p>
<p><code>systemctl enable --now NetworkManager</code> 自动启动网络管理工具</p>
<p><code>nmtui</code> 设置wifi</p>
<h4 id="显卡启动（集显就别操心了）"><a href="#显卡启动（集显就别操心了）" class="headerlink" title="显卡启动（集显就别操心了）"></a>显卡启动（集显就别操心了）</h4><p>NVIDIA独显驱动：pacman -S nvidia nvidia-utils</p>
<h4 id="图形界面配置"><a href="#图形界面配置" class="headerlink" title="图形界面配置"></a>图形界面配置</h4><p>显示服务器有Xorg 和 Wayland，推荐Xorg：<code>pacman -S xorg</code></p>
<p>显示管理器有gdm(Gnome),sddm(Kde)的，我偏爱Gnome环境 <code>pacman -S gdm</code> <code>systemctl enable gdm</code></p>
<p>桌面环境也是Gnome：<code>pacman -S gnome</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xorg</span><br><span class="line">概述</span><br><span class="line">xorg是x11的一个实现，而x window system是一个C/S结构的程序，xorg只是提供一个X server，负责底层的操作。当你运行一个程序的时候，这个程序会链接到X server上，由X server接收键盘鼠标输入和负责屏幕输出窗口的移动、窗口标题的样式等。</span><br><span class="line"></span><br><span class="line">X window 是由X server 和 X client组成，X server 和 X client之间的通信是通过 X 协议。</span><br><span class="line"></span><br><span class="line">x server</span><br><span class="line">仅仅负责鼠标、键盘、显卡、显示器这些输入输出部件。由于硬件厂商很多，所以x server不能自动识别出所有需要的参数，如果识别不出来，那么就需要编辑一下/etc/X11/xorg.conf文件进行配置。</span><br><span class="line"></span><br><span class="line">x client</span><br><span class="line">负责处理程序的运行。比如单击一下gvim图标，x server会告诉x client用户刚才移动鼠标到什么位置并做了什么操作，x client收到后会识别操作并作出相应的反馈，打开gvim程序，然后x client让x server在显示器上显示一个gvim的画面。</span><br><span class="line"></span><br><span class="line">xorg与桌面环境的关系</span><br><span class="line">先介绍几个概念：窗口管理器、显示管理器和文件管理器</span><br><span class="line"></span><br><span class="line">窗口管理器则是为了实现一个屏幕上显示多个X程序,实现调整程序大小,标题栏,最大化,最小化,关闭按钮,虚拟桌面这些功能。如果没有窗口管理器，那么一次只能运行一个GUI程序,而且分辨率锁死,显然很不符合使用习惯。窗口管理器往往集成在常见的桌面环境中，比如Xfce使用的窗口管理器为Xfwm,此外还有Gnome的mutter,KDE的Kwin等。</span><br><span class="line"></span><br><span class="line">显示管理器（display manager）,用于开机后显示登陆界面,并启动窗口管理器等X组件.没有显示管理器,Linux开机会显示命令行登陆界面,需要使用命令行登陆后手动启动Xserver和窗口管理器才能显示GUI,显示管理器自动的完成这些工作.常见的有GDM、LightDM、DDM。</span><br></pre></td></tr></table></figure>

<h4 id="yaourt配置"><a href="#yaourt配置" class="headerlink" title="yaourt配置"></a>yaourt配置</h4><p>需要添加国内源才能用<code>pacman -S yaourt</code></p>
<h4 id="中文字体配置"><a href="#中文字体配置" class="headerlink" title="中文字体配置"></a>中文字体配置</h4><p>字体可以随便下载，但是下载的字体如果不选择默认字体（不编辑~/.config/fontconfig/fonts.conf）的话，linux渲染对的字体可能来自不同字体集合，导致有的字体粗，有的字体细。可以通过下载fontweak这个gui文件可视化的编辑，更加方便<code>yaourt fontweak</code></p>
<p>全部字体可以在wiki内看到：<a href="https://wiki.archlinux.org/title/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E4%B8%AD%E6%96%87%E5%AD%97">字体</a></p>
<p>这里推荐win10的字体感觉还蛮好看的</p>
<p><code>yaourt -S ttf-ms-win10-zh_cn</code></p>
<h4 id="手动安装中文字体（可选）"><a href="#手动安装中文字体（可选）" class="headerlink" title="手动安装中文字体（可选）"></a>手动安装中文字体（可选）</h4><p>如果字体不好安装，仓库中下载失败，可以手动安装win10字体（从win10系统中拷贝过来，可以使用<br>盘）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">nvme0n1     259:0    0 476.9G  0 disk </span><br><span class="line">├─nvme0n1p1 259:1    0   100M  0 part </span><br><span class="line">├─nvme0n1p2 259:2    0    16M  0 part </span><br><span class="line">├─nvme0n1p3 259:3    0 237.4G  0 part </span><br><span class="line">├─nvme0n1p4 259:4    0     1G  0 part </span><br><span class="line">├─nvme0n1p5 259:5    0 188.2G  0 part </span><br><span class="line">├─nvme0n1p6 259:6    0     2G  0 part [SWAP]</span><br><span class="line">├─nvme0n1p7 259:7    0   512M  0 part /boot</span><br><span class="line">└─nvme0n1p8 259:8    0  47.7G  0 part /</span><br><span class="line">➜  ~ mount /dev/nvme0n1p3 ~/ms</span><br><span class="line">mount: /home/tr/ms: must be superuser to use mount.</span><br><span class="line">➜  ~ sudo mount /dev/nvme0n1p3 ~/ms</span><br><span class="line"></span><br><span class="line">[root@tr tr]# mkdir /usr/share/fonts/windows</span><br><span class="line">[root@tr tr]# cp ms/Windows/Fonts/* /usr/share/fonts/windows/</span><br><span class="line">[root@tr tr]# chmod -R 777 /usr/share/fonts/windows</span><br><span class="line">[root@tr tr]# fc-cache -vf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文泉驿中文（推荐）"><a href="#文泉驿中文（推荐）" class="headerlink" title="文泉驿中文（推荐）"></a>文泉驿中文（推荐）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo pacman -S wqy-microhei wqy-bitmapfont wqy-zenhei wqy-microhei-lite adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</span><br><span class="line">➜  ~ sudo pacman -S ttf-dejavu noto-fonts noto-fonts-extra noto-fonts-emoji noto-fonts-cjk</span><br><span class="line">➜  ~ vim .config/fontconfig/fonts.conf </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>fonts.conf 内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;fontconfig&gt;</span><br><span class="line">  &lt;dir&gt;~/.fonts&lt;/dir&gt;</span><br><span class="line">  &lt;match&gt;</span><br><span class="line">    &lt;test name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;sans-serif&lt;/string&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;edit binding=&quot;strong&quot; mode=&quot;prepend&quot; name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Zen Hei Sharp&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Zen Hei&lt;/string&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match&gt;</span><br><span class="line">    &lt;test name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;serif&lt;/string&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;edit binding=&quot;strong&quot; mode=&quot;prepend&quot; name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Micro Hei Light&lt;/string&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match&gt;</span><br><span class="line">    &lt;test name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;monospace&lt;/string&gt;</span><br><span class="line">    &lt;/test&gt;</span><br><span class="line">    &lt;edit binding=&quot;strong&quot; mode=&quot;prepend&quot; name=&quot;family&quot;&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Micro Hei Mono&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;WenQuanYi Zen Hei Mono&lt;/string&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;antialias&quot;&gt;</span><br><span class="line">      &lt;bool&gt;true&lt;/bool&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;hinting&quot;&gt;</span><br><span class="line">      &lt;bool&gt;true&lt;/bool&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;hintstyle&quot;&gt;</span><br><span class="line">      &lt;const&gt;hintfull&lt;/const&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;rgba&quot;&gt;</span><br><span class="line">      &lt;const&gt;none&lt;/const&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;lcdfilter&quot;&gt;</span><br><span class="line">      &lt;const&gt;lcddefault&lt;/const&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">  &lt;match target=&quot;font&quot;&gt;</span><br><span class="line">    &lt;edit mode=&quot;assign&quot; name=&quot;embeddedbitmap&quot;&gt;</span><br><span class="line">      &lt;bool&gt;false&lt;/bool&gt;</span><br><span class="line">    &lt;/edit&gt;</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">&lt;/fontconfig&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="搜狗拼音"><a href="#搜狗拼音" class="headerlink" title="搜狗拼音"></a>搜狗拼音</h3><p>安装拼音管理工具：<code>pacman -S fcitx-im fcitx-configtool</code></p>
<p>修改配置文件：<code>vim /etc/profile（全局配置）</code>内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fcitx</span></span><br><span class="line">export XIM=fcitx</span><br><span class="line">export XIM_PROGRAM=fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure>
<p>安装搜狗拼音：<code>yaourt fcitx-sogoupinyin</code>，注销后登录，可以看到fcitx的图形化管理工具，在input method configuration内选择<code>+</code>添加搜狗拼音即可,注销后登录即可</p>
<h3 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h3><p>yaourt -S google-chrome </p>
<p>需要用非root用户打开</p>
<h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h3><p><a href="https://github.com/ohmyzsh/ohmyzsh">oh my zsh</a></p>
<p>安装zsh : <code>pacman -S zsh</code></p>
<p>安装oh my zsh并安装：<code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code> </p>
<p>配置文件在：~/.zshrc，可以在里面编辑主题和插件</p>
<h4 id="配置箭头主题的zsh-和-vim"><a href="#配置箭头主题的zsh-和-vim" class="headerlink" title="配置箭头主题的zsh 和 vim"></a>配置箭头主题的zsh 和 vim</h4><h5 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h5><p>powerline字体和插件配置都可以从wiki找到：<a href="https://wiki.archlinux.org/title/Powerline">powerline</a></p>
<p>安装power line字体</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span></span></span><br><span class="line">git clone https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> install</span></span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> clean-up a bit</span></span><br><span class="line">cd ..</span><br><span class="line">rm -rf fonts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置power line字体到oh my zsh 界面：vim ~/.zshrc追加：</span></span><br><span class="line"></span><br><span class="line">powerline-daemon -q</span><br><span class="line">. /usr/share/powerline/bindings/zsh/powerline.zsh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> ~/.zshrc生效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改配置文件找到ZSH_THEME,修改里面值为agnoster，<code>source ~/.zshrc</code>生效</p>
<h5 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h5><p>安装power line status 状态栏 用于vim等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> pacman -S powerline-vim  #安装vim插件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装vim插件管理器</span></span><br><span class="line">sh -c &#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>编辑~/.vimrc 写入以下内容</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; Plugins will be downloaded under the specified directory.</span><br><span class="line">call plug#begin(has(&#x27;nvim&#x27;) ? stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27; : &#x27;~/.vim/plugged&#x27;)</span><br><span class="line"></span><br><span class="line">&quot; Declare the list of plugins.</span><br><span class="line">Plug &#x27;tpope/vim-sensible&#x27;</span><br><span class="line">Plug &#x27;junegunn/seoul256.vim&#x27;</span><br><span class="line">set rtp+=/usr/share/powerline/bindings/vim</span><br><span class="line"></span><br><span class="line">&quot; List ends here. Plugins become visible to Vim after this call.</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>vim 打开vim 执行 ：PlugInstall</p>
</blockquote>
<h4 id="配置zsh的插件zsh-autosuggestions"><a href="#配置zsh的插件zsh-autosuggestions" class="headerlink" title="配置zsh的插件zsh-autosuggestions"></a>配置zsh的插件zsh-autosuggestions</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Clone this repository into <span class="variable">$ZSH_CUSTOM</span>/plugins (by default ~/.oh-my-zsh/custom/plugins)</span></span><br><span class="line"></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta">#</span><span class="bash"> Add the plugin to the list of plugins <span class="keyword">for</span> Oh My Zsh to load (inside ~/.zshrc):</span></span><br><span class="line"></span><br><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>source ~/.zshrc 生效配置</p>
<p>默认补全使用右箭头，自动补全可以使用逗号，编辑 ~/.zshrc 写入如下配置即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindkey &#x27;,&#x27; autosuggest-accept</span><br></pre></td></tr></table></figure>

<h4 id="配置zsh插件-z"><a href="#配置zsh插件-z" class="headerlink" title="配置zsh插件 z"></a>配置zsh插件 z</h4><p>类似 autojump</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    z</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="安装配置gnome桌面插件"><a href="#安装配置gnome桌面插件" class="headerlink" title="安装配置gnome桌面插件"></a>安装配置gnome桌面插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://aur.archlinux.org/chrome-gnome-shell.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> chrome-gnome-shell</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> makepkg -si</span></span><br></pre></td></tr></table></figure>

<p>安装好后可以在软件列表里看到 extensions这个GUI软件</p>
<p>然后就可以登录这个网站下载各种好玩的插件了：<a href="https://extensions.gnome.org/">gnome插件</a></p>
<p>比如截图插件，可以修改QQ的快捷键</p>
<p><img src="/images/pasted-139.png" alt="upload successful"></p>
<p><img src="/images/pasted-140.png" alt="upload successful"></p>
<h4 id="强烈推荐的插件"><a href="#强烈推荐的插件" class="headerlink" title="强烈推荐的插件"></a>强烈推荐的插件</h4><p>ddterm ：最好用的drop down terminal</p>
<h3 id="安装aria2下载器"><a href="#安装aria2下载器" class="headerlink" title="安装aria2下载器"></a>安装aria2下载器</h3><p>安装下载器：<code>pacman -S aria2</code></p>
<p>安装pip工具，因为系统自带了python3，而aira的gui工具需要pip所以下载<code>yaourt -S python-pip</code></p>
<p>安装前端工具：<code>sudo pacman -S persepolis</code></p>
<p>开始菜单里就有了，点开即用</p>
<h3 id="安装clash"><a href="#安装clash" class="headerlink" title="安装clash"></a>安装clash</h3><p>直接下载下来解压缩运行就行了<a href="https://github.com/Fndroid/clash_for_windows_pkg">clash gui</a></p>
<p>执行 <code>/opt/clash/cfw</code></p>
<p>系统配置下手动开启vpn的配置：</p>
<p><img src="/images/pasted-141.png" alt="upload successful"></p>
<p>如果觉得gui碍事，可以使用命令行的 参考这篇博客 <a href="http://www.manongjc.com/detail/27-guujywyvgwvhqly.html">clash 配置</a></p>
<h3 id="安装钉钉"><a href="#安装钉钉" class="headerlink" title="安装钉钉"></a>安装钉钉</h3><p>yaourt dingtalk</p>
<h3 id="安装vpn"><a href="#安装vpn" class="headerlink" title="安装vpn"></a>安装vpn</h3><p>openvpn,用来链接公司的局域网开发：<code>pacman -S openvpn</code>，这是个命令行，界面下面两个</p>
<p>安装l2tp隧道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S networkmanager-l2tp strongswan  </span><br><span class="line">systemctl start strongswan.service </span><br></pre></td></tr></table></figure>

<h4 id="eovpn界面"><a href="#eovpn界面" class="headerlink" title="eovpn界面"></a>eovpn界面</h4><p>安装eovpn:对应的GUI界面，之前需要安装Flatpak，这是一个包管理器，最大的好处是依赖可以隔离，下载的软件也需要这个</p>
<ol>
<li><code>sudo pacman -S flatpak</code> 安装 flatpak</li>
<li><code>yaourt -S eovpn</code></li>
<li><a href="https://github.com/jkotra/eOVPN">去github上下载对应的flatpak包</a>点击flatpak图标就下载了</li>
<li>flatpak install flathub com.github.jkotra.eovpn # 安装</li>
<li>flatpak run com.github.jkotra.eovpn # 执行</li>
</ol>
<h4 id="networkmanager-openvpn界面"><a href="#networkmanager-openvpn界面" class="headerlink" title="networkmanager-openvpn界面"></a>networkmanager-openvpn界面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S networkmanager-openvpn    </span><br></pre></td></tr></table></figure>
<p>在vpn上选择+号，即可配置l2tp隧道了</p>
<p><img src="/images/pasted-143.png" alt="upload successful"></p>
<p><img src="/images/pasted-147.png" alt="upload successful"></p>
<p><img src="/images/pasted-146.png" alt="upload successful"></p>
<p><img src="/images/pasted-148.png" alt="upload successful"></p>
<p>链接成功，可以干活了</p>
<h3 id="redis-desktop-manager"><a href="#redis-desktop-manager" class="headerlink" title="redis desktop manager"></a>redis desktop manager</h3><p><a href="https://snapcraft.io/redis-desktop-manager">官网</a></p>
<ol>
<li>下载snap ： <code>pacman -S snapd</code></li>
<li>启动： <code>systemctl start snapd.socket</code></li>
<li>下载：<code>sudo snap install redis-desktop-manager</code></li>
<li>链接snap仓库：<code>sudo ln -s /var/lib/snapd/snap /snap  </code></li>
<li>启动：<code>snap/bin/redis-desktop-manager.resp  </code></li>
</ol>
<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>pacman -S docker</p>
<blockquote>
<p>如果是非root用户不可以执行docker命令，两种方式解决</p>
</blockquote>
<ol>
<li><p>将用户添加且暂时切换到docker组，<code>user mod -aG docker 用户名</code>，<code>newgrp docker</code></p>
</li>
<li><p>修改docker可执行权限，<code>sudo chmod 666 /var/run/docker.sock </code></p>
</li>
</ol>
<h3 id="电源管理工具（省电）"><a href="#电源管理工具（省电）" class="headerlink" title="电源管理工具（省电）"></a>电源管理工具（省电）</h3><p><a href="https://wiki.archlinux.org/title/Laptop_Mode_Tools_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85">Laptop Mode Tools </a></p>
<h3 id="蓝牙管理器"><a href="#蓝牙管理器" class="headerlink" title="蓝牙管理器"></a>蓝牙管理器</h3><p><a href="https://wiki.archlinux.org/title/Bluetooth">bluetooth</a></p>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><ol>
<li>下载maven压缩包，解压到目录 <code>export PATH=/opt/maven3.8/bin:$PATH </code></li>
<li><code>vim /opt/maven3.8/conf/settings.xml</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It&#x27;s normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/mavenRepo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile</span></span><br><span class="line"><span class="comment">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="comment">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="comment">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="comment">     | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc.</span></span><br><span class="line"><span class="comment">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="comment">     | to accomplish, particularly when you only have a list of profile id&#x27;s for debug.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;repositories&gt;</span></span><br><span class="line"><span class="comment">        &lt;repository&gt;</span></span><br><span class="line"><span class="comment">          &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><br><span class="line"><span class="comment">          &lt;layout&gt;default&lt;/layout&gt;</span></span><br><span class="line"><span class="comment">          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class="line"><span class="comment">        &lt;/repository&gt;</span></span><br><span class="line"><span class="comment">      &lt;/repositories&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;,</span></span><br><span class="line"><span class="comment">     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration</span></span><br><span class="line"><span class="comment">     | might hypothetically look like:</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     | &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     |   &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">     | &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to</span></span><br><span class="line"><span class="comment">     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;env-dev&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;property&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;target-env&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;value&gt;dev&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;</span></span><br><span class="line"><span class="comment">      &lt;/properties&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- activeProfiles</span></span><br><span class="line"><span class="comment">   | List of profiles that are active for all builds.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;activeProfiles&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">  &lt;/activeProfiles&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="配置软件桌面图标"><a href="#配置软件桌面图标" class="headerlink" title="配置软件桌面图标"></a>配置软件桌面图标</h2><p><code>ls /usr/share/applications</code> 这里面存放了所有软件图标，可以依葫芦画瓢，类似其他应用，创建自己的应用，只要路径和图标自己配就行</p>
<h3 id="配置clash的图标"><a href="#配置clash的图标" class="headerlink" title="配置clash的图标"></a>配置clash的图标</h3><p>之前安装了clash的gui软件，但是没默认创建图标，自己弄一个</p>
<p>软件执行位置在/opt/clash/cfw</p>
<ol>
<li><p>首先截个图，clash的图标，放入:<code>sudo mv /home/tr/Pictures/clash.png /usr/share/icons/gnome/48x48 </code></p>
</li>
<li><p>创建桌面图标：<code> vim /usr/share/applications/clash.desktop</code>写入以下内容</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Categories=Network;</span><br><span class="line">Comment=clash</span><br><span class="line">Exec=/opt/clash/cfw</span><br><span class="line">GenericName=clash</span><br><span class="line">Icon=/usr/share/icons/gnome/48x48/clash.png</span><br><span class="line">Keywords=clash;</span><br><span class="line">MimeType=x-scheme-handler/clash;</span><br><span class="line">Name=Clash</span><br><span class="line">Name=Clash</span><br><span class="line">Name[zh_CN]=Clash</span><br><span class="line">Type=Application</span><br><span class="line">X-Deepin-Vendor=user-custom</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后程序列表就有了</p>
<h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><h3 id="boxes"><a href="#boxes" class="headerlink" title="boxes"></a>boxes</h3><blockquote>
<p>gnome桌面自带了boxes软件，这个软件真的很方便，但是简化的过头了，导致用户无法配置网络</p>
</blockquote>
<blockquote>
<p>boxes的使用就不说了，点开一目了然，这里推荐如何高级配置boxes内的虚拟机</p>
</blockquote>
<ol>
<li><p>下载 virt-manager</p>
</li>
<li><p>打开软件点击 <code>file</code> <code>add connection</code>选择如下，点击链接</p>
</li>
</ol>
<p><img src="/images/pasted-149.png" alt="upload successful"></p>
<p><img src="/images/pasted-151.png" alt="upload successful"></p>
<ol start="3">
<li>点击页面即可</li>
</ol>
<h3 id="virtual-machine（推荐）"><a href="#virtual-machine（推荐）" class="headerlink" title="virtual machine（推荐）"></a>virtual machine（推荐）</h3><p>这是专业点的软件，可以配置修改很多东西</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装虚拟机内核</span></span><br><span class="line">sudo pacman -S virtualbox-host-modules-arch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装虚拟机软件</span></span><br><span class="line">pacman -S virtualbox</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后不重启需要手动加载内核</span></span><br><span class="line">sudo modprobe vboxnetadp</span><br><span class="line">sudo modprobe vboxnetflt</span><br><span class="line">sudo modprobe vboxnetpci</span><br><span class="line">sudo modprobe vboxpci</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打开虚拟机使用的时候要注意提供的网络模式</p>
<ul>
<li>host-only 绑定虚拟网卡，需要用户手动创建网卡</li>
<li>nat 网络地址转换，可以上网，但是宿主机和虚拟机无法互通（互通需要设置，建议看archlinux文档）</li>
<li>bridge 桥接模式，使用一张网卡（可以是虚拟网卡）分配地址，可以和宿主机互通，但是如果网卡不是混合模式是无法上网的</li>
</ul>
</blockquote>
<p>最好的既可以上网又可以和宿主机互通的方式如下设置：</p>
<ol>
<li>创建host-only的虚拟网卡</li>
</ol>
<p><img src="/images/pasted-152.png" alt="upload successful"></p>
<ol start="2">
<li>关闭虚拟机，将两个网卡（虚拟网卡，和nat模式网卡）配置上即可</li>
</ol>
<p><img src="/images/pasted-153.png" alt="upload successful"></p>
<p><img src="/images/pasted-154.png" alt="upload successful"></p>
<p><img src="/images/pasted-157.png" alt="upload successful"></p>
<p><img src="/images/pasted-156.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino开发-自定义库和示例</title>
    <url>/2021/11/17/Arduino%E5%BC%80%E5%8F%91-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%93%E5%92%8C%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="Arduino-自定义库"><a href="#Arduino-自定义库" class="headerlink" title="Arduino 自定义库"></a>Arduino 自定义库</h1><span id="more"></span>

<blockquote>
<p>买了一个PS2的手柄，希望写个库文件方便以后控制手柄，所以这里以PS2手柄库文件开发为例，研究如何自定义库,首先新建工程文件夹：<code>PS2_ESP8266</code></p>
</blockquote>
<h2 id="库格式"><a href="#库格式" class="headerlink" title="库格式"></a>库格式</h2><blockquote>
<p>文件夹的组织类型如下：</p>
</blockquote>
<p><img src="/images/pasted-186.png" alt="upload successful"></p>
<h2 id="keywords-txt"><a href="#keywords-txt" class="headerlink" title="keywords.txt"></a>keywords.txt</h2><blockquote>
<p>这个文件内容可以为空</p>
</blockquote>
<h2 id="library-properties"><a href="#library-properties" class="headerlink" title="library.properties"></a>library.properties</h2><blockquote>
<p>这里定义一些库的属性</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=PS2Ctrl</span><br><span class="line">version=1.0.0</span><br><span class="line">author=Tang rui</span><br><span class="line">maintainer=Tang rui</span><br><span class="line">sentence=PS2 library for Arduino</span><br><span class="line">paragraph=An easy way to control PS2 handle</span><br><span class="line">category=Device Control</span><br><span class="line">url=https://github.com/Moipa</span><br><span class="line">architectures=*</span><br><span class="line">includes=PS2Ctrl.h</span><br></pre></td></tr></table></figure>

<h2 id="src目录下库文件编写"><a href="#src目录下库文件编写" class="headerlink" title="src目录下库文件编写"></a>src目录下库文件编写</h2><blockquote>
<p>这里主要写一个头文件，和对头文件的实现方法，用于实例调用</p>
</blockquote>
<blockquote>
<p>头文件： 定义了一个名为<code>PS2Ctrl_H</code>的头文件，其内声明了一个<code>PS2Ctrl</code>类，编写构造方法和使用方法等。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PS2Ctrl_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PS2Ctrl_H</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PS2Ctrl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">PS2Ctrl</span>(<span class="keyword">int</span> di_pin, <span class="keyword">int</span> do_pin, <span class="keyword">int</span> cs_pin, <span class="keyword">int</span> clk_pin);</span><br><span class="line">    <span class="comment">// 用于示例的一些函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_Cmd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> CMD)</span></span>; <span class="comment">// 发送命令到手柄</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ReadData</span><span class="params">()</span></span>; <span class="comment">// 接收所有PS2控制数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ClearData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ShortPoll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_EnterConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_TurnOnAnalogMode</span><span class="params">()</span></span>; <span class="comment">// 打开模拟模式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_VibrationMode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_ExitConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2_SetInit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PS2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 定义手柄接收器的四个针脚 传输的时候需要CS为低电平，CLK由高变低</span></span><br><span class="line">    <span class="keyword">int</span> di_pin; <span class="comment">//接收器发送给单片机的信号</span></span><br><span class="line">    <span class="keyword">int</span> do_pin; <span class="comment">//单片机发送给接收器的信号</span></span><br><span class="line">    <span class="keyword">int</span> cs_pin; <span class="comment">// 选择信号</span></span><br><span class="line">    <span class="keyword">int</span> clk_pin; <span class="comment">// 时钟信号</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> SELECT, L3, R3, START, UP, RIGHT, DOWN, LEFT, L2, R2, L1, R1, TRIANGLE, CIRCLE, FORK, SQUARE;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> PS2_LX, PS2_LY, PS2_RX, PS2_RY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>头文件的实现文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PS2Ctrl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Arduino.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">PS2Ctrl::<span class="built_in">PS2Ctrl</span>(<span class="keyword">int</span> di_pin,<span class="keyword">int</span> do_pin,<span class="keyword">int</span> cs_pin,<span class="keyword">int</span> clk_pin)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;di_pin = di_pin;</span><br><span class="line">    <span class="keyword">this</span>-&gt;do_pin = do_pin;</span><br><span class="line">    <span class="keyword">this</span>-&gt;cs_pin = cs_pin;</span><br><span class="line">    <span class="keyword">this</span>-&gt;clk_pin = clk_pin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DI_pin this-&gt;di_pin  <span class="comment">// D6  DATA</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_pin this-&gt;do_pin  <span class="comment">// D7  CMD</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CS_pin this-&gt;cs_pin  <span class="comment">// D5</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_pin this-&gt;clk_pin <span class="comment">// D8</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_H digitalWrite(DO_pin, HIGH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_L digitalWrite(DO_pin, LOW)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_H digitalWrite(CLK_pin, HIGH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_L digitalWrite(CLK_pin, LOW)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CS_H digitalWrite(CS_pin, HIGH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CS_L digitalWrite(CS_pin, LOW)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"></span><br><span class="line">u8 Data[<span class="number">9</span>];</span><br><span class="line">u8 SELECT, L3, R3, START, UP, RIGHT, DOWN, LEFT, L2, R2, L1, R1, TRIANGLE, CIRCLE, FORK, SQUARE;</span><br><span class="line">u8 PS2_LX, PS2_LY, PS2_RX, PS2_RY;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_Cmd</span><span class="params">(u8 CMD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> u16 ref = <span class="number">0x01</span>;</span><br><span class="line">  Data[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (ref = <span class="number">0x01</span>; ref &lt; <span class="number">0x0100</span>; ref &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (ref &amp; CMD)</span><br><span class="line">    &#123;</span><br><span class="line">      DO_H;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      DO_L;</span><br><span class="line">    CLK_H;</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">    CLK_L;</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">    CLK_H;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(DI_pin))</span><br><span class="line">    &#123;</span><br><span class="line">      Data[<span class="number">1</span>] = ref | Data[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ReadData</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> u8 byt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">volatile</span> u16 ref = <span class="number">0x01</span>;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x42</span>);</span><br><span class="line">  <span class="keyword">for</span> (byt = <span class="number">2</span>; byt &lt; <span class="number">9</span>; byt++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (ref = <span class="number">0x01</span>; ref &lt; <span class="number">0x100</span>; ref &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      CLK_H;</span><br><span class="line">      <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">      CLK_L;</span><br><span class="line">      <span class="built_in">delayMicroseconds</span>(<span class="number">10</span>);</span><br><span class="line">      CLK_H;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(DI_pin))</span><br><span class="line">      &#123;</span><br><span class="line">        Data[byt] = ref | Data[byt];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  CS_H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ClearData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u8 a;</span><br><span class="line">  <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">9</span>; a++)</span><br><span class="line">  &#123;</span><br><span class="line">    Data[a] = <span class="number">0x00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ShortPoll</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x42</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_EnterConfig</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x43</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_TurnOnAnalogMode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x44</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0xEE</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_VibrationMode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x4D</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_ExitConfig</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CS_L;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x01</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x43</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x00</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line">  <span class="built_in">PS2_Cmd</span>(<span class="number">0x5A</span>);</span><br><span class="line"></span><br><span class="line">  CS_H;</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2_SetInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">PS2_ShortPoll</span>();</span><br><span class="line">  <span class="built_in">PS2_ShortPoll</span>();</span><br><span class="line">  <span class="built_in">PS2_ShortPoll</span>();</span><br><span class="line">  <span class="built_in">PS2_EnterConfig</span>();</span><br><span class="line">  <span class="built_in">PS2_TurnOnAnalogMode</span>();</span><br><span class="line">  <span class="built_in">PS2_VibrationMode</span>();</span><br><span class="line">  <span class="built_in">PS2_ExitConfig</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PS2Ctrl::PS2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">PS2_ClearData</span>();</span><br><span class="line">  <span class="built_in">PS2_ReadData</span>();</span><br><span class="line"></span><br><span class="line">  LEFT = !(<span class="number">0x80</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  DOWN = !(<span class="number">0x40</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  RIGHT = !(<span class="number">0x20</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  UP = !(<span class="number">0x10</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  START = !(<span class="number">0x08</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  R3 = !(<span class="number">0x04</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  L3 = !(<span class="number">0x02</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line">  SELECT = !(<span class="number">0x01</span> &amp; Data[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  SQUARE = !(<span class="number">0x80</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  FORK = !(<span class="number">0x40</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  CIRCLE = !(<span class="number">0x20</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  TRIANGLE = !(<span class="number">0x10</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  R1 = !(<span class="number">0x08</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  L1 = !(<span class="number">0x04</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  R2 = !(<span class="number">0x02</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line">  L2 = !(<span class="number">0x01</span> &amp; Data[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">  PS2_RX = Data[<span class="number">5</span>];</span><br><span class="line">  PS2_RY = Data[<span class="number">6</span>];</span><br><span class="line">  PS2_LX = Data[<span class="number">7</span>];</span><br><span class="line">  PS2_LY = Data[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="examples文件夹下"><a href="#examples文件夹下" class="headerlink" title="examples文件夹下"></a>examples文件夹下</h2><blockquote>
<p>编写示例文件：新增一个文件<code>PS2Ctrl.ino</code></p>
<p>内容如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PS2Ctrl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">PS2Ctrl <span class="title">ps2Ctrl</span><span class="params">(<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置给PS2控制器的这几个接口模式</span></span><br><span class="line">  pinMode(ps2Ctrl.di_pin, INPUT);</span><br><span class="line">  pinMode(ps2Ctrl.do_pin, OUTPUT);</span><br><span class="line">  pinMode(ps2Ctrl.cs_pin, OUTPUT);</span><br><span class="line">  pinMode(ps2Ctrl.clk_pin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 读取PS2手柄数据</span></span><br><span class="line">  ps2Ctrl.PS2();</span><br><span class="line">  <span class="comment">// 打印按键操作</span></span><br><span class="line">  SerialPrintKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SerialPrintKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.println(<span class="string">&quot;*********key list********&quot;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;L3:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.L3);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;R3:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.R3);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;START:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.START);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;UP:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.UP);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;RIGHT:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.RIGHT);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;DOWN:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.DOWN);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;LEFT:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.LEFT);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;L2:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.L2);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;R2:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.R2);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;L1:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.L1);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;R1:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.R1);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;TRIANGLE:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.TRIANGLE);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;CIRCLE:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.CIRCLE);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;FORK:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.FORK);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;SQUARE:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.SQUARE);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_RX:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_RX);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_RY:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_RY);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_LX:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_LX);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">  Serial.print(<span class="string">&quot;PS2_LY:&quot;</span>);</span><br><span class="line">  Serial.print(ps2Ctrl.PS2_LY);</span><br><span class="line">  Serial.println();</span><br><span class="line">  ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>将整个工程文件<code>PSE_ESP8266</code>放入<code>Arduino</code>的<code>libraries</code>内，现在可以在第三方示例库中看到我们的示例了</p>
</blockquote>
<p><img src="/images/pasted-185.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库常用命令</title>
    <url>/2021/01/31/Docker-mysql/</url>
    <content><![CDATA[<h1 id="数据库常用命令"><a href="#数据库常用命令" class="headerlink" title="数据库常用命令"></a>数据库常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录数据库：</span><br><span class="line"></span><br><span class="line">sudo mysql -u root -p778899      </span><br><span class="line">注意哦，不输入sudo会出现一下问题：</span><br><span class="line"></span><br><span class="line">Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27;</span><br><span class="line"></span><br><span class="line">显示数据库：</span><br><span class="line"></span><br><span class="line">show databases；</span><br><span class="line">创建数据库：</span><br><span class="line"></span><br><span class="line">create database school；</span><br><span class="line">选择当前操作数据库：</span><br><span class="line"></span><br><span class="line">use school;</span><br><span class="line">创建新用户：</span><br><span class="line"></span><br><span class="line">create user shaowen@&#x27;%&#x27; identified by &#x27;密码&#x27;；</span><br><span class="line">授权：</span><br><span class="line"></span><br><span class="line">grant all on *.* to shaowen@&#x27;%&#x27;;</span><br><span class="line">//刷新</span><br><span class="line">flush privileges;</span><br><span class="line">收回权利：</span><br><span class="line"></span><br><span class="line">revoke all ON *.*  FROM shaowen@&#x27;%&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line">查询所有用户：</span><br><span class="line"></span><br><span class="line">SELECT User, Host FROM mysql.user;</span><br><span class="line">修改密码：</span><br><span class="line"></span><br><span class="line">alter user &#x27;shaowen&#x27;@&#x27;%&#x27; identified by &#x27;778899&#x27;;</span><br><span class="line">//%和localhost具体填哪个，根据上面的查询用户选项看</span><br><span class="line">flush privileges;</span><br><span class="line">之后就可以登录啦</span><br><span class="line"></span><br><span class="line">sudo mysql -ushaowen -p778899</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Esp8266入门</title>
    <url>/2023/01/31/Esp8266%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="ESP8266"><a href="#ESP8266" class="headerlink" title="ESP8266"></a>ESP8266</h1><blockquote>
<p>通常在购买完芯片后插上去看com口即可（linux下是/dev/ttyUSB0），如果链接电脑无设备识别，需要下载ch40的驱动：<code>https://www.wch.cn/download/CH341SER_LINUX_ZIP.html</code></p>
<p>有windows和linux版本，这里我下载了linux版本，解压进入目录后执行<code>make</code> 如果提示缺少<code>libguile-3.0.so</code>，需要执行<code>sudo pacman -S guile</code> 更新最新的<code>guile</code>库，最后执行<code>make load</code>加载</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>BOOKS</title>
    <url>/2022/04/21/BOOKS/</url>
    <content><![CDATA[<h2 id="Good-Good-study，Day-Day-up"><a href="#Good-Good-study，Day-Day-up" class="headerlink" title="Good Good study，Day Day up!"></a>Good Good study，Day Day up!</h2><p>git上找到的数据笔记大全</p>
<span id="more"></span>

<p>❗Books and materials are only for personal learning and use, and the copyright belongs to the original author. If there is any infringement, please contact me!（书籍和资料仅供个人学习使用，版权归原作者所有，如有侵权请联系我！）</p>
<ul>
<li><p><a href="/shell">[<strong>shell</strong>]</a>：shell learning</p>
<ul>
<li><p>Linux学习笔记 <a href="/shell/book/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.pdf">[Download]</a></p>
</li>
<li><p>The Linux Command Line中文版 <a href="/shell/book/The%20Linux%20Command%20Line%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></p>
</li>
<li><p>abs-guide <a href="/shell/book/abs-guide.pdf">[Download]</a></p>
</li>
<li><p>awk手册 <a href="/shell/book/awk%E6%89%8B%E5%86%8C.pdf">[Download]</a></p>
</li>
<li><p>The AWK Programming Language <a href="/shell/book/The.AWK.Programming.Language.pdf">[Download]</a></p>
</li>
<li><p>Sed-and-Awk-101-Hacks <a href="/shell/book/Sed-and-Awk-101-Hacks.pdf">[Download]</a></p>
</li>
<li><p>awk and sed修订第三版 <a href="/shell/book/awk%20and%20sed%E4%BF%AE%E8%AE%A2%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></p>
</li>
<li><p>AWK程序设计语言 <a href="/shell/book/AWK%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80.pdf">[Download]</a></p>
</li>
<li><p>shell脚本编程课件 <a href="/shell/book/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E8%AF%BE%E4%BB%B6.pdf">[Download]</a></p>
</li>
<li><p>LINUX SHELL脚本攻略 <a href="/shell/book/LINUX%20SHELL%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5(%E4%B8%AD%E6%96%87%E7%89%88%E5%B8%A6%E4%B9%A6%E7%AD%BE).pdf">[Download]</a></p>
</li>
<li><p>Linux命令行与shell脚本编程大全-第3版 <a href="/shell/book/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%A4%A7%E5%85%A8%20%20%E7%AC%AC3%E7%89%88.pdf">[Download]</a></p>
</li>
<li><p>跟老男孩学Linux运维：Shell编程实战 <a href="/shell/book/%E8%B7%9F%E8%80%81%E7%94%B7%E5%AD%A9%E5%AD%A6Linux%E8%BF%90%E7%BB%B4%EF%BC%9AShell%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98.pdf">[Download]</a></p>
</li>
<li><p>ECS运维指南之Linux系统诊断 <a href="/shell/book/ECS%E8%BF%90%E7%BB%B4%E6%8C%87%E5%8D%97%E4%B9%8BLinux%E7%B3%BB%E7%BB%9F%E8%AF%8A%E6%96%AD.pdf">[Download]</a></p>
</li>
<li><p>鸟哥的Linux私房菜基础篇-第三版 <a href="/shell/book/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></p>
</li>
<li><p>鸟哥的Linux私房菜服务器架设篇-第三版 <a href="/shell/book/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E8%AE%BE%E7%AF%87-%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></p>
<p>  ……</p>
</li>
</ul>
</li>
<li><p><a href="/python">[<strong>python</strong>]</a>：python learning</p>
<ul>
<li>Head First Python（中文版） <a href="/python/book/Head%20First%20Python%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89.pdf">[Download]</a></li>
<li>head first python <a href="/python/book/head%20first%20python.pdf">[Download]</a></li>
<li>Learn_Python_The_Hard_Way_zh-cn <a href="/python/book/Learn_Python_The_Hard_Way_zh-cn.pdf">[Download]</a></li>
<li>笨办法学Python-第3版 <a href="/python/book/%E7%AC%A8%E5%8A%9E%E6%B3%95%E5%AD%A6Python-%E7%AC%AC3%E7%89%88.pdf">[Download]</a></li>
<li>Python3学习笔记第三版上卷 <a href="/python/book/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%89%E7%89%88%E4%B8%8A%E5%8D%B7.pdf">[Download]</a></li>
<li>Python编程快速上手-让繁琐工作自动化 <a href="/python/book/Python%E7%BC%96%E7%A8%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E8%AE%A9%E7%B9%81%E7%90%90%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96.pdf">[Download]</a></li>
<li>Python知识手册 <a href="/python/book/Python%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C-V3.0.pdf">[Download]</a></li>
<li>Python核心编程第二版 <a href="/python/book/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%8C%E7%89%88.pdf">[Download]</a></li>
<li>Python核心编程第三版 <a href="/python/book/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%89%88.pdf">[Download]</a></li>
<li>Python自动化运维技术与最佳实践 <a href="/python/book/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.pdf">[Download]</a></li>
<li>Python爬虫开发与项目实战 <a href="https://pan.baidu.com/s/1muu557bBjXj2kiIplqevwA">[Download]</a> 提取码：6dy9</li>
<li>Python.UNIX和Linux系统管理指南 <a href="/python/book/Python.UNIX%E5%92%8CLinux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%8C%87%E5%8D%97.pdf">[Download]</a></li>
<li>Python Cookbook(第2版)中文版 <a href="/python/book/Python%20Cookbook(%E7%AC%AC2%E7%89%88)%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li>
<li>编写高质量代码-改善Python程序的91个建议 <a href="/python/book/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81-%E6%94%B9%E5%96%84Python%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE.pdf">[Download]</a></li>
<li>Python编程参考 <a href="/python/book/Python%E7%BC%96%E7%A8%8B%E5%8F%82%E8%80%83%E5%8E%9F%E7%A8%BF.pdf">[Download]</a></li>
<li>Python源码剖析(完整版)  <a href="/python/book/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(%E5%AE%8C%E6%95%B4%E7%89%88).pdf">[Download]</a></li>
<li>流畅的Python <a href="/python/book/%E6%B5%81%E7%95%85%E7%9A%84Python.pdf">[Download]</a></li>
<li>110道Python面试题汇总 <a href="/python/book/110%E9%81%93Python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB.pdf">[Download]</a></li>
<li>Python面试大全 <a href="/python/book/Python%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8.pdf">[Download]</a></li>
<li>100道Python练手题目 <a href="/python/book/100%E9%81%93Python%E7%BB%83%E6%89%8B%E9%A2%98%E7%9B%AE.docx">[Download]</a></li>
<li>python操作excel、word、pdf <a href="/python/book/python%E6%93%8D%E4%BD%9Cexcel%E3%80%81word%E3%80%81pdf.zip">[Download]</a></li>
<li>python爬虫_小游戏教程&amp;源码 <a href="https://pan.baidu.com/s/1F6xJx_b4LLc8bbWrfZhaZw">[Download]</a>，百度网盘提取码：ka2l  ……</li>
</ul>
</li>
<li><p><a href="/golang">[<strong>golang</strong>]</a>：golang learning</p>
<ul>
<li><a href="/golang/book/Head%20First%20Go.pdf">Head First Go英文版</a></li>
<li><a href="/golang/book/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%EF%BC%88%E8%AF%A6%E7%BB%86%E4%B9%A6%E7%AD%BE%E3%80%81%E6%B8%85%E6%99%B0%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89.pdf">Go程序设计语言</a></li>
<li><a href="/golang/book/Go%20%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98.pdf">Go语言实战</a></li>
<li><a href="/golang/book/Go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%9F%A9%E9%A1%BA%E5%B9%B3.zip">Go语言核心编程笔记</a></li>
<li><a href="/golang/book/Go%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%E7%AC%AC%E5%9B%9B%E7%89%88.pdf">Go学习笔记 第四版</a></li>
<li><a href="/golang/book/Go%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%B9%A6%E7%AD%BE%E7%89%88%EF%BC%89.pdf">Go源码剖析（书签版）</a></li>
<li><a href="/golang/book/Go_web_%E7%BC%96%E7%A8%8B.pdf">Go_web_编程</a></li>
<li><a href="/golang/book/Go%20Web%20%E7%BC%96%E7%A8%8B.pdf">Go Web 编程</a></li>
<li><a href="/golang/book/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98_%E7%AC%AC1%E7%89%88.pdf">Go并发编程实战_第1版</a></li>
<li><a href="/golang/book/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98_%E7%AC%AC2%E7%89%88_Lite.pdf">Go并发编程实战_第2版_Lite</a></li>
<li><a href="https://drive.google.com/file/d/1_i-G4EQABtfhTsfgbPmXS5MOIjn6qd7M/view?usp=sharing">Go语言并发之道</a></li>
<li><a href="/golang/book/Go%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.pdf">Go网络编程</a></li>
<li><a href="/golang/book/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F(%E4%B8%AD%E6%96%87%E7%89%88).pdf">Go语言圣经(中文版)</a></li>
<li><a href="/golang/book/2020%E6%9C%80%E6%96%B0Gin%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-%E7%BF%BB%E8%AF%91-asong-%E6%97%A0%E6%B0%B4%E5%8D%B0%E7%89%88%E6%9C%ACV1.1.pdf">2020最新Gin框架中文文档</a></li>
<li><a href="/golang/book/%E5%A4%A7%E5%8E%82Go%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6.docx">大厂Go工程师面试题集锦</a></li>
<li><a href="/golang/book/Golang%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90.pdf">Golang常见面试题目解析</a>  ……</li>
</ul>
</li>
<li><p><a href="/program">[<strong>program</strong>]</a>：program learning</p>
<ul>
<li>程序是怎样跑起来的 <a href="/program/book/%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84_%E7%9F%A2%E6%B3%BD%E4%B9%85%E9%9B%84.pdf">[Download]</a></li>
<li>Head First Programming 中文版 <a href="/program/book/Head%20First%20Programming%20%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li>
<li>Head First Software 中文版 <a href="/program/book/Head%20First%20Software%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li>
<li>Head First ObjectOriented Analysis and Design(中文版) <a href="https://drive.google.com/file/d/1oM6dxlMu4oTb-SQfHMXrO5JlAqao_19i/view?usp=sharing">[Download]</a></li>
<li>Head First 设计模式(中文版) <a href="/program/book/Head%20First%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%AD%E6%96%87%E7%89%88).pdf">[Download]</a></li>
<li>大话设计模式 <a href="https://drive.google.com/file/d/1CEEBv2L9nhpsXYi3rSZnHc6IxEBfs9H3">[Download]</a></li>
<li>Head Fisrt PMP中文版 <a href="/program/book/Head%20Fisrt%20PMP%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li>
<li>代码简洁之道 <a href="/program/book/clean%20code-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93_%E4%B8%AD%E6%96%87%E5%AE%8C%E6%95%B4%E7%89%88-%E5%B8%A6%E4%B9%A6%E7%AD%BE.pdf">[Download]</a></li>
<li>架构整洁之道 <a href="https://drive.google.com/file/d/1uKLy8MdlLzC073OfH4zfF-bRwXQw04w-/oview?usp=sharing">[Download]</a></li>
<li>重构：改善既有代码的设计(第2版)  <a href="/program/book/%E9%87%8D%E6%9E%84%EF%BC%9A%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1(%E7%AC%AC2%E7%89%88).pdf">[Download]</a></li>
<li>《程序员修炼之道：从小工到专家》高清扫描版 <a href="https://pan.baidu.com/s/1rqECrAtQdBg3d_oQ7zYPGA">[Download]</a> 提取码：vjxt</li>
<li>程序员的自我修养–链接、装载与库(高清带完整书签版)  <a href="/program/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB--%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93(%E9%AB%98%E6%B8%85%E5%B8%A6%E5%AE%8C%E6%95%B4%E4%B9%A6%E7%AD%BE%E7%89%88).pdf">[Download]</a></li>
<li>程序之美系列套装（6册） <a href="/program/book/%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%BE%8E%E7%B3%BB%E5%88%97%E5%A5%97%E8%A3%85%EF%BC%886%E5%86%8C%EF%BC%89%E5%9B%A2%E9%98%9F%E4%B9%8B%E7%BE%8E%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B9%8B%E7%BE%8E%E3%80%81%E6%9E%B6%E6%9E%84%E4%B9%8B%E7%BE%8E%E3%80%81%E6%95%B0%E6%8D%AE%E4%B9%8B%E7%BE%8E%E3%80%81%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%BE%8E%E3%80%81%E5%AE%89%E5%85%A8%E4%B9%8B%E7%BE%8E.pdf">[Download]</a></li>
<li>计算机程序的构造和解释（SICP中文第2版) <a href="/program/book/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A%EF%BC%88SICP%E4%B8%AD%E6%96%87%E7%AC%AC2%E7%89%88%EF%BC%89.pdf">[Download]</a></li>
<li>SRE Google运维解密 <a href="/program/book/SRE%20Google%E8%BF%90%E7%BB%B4%E8%A7%A3%E5%AF%86.pdf">[Download]</a></li>
<li>凤凰项目：一个IT运维的传奇故事 <a href="/program/book/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%B8%80%E4%B8%AAIT%E8%BF%90%E7%BB%B4%E7%9A%84%E4%BC%A0%E5%A5%87%E6%95%85%E4%BA%8B.pdf">[Download]</a></li>
<li>BPF.Performance.Tools.2019.12 <a href="/program/book/BPF.Performance.Tools.2019.12.pdf">[Download]</a></li>
<li>Oreilly.Regular.Expressions.Cookbook.2nd.edition <a href="/program/book/Oreilly.Regular.Expressions.Cookbook.2nd.edition.pdf">[Download]</a></li>
<li>正则表达式必知必会(修订版) <a href="/program/book/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A(%E4%BF%AE%E8%AE%A2%E7%89%88).pdf">[Download]</a></li>
<li>精通正则表达式 <a href="/program/book/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.pdf">[Download]</a></li>
<li>正则表达式经典实例 <a href="/program/book/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B.pdf">[Download]</a></li>
<li>SQL基础知识第2版 <a href="/program/book/SQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%AC2%E7%89%88.zip">[Download]</a></li>
<li>MySQL经典50题 <a href="/program/book/MySQL%E7%BB%8F%E5%85%B850%E9%A2%98.pdf">[Download]</a></li>
<li>Head First SQL中文版 <a href="/program/book/Head%20First%20SQL%E4%B8%AD%E6%96%87%E7%89%88.pdf">[Download]</a></li>
<li>SQL进阶教程 <a href="/program/book/SQL%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B.pdf">[Download]</a></li>
<li>MySQL资源合集 <a href="https://chegva.com/4181.html">[Download]</a></li>
<li>Head First PHP &amp; MySQL中文版 <a href="/program/book/Head%20First%20PHP%20&%20MySQL.pdf">[Download]</a></li>
<li>嗨翻C语言（Head_First_C_中文版) <a href="https://drive.google.com/file/d/18rcDg9sFCm2HB4ylWVJaW-f8qTLMaywf">[Download]</a></li>
<li>程序员内功修炼-V1.0 <a href="https://drive.google.com/file/d/1BWErWP1MBA-wEV_NT5VC0uKE-OjdAUdq/view?usp=sharing">[Download]</a></li>
<li>漫画算法：小灰的算法之旅 <a href="/program/book/%E6%BC%AB%E7%94%BB%E7%AE%97%E6%B3%95%EF%BC%9A%E5%B0%8F%E7%81%B0%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85.pdf">[Download]</a>·<a href="https://github.com/bjweimengshu">github</a></li>
<li>剑指Offer纪念版 <a href="/program/book/%E5%89%91%E6%8C%87Offer%E7%BA%AA%E5%BF%B5%E7%89%88.pdf.zip">[Download]</a></li>
<li>labuladong的算法小抄官方完整版 <a href="https://drive.google.com/file/d/17EJRjk5apM955tCpQyOcnh5i44PnSAvs/view?usp=sharing">[Download]</a></li>
<li>LeetCode刷题手册 <a href="/program/book/LeetCode%E5%88%B7%E9%A2%98%E6%89%8B%E5%86%8C.pdf">[Download]</a></li>
<li>LeetCode 101 - A LeetCode Grinding Guide (C++ Version) <a href="/program/book/LeetCode%20101%20-%20A%20LeetCode%20Grinding%20Guide%20(C++%20Version).pdf">[Download]</a></li>
<li>中文make(v3.80)手册 <a href="/program/book/%E4%B8%AD%E6%96%87make(v3.80)%E6%89%8B%E5%86%8C.pdf">[Download]</a></li>
<li>[GNU.Make.项目管理].Robert.Mecklenburg <a href="/program/book/%5BGNU.Make.%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%5D.Robert.Mecklenburg.pdf">[Download]</a></li>
<li><a href="https://chegva.com/5087.html">2017-2021美团技术年货合集</a>  ……</li>
</ul>
</li>
<li><p><a href="/network">[<strong>network</strong>]</a>：network learning</p>
<p>  Google drive：<a href="https://drive.google.com/drive/folders/1-eD8rG-EDj4qu4SNX5paa8OcgXB3Fp7c">https://drive.google.com/drive/folders/1-eD8rG-EDj4qu4SNX5paa8OcgXB3Fp7c</a></p>
<ul>
<li><p><strong>初级网络技术书籍</strong></p>
<ul>
<li>深入浅出Networking.pdf</li>
<li>网络是怎样连接的-[日]户根勤.pdf</li>
<li>B0050-图解网络-v2.0.pdf</li>
<li>计算机网络 自顶向下方法（第七版）中文版.pdf</li>
<li>TCP-IP详解卷一：协议.rar</li>
<li>CCNA学习指南第七版.zip</li>
<li>Cisco_ACL配置技术</li>
</ul>
</li>
<li><p><strong>中级网络技术书籍</strong></p>
<ul>
<li>CCNP路由交换教材</li>
<li>CISCO CATALYST局域网交换技术</li>
<li>局域网交换机安全.pdf</li>
<li>Cisco现场手册：Catalyst交换机配置（中文）.pdf</li>
<li>Cisco Press - CCIE Professional Development Routing TCP IP Volume 1 2nd Edition(2005).chm</li>
<li>CCNP Security Secure.pdf</li>
<li>Cisco.Press.LAN.Switch.Security.Sep.2007.eBook-BBL.rar</li>
</ul>
</li>
<li><p><strong>高级网络技术书籍</strong></p>
<ul>
<li>Cisco VPN 完全配置指南（中文）高清扫描版.pdf</li>
<li>MPLS技术架构 中文版 高清 带标签.7z</li>
<li>IP多播网络的设计与部署 第1卷.pdf</li>
<li>MPLS和VPN体系结构（第2卷）.pdf</li>
<li>MPLS和VPN体系结构CCIP版-卷一.pdf</li>
<li>TCP_IP路由技术第2卷中文版.rar</li>
<li>Cisco - IPSec VPN Design(2005).chm</li>
<li>Cisco OSPF命令与配置手册（中文）.pdf</li>
<li>Cisco.Press.CCIE.Professional.Development.Routing.TCP.IP.Volume.II.chm</li>
<li>ASA试验（一）.pdf</li>
<li>ASA试验（二）.pdf</li>
<li>ASA试验（三）.pdf</li>
<li>域间组播路由.chm</li>
<li>QoS技术白皮书.pdf</li>
<li>组播技术白皮书.pdf</li>
<li>QoS技术介绍.pdf</li>
</ul>
</li>
<li><p><strong>网络协议分析</strong></p>
<ul>
<li><a href="https://pan.baidu.com/s/1vdAJHYyzVnGQPQKvLgvI7g">网络数据包分析从入门到精通</a>，提取码: tlbi</li>
<li>网络协议报文格式大全(V1.0).chm</li>
<li>OSI七层网络协议详细图解.png</li>
<li>1.协议栈介绍图解.zip</li>
<li>2.Ethernet协议图解.zip</li>
<li>3.ARP协议图解.zip</li>
<li>4.IP协议图解.zip</li>
<li>5.ICMP协议图解.zip</li>
<li>6.UDP协议图解.zip</li>
<li>7.DHCP协议图解.zip</li>
<li>8.DNS协议图解.zip</li>
<li>9.TCP协议图解.zip</li>
</ul>
</li>
<li><p><strong>网络工程实战</strong></p>
<ul>
<li><p><a href="https://chegva.com/1128.html">CCNA完全配置宝典</a></p>
</li>
<li><p><a href="http://ccietea.com/">CCIE网络工程师成长之路</a>,朱sir网络教程视频全集(链接:<a href="https://pan.baidu.com/s/1qVfQPxJuxlB5xWS1yiPkcg">https://pan.baidu.com/s/1qVfQPxJuxlB5xWS1yiPkcg</a>  密码:2fh6)</p>
</li>
<li><p><a href="https://pan.baidu.com/s/1rOBzhQPLNPGU8ZMjGRSC5A">网络安全学习资料</a>，提取码：i2er</p>
</li>
<li><p>网络工程实战项目视频教程（含3个综合项目部署）</p>
<p>  ……</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="/system">[<strong>system</strong>]</a>：system learning</p>
<p>  Google drive：<a href="https://drive.google.com/drive/folders/1w9w2vcRbGoJxHicTs4JafikA9j5SlIjP">https://drive.google.com/drive/folders/1w9w2vcRbGoJxHicTs4JafikA9j5SlIjP</a></p>
<p>  百度网盘：<a href="https://pan.baidu.com/s/1LKEwSfBjiqkIs87NCsZVPA">https://pan.baidu.com/s/1LKEwSfBjiqkIs87NCsZVPA</a></p>
<ul>
<li>《穿越计算机的迷雾》</li>
<li>《计算机的心智：操作系统之哲学原理》</li>
<li>编码：隐匿在计算机软硬件背后的语言（美.佩措尔德）</li>
<li>《码农翻身：用故事给技术加点料》</li>
<li>computer-basic</li>
<li>cxuan-os-修改</li>
<li>深入理解计算机系统（原书第三版3）</li>
<li>现代操作系统原书第4版</li>
<li>UNIX Systems for Modern Architecture</li>
<li>the_design_of_the_unix_operating_system</li>
<li>Linux内核设计的艺术_图解Linux操作系统架构设计与实现原理</li>
<li>Linux内核源代码情景分析上下册带目录</li>
<li>深入Linux设备驱动程序内核机制</li>
<li>Linux设备驱动程序(中文版第三版)</li>
<li>深入理解Linux内核第3版+英文版</li>
<li>深入理解linux内核中文第三版</li>
<li>CPU源代码分析与芯片设计及Linux移植</li>
<li>莱昂氏UNIX源代码分析（全本）</li>
<li>Linux-UNIX系统编程手册（上、下册）</li>
<li>UNIX环境高级编程 第3版</li>
<li>UNIX编程艺术（中文）</li>
<li>多处理器编程的艺术</li>
<li>Linux-Unix_Socket_Guide</li>
<li>Debug.Hacks中文版_深入调试的技术和工具</li>
<li>Understanding_the_linux_virtual_memory_manager</li>
<li>Linux_Kernel_Delay_Write</li>
<li>A_Directory_Index_for_Ext2</li>
<li>Linux网络编程</li>
<li>UNIX网络编程+第1卷：套接字API</li>
<li>Unix网络编程 第2卷：进程间的通信</li>
<li>[深入理解Linux网络技术内幕].(ChristianBenvenuti).夏安等.扫描版</li>
<li>《深入理解Linux网络技术内幕》英文版</li>
<li>Linux_performance</li>
<li>性能之巅(洞悉系统、企业与云计算)</li>
<li>BPF.Performance.Tools.2019.12</li>
<li>Site Reliability Engineering</li>
<li>AppleScript初学者(中文版)</li>
<li>AppleScriptLanguageGuide</li>
<li>AppleScript: A Beginner’s Guide</li>
<li>AppleScript权威指南</li>
<li>Mac OS X for Unix Geeks</li>
<li>《深入解析 MAC OS X &amp; IOS 操作系统》  ……</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>DockerCompose</title>
    <url>/2022/03/31/DockerCompost/</url>
    <content><![CDATA[<h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h1><span id="more"></span>
<p><a href="https://docs.docker.com/compose/gettingstarted/">官方学习文档</a></p>
<h2 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h2><p>DockerFile有了以后，build，run只针对一个容器，效率不高，如果多个服务之前存在依赖关系很麻烦</p>
<p>Docker Compose 是用来定义和运行多个容器的应用，使用yaml配置文件</p>
<p>正常使用有三个步骤：</p>
<ol>
<li>定义应用的环境（Dockefile）</li>
<li>docker-compose.yml 用来定义服务</li>
<li>运行 docker compose up 启动项目</li>
</ol>
<p>这个其实也就比自己手动写脚本好用，还是很局限，本质是脚本方式启动电脑上的一些服务</p>
<blockquote>
<p>对于docker compose的一些说明</p>
</blockquote>
<blockquote>
<p>如果使用的是官方示例可以发现启动的容器名字是文件夹的名字+副本数量</p>
</blockquote>
<blockquote>
<p>会默认创建对应的 文件夹_default的网络，yml配置文件内定义的若干个服务启动后，这些服务都在同一个网络下，之后互相访问可以直接通过容器名访问</p>
</blockquote>
<h2 id="yml-规则"><a href="#yml-规则" class="headerlink" title="yml 规则"></a>yml 规则</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3层</span></span><br><span class="line"></span><br><span class="line">version : &#x27;&#x27; #版本</span><br><span class="line"></span><br><span class="line">service : #服务</span><br><span class="line">	service1:web</span><br><span class="line">    	images:</span><br><span class="line">        build:</span><br><span class="line">        volume:</span><br><span class="line">        ...</span><br><span class="line">    service2:redis</span><br><span class="line">    	depends_on:</span><br><span class="line">        - db</span><br><span class="line">        - redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他配置 网络 卷 全局规则</span></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">network:</span><br><span class="line">configs:</span><br></pre></td></tr></table></figure>
<p>一些重要的参数的详情</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动的时候是有一个启动顺序的，需要保证其他服务器启动</span></span><br><span class="line">depends_on:</span><br><span class="line">- db</span><br><span class="line"><span class="meta">#</span><span class="bash"> db 这里指的是自己定义的服务名</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> image: 这里指的是镜像import的基础镜像</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">	web:</span><br><span class="line">      # 指令执行 镜像构建成功后执行的命令</span><br><span class="line">      command: python manage.py runserver 0.0.0.0:8000	</span><br><span class="line">      # 构建 根据当前目录的dockerfile文件构建这个镜像</span><br><span class="line">      build: .</span><br><span class="line">      # 暴露的端口 本地8000 容器5000</span><br><span class="line">      ports:</span><br><span class="line">        - &quot;8000:5000&quot;</span><br><span class="line">      # 挂载卷，启动docker的目录，映射到容器的code目录</span><br><span class="line">      volumes:</span><br><span class="line">        - .:/code</span><br><span class="line">      # 环境变量设置</span><br><span class="line">      environment:</span><br><span class="line">        FLASK_ENV: development</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volume 还有其他挂载方式 具名挂载</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    volumes: </span><br><span class="line">      - mysql_db_data:/var/lib/mysql</span><br><span class="line">      </span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要单独声明具名挂载的卷 其实是为了多个容器公用数据</span>      </span><br><span class="line">volumes:</span><br><span class="line">  mysql_db_data: &#123;&#125;</span><br><span class="line">  wordpress_data: &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="springboot实例"><a href="#springboot实例" class="headerlink" title="springboot实例"></a>springboot实例</h2><p>以公司的spring项目为例，首先确保<code>java -jar</code>没有问题，但是我maven打包后执行<code>java -jar</code>自动退出，打开日志详细发现没有指定yml配置文件的问题，通过<code>java -jar -Dspring.config.location=./application.yml,./application-local.yml phm-admin.jar</code> 且拷贝两个配置文件到本地才成功。</p>
<p>编写这个springboot的镜像吧，基于java8</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">COPY target/phm-admin.jar /app.jar</span><br><span class="line">COPY src/main/resources/*.yml ./</span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;-Dspring.config.location=./application.yml,./application-local.yml&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>成功后编写对应的docker-compose文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意要修改配置文件，把依赖的redis的地址改为<code>redis</code>，这里用的是redis的主机名</p>
</blockquote>
<p><img src="/images/pasted-158.png" alt="upload successful"></p>
<h2 id="DockerSwarm"><a href="#DockerSwarm" class="headerlink" title="DockerSwarm"></a>DockerSwarm</h2><blockquote>
<p>Docker swarm控制服务器物理集群（加入离开锁定集群）</p>
</blockquote>
<blockquote>
<p>Docker node控制集群节点（修改删除节点）</p>
</blockquote>
<blockquote>
<p>Docker service控制集群的所有服务（启动删除更新扩容服务）</p>
</blockquote>
<blockquote>
<p>Docker task(不是我们关心的，对于具体容器的创建，维护等)</p>
</blockquote>
<p><img src="/images/pasted-168.png" alt="upload successful"></p>
<blockquote>
<p>操作都在manager节点上，执行都在工作节点上，搭建集群的时候机器数量一定得是奇数，因为采用了投票机制，半数以上才可以</p>
</blockquote>
<blockquote>
<p>swam的命令</p>
</blockquote>
<p><img src="/images/pasted-169.png" alt="upload successful"></p>
<h3 id="1-初始化swarm："><a href="#1-初始化swarm：" class="headerlink" title="1. 初始化swarm："></a>1. 初始化swarm：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm init --help #可以看到所有选项</span><br><span class="line">docker swarm init --advertis-addr #初始化一个广播地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个地址是节点间互相链接的地址分为：公网，私网，基本用私网免费地址即本机的内网IP地址</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-170.png" alt="upload successful"></p>
<h3 id="2-获取令牌"><a href="#2-获取令牌" class="headerlink" title="2. 获取令牌"></a>2. 获取令牌</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join-token manager # 管理令牌</span><br><span class="line">docker swarm join-token worker # 工作令牌</span><br></pre></td></tr></table></figure>

<h3 id="3-节点加入"><a href="#3-节点加入" class="headerlink" title="3. 节点加入"></a>3. 节点加入</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在第二台机器加入一个worker节点</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意 被加入的节点需要防火墙允许 2377 端口</span></span><br><span class="line">docker swarm join     --token SWMTKN-1-4vm7k4jkahd939fpsmd5spts5ejlkyke968i1il8yld3oyj77r-89wdwoemvmr1joyvnu8bo7wrj     192.168.56.101:2377</span><br></pre></td></tr></table></figure>

<p>加入管理节点也是同理，管理者需要打开防火墙 2377端口。</p>
<p><img src="/images/pasted-171.png" alt="upload successful"></p>
<p><img src="/images/pasted-173.png" alt="upload successful"></p>
<blockquote>
<p>主节点管理工作节点：docker node –help</p>
</blockquote>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><blockquote>
<p>关于服务的命令：docker service –help</p>
</blockquote>
<blockquote>
<p>灰度发布</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建服务的一些参数</span></span><br><span class="line">docker service create --help #查看所有参数</span><br><span class="line">					-e:# 配置环境变量</span><br><span class="line">                    -l:# 服务标签</span><br><span class="line">                    -p:# 暴露端口</span><br><span class="line">                    -w:# 工作目录</span><br><span class="line">docker service create -p 8888:80 --name mynginx nginx </span><br><span class="line"><span class="meta">#</span><span class="bash">会发现和docker run命令很相似，实际上docker run的命令不具有扩缩容，只是个单机架构，docker service会在集群中选择一台服务器启动服务</span></span><br><span class="line">docker service ls # 查看服务，这是集群的所有服务</span><br><span class="line">docker service ps &lt;具体服务&gt; #查看具体服务的信息</span><br><span class="line">docker service inspect &lt;具体服务&gt; #服务的配置信息，部署在哪台主机上都可以看到</span><br><span class="line">docker service update --help # 动态修改服务的信息，包括扩容缩容等</span><br><span class="line">					--replicas # 服务的副本数量</span><br><span class="line">docker service update --replicas 3 mynginx # 给这个服务扩展了两个</span><br><span class="line"></span><br><span class="line">docker service scale mynginx=4 # 同replicas的功能</span><br><span class="line"></span><br><span class="line">docker service rm &lt;具体服务名&gt; # 移除服务</span><br><span class="line"></span><br><span class="line">docker service rollback &lt;服务&gt; # 如果上一次扩容了，回滚到上次</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局模式</span></span><br><span class="line">docker service create --mode global ....# 启动全局服务，不加默认是replicated副本模式</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">全局服务不可拓展只有一个，一般可以用来作为中心日志收集服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h3><p>docker compose 是单机的，想要集群部署，需要docker stack</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d xxx.yml # 单机</span><br><span class="line"></span><br><span class="line">docker stack deploy xxx.yml # 部署一个可以扩容的服务</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Secret"><a href="#Docker-Secret" class="headerlink" title="Docker Secret"></a>Docker Secret</h3><p>安全配置，配置证书密码等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker secret --help</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Config"><a href="#Docker-Config" class="headerlink" title="Docker Config"></a>Docker Config</h3><p>配置</p>
<h3 id="做云的思想"><a href="#做云的思想" class="headerlink" title="做云的思想"></a>做云的思想</h3><p>有了docker swarm其实已经可以做云了，举例，用公司机房，加入机房平时不忙，服务器都闲置的时候其实可以搭建好docker swam的集群环境，做个卖vps的页面，用户每次买一个服务器，实际就在docker中新建一个linux虚拟机，副本新增一个，配置给路由器好网络出入站规则，就是一个简单的云了。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>部署好后，服务器的任意一个地址都可以访问集群内的服务，这时候一台服务器可以开多个同端口的服务，因为服务之间访问是通过容器名而不是ip+端口,集群内部通过DNS访问service</p>
<p>Docker Swarm 的负载均衡分为两种：</p>
<p>Swarm集群内的service之间的相互访问需要做负载均衡，称为内部负载均衡（Internal LB）</p>
<p>从Swarm集群外部访问服务的公开端口，也需要做负载均衡，称外部部负载均衡(Exteral LB or Ingress LB)</p>
<h2 id="了解-集群节点奇数的原因"><a href="#了解-集群节点奇数的原因" class="headerlink" title="了解 集群节点奇数的原因"></a>了解 集群节点奇数的原因</h2><p><a href="https://blog.csdn.net/qq_42393859/article/details/82792211">转载其他人blog</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">无论是公司的生产环境，还是自己搭建的测试环境，Zookeeper集群的节点个数都是奇数个。至于为什么要是奇数个，以前只是模糊的知道是为了满足选举需要，并不知道详细的原因。最近重点学习zookeeper，了解到其中的原理，现将其整理记录下来。</span><br><span class="line"></span><br><span class="line">首先需要明确zookeeper选举的规则：leader选举，要求 可用节点数量 &gt; 总节点数量/2  。注意 是 &gt; , 不是 ≥。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">注：为什么规则要求 可用节点数量 &gt; 集群总结点数量/2 ？  如果不这样限制，在集群出现脑裂的时候，可能会出现多个子集群同时服务的情况（即子集群各组选举出自己的leader）， 这样对整个zookeeper集群来说是紊乱的。</span><br><span class="line"></span><br><span class="line">换句话说，如果遵守上述规则进行选举，即使出现脑裂，集群最多也只能回出现一个子集群可以提供服务的情况（能满足节点数量&gt; 总结点数量/2 的子集群最多只会有一个）。所以要限制 可用节点数量 &gt; 集群总结点数量/2 。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">采用奇数个的节点主要是出于两方面的考虑：</span><br><span class="line"></span><br><span class="line">1、防止由脑裂造成的集群不可用。</span><br><span class="line"></span><br><span class="line">首先，什么是脑裂？集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，小集群各自选出自己的master节点，导致原有的集群出现多个master节点的情况，这就是脑裂。</span><br><span class="line"></span><br><span class="line">下面举例说一下为什么采用奇数台节点，就可以防止由于脑裂造成的服务不可用：</span><br><span class="line"></span><br><span class="line">(1) 假如zookeeper集群有 5 个节点，发生了脑裂，脑裂成了A、B两个小集群： </span><br><span class="line"></span><br><span class="line">     (a) A ： 1个节点 ，B ：4个节点 ， 或 A、B互换</span><br><span class="line"></span><br><span class="line">     (b) A ： 2个节点， B ：3个节点  ， 或 A、B互换</span><br><span class="line"></span><br><span class="line">    可以看出，上面这两种情况下，A、B中总会有一个小集群满足 可用节点数量 &gt; 总节点数量/2 。所以zookeeper集群仍然能够选举出leader ， 仍然能对外提供服务，只不过是有一部分节点失效了而已。</span><br><span class="line"></span><br><span class="line">(2) 假如zookeeper集群有4个节点，同样发生脑裂，脑裂成了A、B两个小集群：</span><br><span class="line"></span><br><span class="line">    (a) A：1个节点 ，  B：3个节点，   或 A、B互换 </span><br><span class="line"></span><br><span class="line">    (b) A：2个节点 ， B：2个节点</span><br><span class="line"></span><br><span class="line">    可以看出，情况(a) 是满足选举条件的，与（1）中的例子相同。 但是情况(b) 就不同了，因为A和B都是2个节点，都不满足 可用节点数量 &gt; 总节点数量/2 的选举条件， 所以此时zookeeper就彻底不能提供服务了。</span><br><span class="line"></span><br><span class="line">综合上面两个例子可以看出： 在节点数量是奇数个的情况下， zookeeper集群总能对外提供服务（即使损失了一部分节点）；如果节点数量是偶数个，会存在zookeeper集群不能用的可能性（脑裂成两个均等的子集群的时候）。</span><br><span class="line"></span><br><span class="line">在生产环境中，如果zookeeper集群不能提供服务，那将是致命的 ， 所以zookeeper集群的节点数一般采用奇数个。</span><br><span class="line"></span><br><span class="line">2、在容错能力相同的情况下，奇数台更节省资源。</span><br><span class="line"></span><br><span class="line">leader选举，要求 可用节点数量 &gt; 总节点数量/2  。注意 是 &gt; , 不是 ≥。</span><br><span class="line"></span><br><span class="line">举两个例子：</span><br><span class="line"></span><br><span class="line">(1) 假如zookeeper集群1 ，有3个节点，3/2=1.5 ,  即zookeeper想要正常对外提供服务（即leader选举成功），至少需要2个节点是正常的。换句话说，3个节点的zookeeper集群，允许有一个节点宕机。</span><br><span class="line"></span><br><span class="line">(2) 假如zookeeper集群2，有4个节点，4/2=2 , 即zookeeper想要正常对外提供服务（即leader选举成功），至少需要3个节点是正常的。换句话说，4个节点的zookeeper集群，也允许有一个节点宕机。</span><br><span class="line"></span><br><span class="line">那么问题就来了， 集群1与集群2都有 允许1个节点宕机 的容错能力，但是集群2比集群1多了1个节点。在相同容错能力的情况下，本着节约资源的原则，zookeeper集群的节点数维持奇数个更好一些。</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka入门</title>
    <url>/2021/02/25/Kafka%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Kafka-消息队列入门"><a href="#Kafka-消息队列入门" class="headerlink" title="Kafka 消息队列入门"></a>Kafka 消息队列入门</h1><span id="more"></span>

<blockquote>
<p>Message Queue : MQ 市场上有很多实现：RabbitMQ，Kafka，ActiveMQ等，本质和java里面的普通队列区别不大</p>
</blockquote>
<blockquote>
<p>一般消息不是永久存储的，消息在队列内是可以设置存储时间，是个平台间的中间件</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote>
<p>用户注册时，需要将注册信息保存到数据库，还需要发送邮件和短信，但是发送邮件和短信需要其他外部服务器配合，需要额外时间，这时就可以用消息队列异步处理。实质还是系统解耦用。</p>
</blockquote>
<blockquote>
<p>流量削峰，某一时刻流量太大的处理很容易压垮数据库，这时候可以将请求放入队列</p>
</blockquote>
<blockquote>
<p>日志处理，分析用户行为，可以将用户点击的商品等信息存入队列，然后大数据实时处理系统（Flink程序）会将用户行为计算出结果（推送类似视频或者商品）。</p>
</blockquote>
<h2 id="消息队列的交互模型"><a href="#消息队列的交互模型" class="headerlink" title="消息队列的交互模型"></a>消息队列的交互模型</h2><blockquote>
<p>http请求响应模型很简单，前端发http请求，后端响应</p>
</blockquote>
<blockquote>
<p>数据库请求模型，后端执行sql语句，通过MySql通信协议，传递给MySql，数据库执行将结果返回</p>
</blockquote>
<blockquote>
<p>消息队列的模型则是由生产者将消息生产到队列，消费者从队列中取出</p>
</blockquote>
<h3 id="交互模式：点对点模式"><a href="#交互模式：点对点模式" class="headerlink" title="交互模式：点对点模式"></a>交互模式：点对点模式</h3><blockquote>
<p>生产者生产完的消息发送到队列，消费者在消费后消息就被队列删除，所以消费者不可能会接收已经消费过的数据。</p>
</blockquote>
<blockquote>
<p>特点：</p>
<ul>
<li>每个消息只有一个接收者</li>
<li>发送者和接收者无关</li>
<li>接收者收到消息后需要应答队列，以便队列删除</li>
</ul>
</blockquote>
<h3 id="交互模式：发布订阅模式"><a href="#交互模式：发布订阅模式" class="headerlink" title="交互模式：发布订阅模式"></a>交互模式：发布订阅模式</h3><blockquote>
<p>生产者生产数据到队列，监听队列的所有消费者都可以消费消息</p>
</blockquote>
<blockquote>
<p>特点：</p>
<ul>
<li>每个消息多个订阅者</li>
<li>发布者和订阅者有时间上的依赖，针对某个主题，必须有订阅者订阅这个主题，才能发布消息</li>
<li>订阅者需要提前订阅且保持在线</li>
</ul>
</blockquote>
<h2 id="Kafka特点"><a href="#Kafka特点" class="headerlink" title="Kafka特点"></a>Kafka特点</h2><blockquote>
<ul>
<li>开源，用scala写的</li>
<li>可以发布订阅</li>
<li>带容错可以持久化消息</li>
<li>可以流处理（类似sparks stream）</li>
</ul>
</blockquote>
<h2 id="Kafka的应用场景"><a href="#Kafka的应用场景" class="headerlink" title="Kafka的应用场景"></a>Kafka的应用场景</h2><blockquote>
<ol>
<li>用在系统间的数据管道</li>
<li>构建实时流应用，用来转换或者响应数据流<br>很多系统产生的数据都可以放入<code>Kafka</code>，很多系统可以从<code>Kafka</code>集群中消费</li>
</ol>
</blockquote>
<h2 id="Kafka环境搭建-普通搭建"><a href="#Kafka环境搭建-普通搭建" class="headerlink" title="Kafka环境搭建(普通搭建)"></a>Kafka环境搭建(普通搭建)</h2><blockquote>
<ol>
<li>去官网下载java包，解压配置即可</li>
<li>安装好自己的linux服务器（不推荐在windows下操作）</li>
</ol>
</blockquote>
<p><img src="/images/pasted-130.png" alt="upload successful"></p>
<blockquote>
<ol start="3">
<li>将包导入到服务器解压缩，修改配置文件：server.properties</li>
</ol>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定brokerID （broker就是kafka的服务进程，第一个节点是0，第二个是1...）</span></span><br><span class="line">broker.id=0 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定kafka的数据位置 一般被存放在了临时目录，随便给个目录</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-132.png" alt="upload successful"></p>
<blockquote>
<ol start="4">
<li>将安装好的kafka复制到另一台服务器并且修改里面的brokder.id为1</li>
</ol>
</blockquote>
<blockquote>
<ol start="5">
<li>配置两台主机的KAFKA_HOME环境变量</li>
</ol>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入以下内容</span></span><br><span class="line">export KAFKA_HOME=/opt/kafka_2.12-3.1.0</span><br><span class="line">export PATH=:$PATH:$&#123;KAFKA_HOME&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行生效命令</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="6">
<li>启动服务 先启动zookeeper</li>
</ol>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动zookeeper</span></span><br><span class="line">nohup bin/zookeeper server start.sh config/zookeeper.properties &amp; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动kafka</span></span><br><span class="line">cd /opt/kafka_2.12-3.1.0</span><br><span class="line">nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试是否启动成功</span></span><br><span class="line">bin/kafka-topics.sh --bootstrap-server node1.tr.cn:9092 --list </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>VSC Remote Container</title>
    <url>/2022/04/08/VSC-Remote-Container/</url>
    <content><![CDATA[<h1 id="Visual-Studio-Code-Remote-Container"><a href="#Visual-Studio-Code-Remote-Container" class="headerlink" title="Visual Studio Code : Remote Container"></a>Visual Studio Code : Remote Container</h1><blockquote>
<p>一款神级插件使用说明</p>
</blockquote>
<span id="more"></span>

<h2 id="插件说明"><a href="#插件说明" class="headerlink" title="插件说明"></a>插件说明</h2><blockquote>
<p>这款插件：<code>Remote Containers</code> 可以将快速的将本地的工程目录放入独立容器中，所有的环境配置，运行，都在容器内执行，但是工程文件编辑就在vsc内，用户体验极好</p>
</blockquote>
<blockquote>
<p>应该更适用于开发环境版本较多的人，假如一个工程是用python2.7开发的，另一个是python3 两个同时安装在宿主机需要版本切换控制。类似于这种情况，多版本导致的冲突污染。使用该插件可以将两个工程都放入对应的容器内部避免了主机版本冲突。</p>
</blockquote>
<blockquote>
<p>更为强大的是很多配置都是自动化的，假如一个spring的maven项目在文件夹内，使用这款插件可以快速搭建maven环境，插件自动按照我们给的选项生成镜像容器，导入jdk，安装maven，并且自动启动java服务器，同步pom内的依赖，导入结束后只需 <code>F5</code> 启动即可。</p>
</blockquote>
<blockquote>
<p>一个很有特色的功能点是，假如团队合作中多人开发，某人提交了一个 <code>PR/MR</code> 不清楚这个功能点是否好用，可以将这个<code>PR/MR</code>地址复制下来，使用插件快速搭建，插件将自动拉去这个提交的代码构建环境快速启动测试</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><blockquote>
<p>使用官方DEMO感受插件带来的快速构建工作环境镜像，这里用的java maven工程</p>
</blockquote>
<p><img src="/images/pasted-159.png" alt="upload successful"></p>
<p><img src="/images/pasted-160.png" alt="upload successful"></p>
<p>可以看到很快速的启动了一个镜像，可以在vsc内编辑任何代码，只要按下 <code>F5</code>就可以启动服务了。所有的环境配置包括maven仓库都存储在容器内，不会污染主机环境。</p>
<p><img src="/images/pasted-161.png" alt="upload successful"></p>
<p>点击即可关闭和容器的链接</p>
<p><img src="/images/pasted-163.png" alt="upload successful"></p>
<p>可以看到有很多选项，可以本地打开目录，可以打开远程仓库甚至是一个<code>PR/MR</code>请求。</p>
<h3 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h3><blockquote>
<p>这里以java的springboot工程为例，先在本地文件夹内建立好项目文件，也可以git拉取</p>
</blockquote>
<p><img src="/images/pasted-162.png" alt="upload successful"></p>
<blockquote>
<p>打开vsc的控制台，选择open folder</p>
</blockquote>
<p><img src="/images/pasted-166.png" alt="upload successful"></p>
<blockquote>
<p>接下来会选择基础的jdk等开发环境设置，选好jdk，maven，os的版本即可</p>
</blockquote>
<p><img src="/images/pasted-164.png" alt="upload successful"></p>
<blockquote>
<p>在构建完毕后最好安装这些官方推荐的插件，这些插件将会被安装在容器内部，用于容器内的项目开发，安装后才有不输给IntelliJIDea的开发体验</p>
</blockquote>
<h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><blockquote>
<p>实质上插件本身是通过我们选择时给的选项生成Dockerfile文件和一个 .devcontainer.json文件，这个文件是用于生成的镜像执行的文件包括一些环境配置。</p>
</blockquote>
<blockquote>
<p>在我们选择好选项后，插件生成Dockerfile并且build镜像启动容器，在这个过程中我们的工作目录会自动挂载到容器内的/vscode目录下</p>
</blockquote>
<blockquote>
<p>如果想先看看生成的配置文件，再执行构建，可以选择这条选项</p>
</blockquote>
<p><img src="/images/pasted-167.png" alt="upload successful"></p>
<blockquote>
<p>选择目录，选择配置，生成文件，修改配置确认无误后，可以再次选择 open container 打开配置文件所在目录就会开始自动构建配置</p>
</blockquote>
<h3 id="VSC的插件入门"><a href="#VSC的插件入门" class="headerlink" title="VSC的插件入门"></a>VSC的插件入门</h3><p><img src="/images/pasted-165.png" alt="upload successful"></p>
<p>每次打开都可以看到主页面的右下角这些start，随便点击即可看到插件的学习使用教程，推荐安装的插件每个都看一下知道怎么修改配置</p>
]]></content>
      <categories>
        <category>VSC</category>
      </categories>
      <tags>
        <tag>VSC</tag>
      </tags>
  </entry>
  <entry>
    <title>WRF+WPS配置</title>
    <url>/2025/03/01/WRF-WPS%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="WRF"><a href="#WRF" class="headerlink" title="WRF"></a>WRF</h1><h1 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h1><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1>]]></content>
  </entry>
  <entry>
    <title>Go Lang Basic</title>
    <url>/2022/04/12/Go-Lang/</url>
    <content><![CDATA[<h2 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h2><span id="more"></span>

<blockquote>
<p>go语言学习，记录《Head First Go》的学习内容</p>
<p>前面几十页都在讲怎么更好的学习……</p>
<p>编译最快，运行效率最高，便捷分发任务，多线程效率高</p>
<p>07年google开始立项GO语言，因为每次测试新功能就要编译老版本，编译至少要一小时,所以开发全新的语言，快，不冗余，gc回收，好写多线程，支持多核cpu的语言。</p>
</blockquote>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><blockquote>
<p>package: go使用package来管理同一项目的所有文件，使用 package main作为主程序的入口，且方法名得是main作为入口代码</p>
<p>import: go文件里想要使用其他文件内定义的方法需要使用import,import 包名，这样比起引用整个依赖库更灵活轻量，如果import的包没有被使用过，编译不通过</p>
<p>标准的go文件布局：</p>
<ul>
<li><p>package <code>&lt;name&gt;</code></p>
</li>
<li><p>import <code>&quot;&lt;name&gt;&quot;</code></p>
</li>
<li><p>actual code : 一般都是由各个方法组成的</p>
</li>
</ul>
<p>可以用 <code>;</code>结尾 随意，以下代码可以 <code>go fmt</code>格式化，<code>go run hello.go</code>执行</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;hello go from tr&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>import 的另一种形式</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//import &quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;math&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">//fmt.Println(&quot;hello go from tr&quot;,&quot;!&quot;)</span></span><br><span class="line"> math.Floor(<span class="number">2.75</span>)</span><br><span class="line"> strings.Title(<span class="string">&quot;head first go&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>import 导入的实际是包的路径，包名不一定需要等于路径名，例如这里，rand包路径在<code>math/rand</code>下，且包名是rand,所以调用方法是<code>rand.Intn(100)</code>生成随机数，通常情况下包路径的最后一段就和包名同名</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import &quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>转义符 这个不多说，有意思的是fmt.Print方法里面传入转义符或者其他字符<code>&#39;</code>单引号为单字符，会输出这些字符的原始unicode编码</p>
<p>true &amp; false</p>
<p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>==</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> 都和其他语言一样来，返回<code>true/flase</code></p>
<p>go提供了查看数据类型的工具如下：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="number">42</span>)) <span class="comment">// int</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="number">3.14</span>)) <span class="comment">//float64</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="literal">true</span>)) <span class="comment">//bool</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(<span class="string">&quot;hello,go&quot;</span>)) <span class="comment">//string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="go的变量定义和声明"><a href="#go的变量定义和声明" class="headerlink" title="go的变量定义和声明"></a>go的变量定义和声明</h3><blockquote>
<p>go的变量有很多</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int8</span></span><br><span class="line"><span class="keyword">int16</span></span><br><span class="line"><span class="keyword">int32</span></span><br><span class="line"><span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">unit: 和<span class="keyword">int</span>一样 只不过只能存储正数，所以占用空间少一半</span><br><span class="line">unit8</span><br><span class="line">unit16</span><br><span class="line">unit32</span><br><span class="line">unit64</span><br><span class="line"></span><br><span class="line"><span class="keyword">float32</span> :除了<span class="keyword">float64</span>还有<span class="number">32</span>位的版本</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> quantity = <span class="number">4</span> <span class="comment">//可以忽略int</span></span><br><span class="line"> <span class="keyword">var</span> length,width <span class="keyword">float64</span> = <span class="number">1.2</span>，<span class="number">2.4</span></span><br><span class="line"> <span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"> fmt.Println(quantity) <span class="comment">// 初始化都是0</span></span><br><span class="line"> fmt.Println(length)</span><br><span class="line"> fmt.Println(width)</span><br><span class="line"> fmt.Println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义可以简写 <code>:=</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">//var quantity int = 12</span></span><br><span class="line"> <span class="comment">//var length,width float64 = 1.1,1.2</span></span><br><span class="line"> <span class="comment">//var name string = &quot;test&quot;</span></span><br><span class="line"> <span class="comment">// 简写形式</span></span><br><span class="line"> quantity := <span class="number">12</span></span><br><span class="line"> length, width := <span class="number">1.1</span>, <span class="number">1.2</span></span><br><span class="line"> name := <span class="string">&quot;tr&quot;</span></span><br><span class="line"> fmt.Println(quantity)</span><br><span class="line"> fmt.Println(length)</span><br><span class="line"> fmt.Println(width)</span><br><span class="line"> fmt.Println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>go的命名规则</p>
<ul>
<li>变量/方法若以大写字母开头，则被认为是暴露出去的，其他包文件可以访问，反之是私有的只有包内的文件可以访问</li>
<li>不能以数字开头</li>
<li>遵循驼峰法</li>
</ul>
<p>注意：数学操作或者比较都需要输入的类型为同一类型，举例int和float64的不能做乘除，需要做转换<code>float64(变量)</code>，如果是float64转int，小数会被截掉</p>
<p>go的if判断也和其他语言一样</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &amp;&amp; <span class="literal">true</span> &#123;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> !<span class="literal">true</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="go-的cli工具"><a href="#go-的cli工具" class="headerlink" title="go 的cli工具"></a>go 的cli工具</h3><blockquote>
<p>go是这么编译的 一个大概流程</p>
</blockquote>
<p><img src="/images/pasted-174.png" alt="upload successful"></p>
<blockquote>
<p>go build ： 编译，可以发给其他人执行<br>go run ： 编译执行，不输出编译结果文件<br>go fmt ：格式化<br>go version<br>go install <code>&lt;文件夹的名字&gt;</code>：需要文件夹内有go代码和src目录，且go代码处于main包下，才能在bin文件夹下生成可执行文件<br>go get ：想要导入其他人的包就需要用这个，在后面会学到导入其他人的包的组织方式，社区的代码托管在github上，可以通过go get获取，将自动下载到工作区的src下 例子：<code>go get github.com/headfirstgo/greeting</code><br>go doc ：导入了他人的包后想要使用，go doc可以查看说明,比如，<code>go doc strconv</code>查看包，<code>go doc strconv ParseFloat</code>查看包内方法</p>
</blockquote>
<h3 id="方法调用-时间-字符"><a href="#方法调用-时间-字符" class="headerlink" title="方法调用 时间 字符"></a>方法调用 时间 字符</h3><blockquote>
<p>有意思的是 go可以返回多个值，go规定定义的变量必须要被用到，所以如果返回的多个值有不需要的，可以用下划线<code>_</code>代表废弃<code>name,_ := reader.ReadString()</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// 时间调用</span></span><br><span class="line"> <span class="keyword">var</span> now time.Time = time.Now()</span><br><span class="line"> fmt.Println(now.Year())</span><br><span class="line"> <span class="comment">// 字符调用</span></span><br><span class="line"></span><br><span class="line"> broken := <span class="string">&quot;G# r#cks&quot;</span></span><br><span class="line"> replacer := strings.NewReplacer(<span class="string">&quot;#&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line"> fixed := replacer.Replace(broken)</span><br><span class="line"> fmt.Println(fixed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="GO-在if中初始化"><a href="#GO-在if中初始化" class="headerlink" title="GO 在if中初始化"></a>GO 在if中初始化</h3><blockquote>
<p><code>err := myFunc()</code> 错误时常会有，有的时候我们会忘记<code>err</code>的定义是否要加上<code>:</code>，但是实际上<code>err</code>很快只用来if判断是否出错，随后就不在使用，这时我们可以在if中直接初始化<code>err</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err:=myFunc(); err!=<span class="literal">nil</span>&#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GO-的switch"><a href="#GO-的switch" class="headerlink" title="GO 的switch"></a>GO 的switch</h3><blockquote>
<p>switch 自动加上break，如果要继续往下，加上<code>fallthrough</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">val := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> val &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	<span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GO-字符"><a href="#GO-字符" class="headerlink" title="GO 字符"></a>GO 字符</h3><blockquote>
<p>GO 使用<code>utf8</code>编码，当我们使用<code>len(myStr)</code>的时候，返回的是字符串的字节数，而不是字符个数，需要反映字符个数用：<code>utf8.RuneCountInString(myStr)</code></p>
<p>如果想要处理字符串，处理里面的单个字符，GO提供了字符串到字符slice的转换</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">strRunes := []<span class="keyword">rune</span>(myStr) <span class="comment">// 字符串转slice</span></span><br><span class="line">str := <span class="keyword">string</span>(strRunes) <span class="comment">// slice 转字符串</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>用for遍历字符串</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> position,c := <span class="keyword">range</span> myStr&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="错误处理-用户输入"><a href="#错误处理-用户输入" class="headerlink" title="错误处理 用户输入"></a>错误处理 用户输入</h3><blockquote>
<p>go的方法都会返回一个error，如果有错，这个值不为<code>Nil</code>，且提供了日志<code>log</code>让我们用来输出</p>
<p>注意的是这里的err不能定义为error，因为有系统类型error，如果手动定义了error会遮盖系统的</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户输入和判断</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Print(<span class="string">&quot;Enter a grade: &quot;</span>)</span><br><span class="line"> reader := bufio.NewReader(os.Stdin)</span><br><span class="line"> <span class="comment">// input,_ := reader.ReadString(&#x27;\n&#x27;) 使用blank identifier忽视错误</span></span><br><span class="line"> input,err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)  <span class="comment">// 接收错误</span></span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> file,err := os.Open(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> scanner := bufio.NewScanner(file)</span><br><span class="line"> <span class="keyword">for</span> scanner.Scan()&#123;</span><br><span class="line">  fmt.Println(scanner.Text())</span><br><span class="line"> &#125;</span><br><span class="line">    err = file.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">if</span> scanner.Err() != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(scanner.Err())</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="返回异常"><a href="#返回异常" class="headerlink" title="返回异常"></a>返回异常</h3><blockquote>
<p>go的存在返回多个值的特性，所以一个方法如果执行参数有问题，可以返回error类型的参数，通过调用error包的New方法</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;errors&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> sayHi()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, calc(<span class="number">-3</span>, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(height <span class="keyword">int</span>, width <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> height &lt; <span class="number">0</span> || width &lt; <span class="number">0</span> &#123;</span><br><span class="line">  errA := errors.New(<span class="string">&quot;can not be negative&quot;</span>) <span class="comment">// 原始用法，如果需要格式化参数用下面这种</span></span><br><span class="line">  errB := fmt.Errorf(<span class="string">&quot;can not be negative,value is %d&quot;</span>, (height * width))</span><br><span class="line">  <span class="comment">// 可以直接打印效果等同于：err.Error()</span></span><br><span class="line">  log.Fatal(errA)</span><br><span class="line">  msg := errB.Error()</span><br><span class="line">  fmt.Println(msg)</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> height * width</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="字符转数字"><a href="#字符转数字" class="headerlink" title="字符转数字"></a>字符转数字</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Print(<span class="string">&quot;Enter a grade: &quot;</span>)</span><br><span class="line"> reader := bufio.NewReader(os.Stdin)</span><br><span class="line"> <span class="comment">// input,_ := reader.ReadString(&#x27;\n&#x27;) 使用blank identifier忽视错误</span></span><br><span class="line"> input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 接收错误</span></span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(input)</span><br><span class="line"> input = strings.TrimSpace(input)</span><br><span class="line"> grade, err := strconv.ParseFloat(input, <span class="number">64</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> grade &gt; <span class="number">60</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;qualified&quot;</span>)</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我们看到err似乎被定义了两次，在go中，同一个变量名被定义两次是不可以的，但是如果简写形式<code>:=</code>下，定义多个变量，有至少一个变量是未曾出现过的，那么是合法的</p>
</blockquote>
<h3 id="scope-域"><a href="#scope-域" class="headerlink" title="scope 域"></a>scope 域</h3><blockquote>
<p>需要注意的是go的域是通过{}来划分的，{}内部定义的变量无法被外部读取</p>
</blockquote>
<p><img src="/images/pasted-175.png" alt="upload successful"></p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>基本和其他语言一致</p>
<blockquote>
<p>continue 和 break 还是一样的用法</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x:=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++ &#123;</span><br><span class="line"> fmt.Pintln(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line">x:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x&lt;<span class="number">10</span> &#123;</span><br><span class="line"> fmt.Pintln(x)</span><br><span class="line">    x++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>猜数游戏</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> seconds := time.Now().Unix()</span><br><span class="line"> rand.Seed(seconds) <span class="comment">// 如果不给时间种子，每次随机结果一样</span></span><br><span class="line"> target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"> fmt.Println(<span class="string">&quot;start gussing&quot;</span>)</span><br><span class="line"> fmt.Println(target)</span><br><span class="line"> <span class="comment">// 循环10次</span></span><br><span class="line"> <span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">10</span>; x++ &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;u have&quot;</span>, <span class="number">10</span>-x, <span class="string">&quot;times to guss&quot;</span>)</span><br><span class="line">  <span class="comment">// 下一步 用户输入</span></span><br><span class="line">  reader := bufio.NewReader(os.Stdin)</span><br><span class="line">  input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">  input = strings.TrimSpace(input)</span><br><span class="line">  guss, err := strconv.Atoi(input)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> guss == target &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;right&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> guss &lt; target &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;lower&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;higher&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(<span class="string">&quot;u failed&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Printf-Sprintf以及占位符"><a href="#Printf-Sprintf以及占位符" class="headerlink" title="Printf,Sprintf以及占位符"></a>Printf,Sprintf以及占位符</h3><p>和c的用法一样：<code>Printf(&quot;number: %0.2f\n,1.0、3.0)</code></p>
<p>Sprintf 和 Printf一样，不同的是Sprintf打印，而是返回格式化的字符串</p>
<p><img src="/images/pasted-176.png" alt="upload successful"></p>
<blockquote>
<p>%v 和 %#v 很有意思，后者不转义，代码里啥样，显示就是啥样</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>和其他语言差不多，没啥好说，命名不能数字开头，大写字母开头表示暴露</p>
<p>方法内 类型和变量名是倒着的，方法返回值类型也在最后和scala一样</p>
<p>func calc(width int) 这里是值拷贝</p>
<p>如果方法有返回类型，最后一行不是reture编译不通过</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> sayHi()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><blockquote>
<p>返回多个值需要在方法定义内加上<code>()</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getParam</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>,<span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>甚至可以给每个返回值取名</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getParam</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="params">(vale <span class="keyword">int</span>,name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一般这个特性用来返回方法是否出错</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(height <span class="keyword">int</span>, width <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> height &lt; <span class="number">0</span> || width &lt; <span class="number">0</span> &#123;</span><br><span class="line">  errA := errors.New(<span class="string">&quot;can not be negative&quot;</span>) <span class="comment">// 原始用法，如果需要格式化参数用下面这种</span></span><br><span class="line">  errB := fmt.Errorf(<span class="string">&quot;can not be negative,value is %d&quot;</span>, (height * width))</span><br><span class="line">  <span class="comment">// 可以直接打印效果等同于：err.Error()</span></span><br><span class="line">  <span class="comment">//log.Fatal(errA)</span></span><br><span class="line">  msg := errB.Error()</span><br><span class="line">  fmt.Println(msg)</span><br><span class="line">  <span class="comment">// 也可以抛出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>, errA</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> height * width, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><blockquote>
<p><code>fmt.Println(1,2)</code>如同这个函数，有些函数可以接收若干个参数</p>
<p>想要函数可变接收参数如下</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(number <span class="keyword">int</span> , numbers ...<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"> <span class="comment">//numbers是个slice</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 无法直接传递进去，需要转换</span></span><br><span class="line">mysli :=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">get(<span class="number">1</span>,mysli...)</span><br></pre></td></tr></table></figure>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote>
<p>学过了scala后还是觉得指针不好，虽然很灵活单也很容易出问题，且go支持了多值返回，更不推荐指针了</p>
<p>go 是值传递语言，所有传入的值都只拷贝，可以通过指针将变量的地址传入，这里还是值传递，只不过拷贝的是地址。</p>
<p>书里的解释很有趣，指针类型用<code>*</code>表示，go的定义和其他语言是反的，所以指针类型其他语言是<code>int *</code> ，go是<code>*int</code>表示<code>pointer to int</code>：指向int类型的指针</p>
<p>通过<code>fmt.Pintln(reflect.TypeOf(&amp;num))</code>查看类型</p>
<p>特别注意的是：其他语言的指针，只能在自己的访问域内使用，举例，假如方法内生成了局部变量且将局部变量的指针返回，其他语言在方法执行结束后，指针指向的地址空间会被释放，但是go不会，只要有人用就不会释放</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// 查看地址</span></span><br><span class="line"> <span class="keyword">var</span> amount <span class="keyword">int</span> = <span class="number">19</span></span><br><span class="line"> fmt.Println(&amp;amount)</span><br><span class="line"> <span class="comment">// 查看类型</span></span><br><span class="line"> fmt.Println(reflect.TypeOf(&amp;amount))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 定义指针和使用</span></span><br><span class="line"> <span class="keyword">var</span> intPointer *<span class="keyword">int</span> = &amp;amount</span><br><span class="line"> fmt.Println(intPointer, *intPointer)</span><br><span class="line"> <span class="comment">// 另一种形式</span></span><br><span class="line"> floatVal := <span class="number">1.1</span></span><br><span class="line"> floatPointer := &amp;floatVal</span><br><span class="line"> fmt.Println(floatPointer)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 修改指针指向的值</span></span><br><span class="line"> strVal := <span class="string">&quot;hello&quot;</span></span><br><span class="line"> strPointer := &amp;strVal</span><br><span class="line"> *strPointer = <span class="string">&quot;hello from tr&quot;</span></span><br><span class="line"> fmt.Println(strVal, strPointer)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取方法内的指针</span></span><br><span class="line"> <span class="keyword">var</span> receivePointer *<span class="keyword">float64</span> = genPointer()</span><br><span class="line"> fmt.Println(receivePointer, *receivePointer)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 解决值传递的问题，传递的数据可被修改</span></span><br><span class="line"> h := <span class="number">10</span></span><br><span class="line"> changeVal(&amp;h)</span><br><span class="line"> fmt.Println(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法内的指针在方法结束后如果被引用，空间不会被释放</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genPointer</span><span class="params">()</span> *<span class="title">float64</span></span> &#123;</span><br><span class="line"> val := <span class="number">1.4</span></span><br><span class="line"> <span class="keyword">return</span> &amp;val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改传递的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeVal</span><span class="params">(val *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"> *val *= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包管理-package"><a href="#包管理-package" class="headerlink" title="包管理 package"></a>包管理 package</h3><blockquote>
<p>go定义了工作区，文件夹名字就叫<code>go</code>,安装了go后默认在home目录下会有go这个文件夹，这就是默认的工作区，包含<code>bin</code>,<code>pkg</code>,<code>src</code></p>
<p>一般包名和包的文件夹名是一致的,但是<code>main</code>package是例外，main文件的package 必须是main，但是所在文件夹的名字随意，所有的文件引用都是去工作区引用的</p>
<p>如果运行失败无法找到自己写的模块，可能需要改下环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=&quot;off&quot;</span><br><span class="line">go env -w GOPATH=/home/tr/go</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将main文件所在目录改为main</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-177.png" alt="upload successful"></p>
<h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ol>
<li><p>小写</p>
</li>
<li><p>简写：fmt ==&gt; format</p>
</li>
<li><p>最好一个单词表达，如果超过一个单词用 <code>_</code></p>
</li>
<li><p>最好不常用，不然容易和本地变量命名冲突</p>
</li>
</ol>
<h3 id="常量-constants"><a href="#常量-constants" class="headerlink" title="常量 constants"></a>常量 constants</h3><ol>
<li><p>const 定义符</p>
</li>
<li><p>定义的时候必须赋值</p>
</li>
<li><p>常量不可用 <code>:=</code> 简写 但是还是可以省略类型</p>
</li>
<li><p>推荐程序内的所有“魔数”都用常量替换</p>
</li>
<li><p>最好定义在包层，而不是方法内部</p>
</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> quantity = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="cmd传递参数"><a href="#cmd传递参数" class="headerlink" title="cmd传递参数"></a>cmd传递参数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(os.Args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改go的配置"><a href="#修改go的配置" class="headerlink" title="修改go的配置"></a>修改go的配置</h3><h4 id="修改GOPATH"><a href="#修改GOPATH" class="headerlink" title="修改GOPATH"></a>修改GOPATH</h4><blockquote>
<p>go的工作目录永远在默认的home目录下，如果想要把工作区修改到其他目录，需要修改环境变量</p>
<p>go tool永远会去GOPATH下寻找我们引用的模块，假如我们自己写的模块放入了<code>/code/src</code>目录下，如果想要go编译的时候去寻找，需要<code>export GOPATH=&quot;/code&quot;</code></p>
<p><code>go env -w GO111MODULE=&quot;off&quot;</code> <code>go env -w GOPATH=&quot;/code&quot;</code>  如果<code>export</code>不起作用，可以试试这样</p>
</blockquote>
<h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><blockquote>
<p>假如导入github上其他人的包，一般是将其他人的包以URI的形式，放入src下的目录，如下，导入的时候只需输入路径<code>&quot;github.com/headfirstgo/keyboard&quot;</code></p>
</blockquote>
<p><img src="/images/pasted-178.png" alt="upload successful"></p>
<blockquote>
<p>导入他人包就是cli里的，<code>go get &lt;URL&gt;</code>，查看文档：<code>go doc &lt;URL&gt;</code></p>
</blockquote>
<h4 id="添加包说明"><a href="#添加包说明" class="headerlink" title="添加包说明"></a>添加包说明</h4><blockquote>
<p><code>go doc</code>可以查看包的信息，包给其他人用的时候需要添加一些说明</p>
<p>所有<code>Package</code>和方法语句之前的注释文档都会被<code>go doc</code>输出</p>
<p>go可以自动生成在线文档服务，<code>godoc -http=:6060</code></p>
</blockquote>
<h2 id="GO数据结构"><a href="#GO数据结构" class="headerlink" title="GO数据结构"></a>GO数据结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote>
<p>基本和其他语言一样</p>
<p>不过初始化的时候，int型的默认0，string型的默认空</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础类型数组</span></span><br><span class="line"><span class="keyword">var</span> notes [<span class="number">7</span>]<span class="keyword">string</span></span><br><span class="line">notes[<span class="number">0</span>] = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象/结构体数组 默认值是utc 0的时间</span></span><br><span class="line"><span class="keyword">var</span> dates [<span class="number">3</span>]time.Time</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速初始化数值</span></span><br><span class="line"><span class="keyword">var</span> names [<span class="number">3</span>]<span class="keyword">string</span> = [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写快速初始化</span></span><br><span class="line">names := [<span class="number">2</span>]<span class="keyword">string</span> &#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要分多行，一定要用逗号作为格式化字符(最后一行也要逗号)</span></span><br><span class="line">names := [<span class="number">2</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt可以快速打印数据接口包括 array,map,slices等</span></span><br><span class="line">fmt.Println(names)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>,names)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组的循环</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loop</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(names); i++ &#123;</span><br><span class="line">  fmt.Println(names[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>loop的另一种形式 和python的 <code>for key in</code>很像</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loog another</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> names &#123;</span><br><span class="line">  fmt.Println(index, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上这种情况，index如果没被用到，是会报错的，可以使用空定义避免</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> names &#123;</span><br><span class="line">  fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h3><blockquote>
<p>类似链表，用于解决数组长度固定问题<br>定义和数组一样，只不过不需要提供长度<br><b>本身是基于数组的，只是数组的一个限制镜像，若slice来自数组，修改数组就会导致slice变动</b></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明，因为slice基于数组，没有底层数组单声明slice无用，这时候的slice是个nil</span></span><br><span class="line"><span class="keyword">var</span> mycli []<span class="keyword">string</span></span><br><span class="line"><span class="comment">// 初始化一个数组给slice</span></span><br><span class="line">mycli = <span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">7</span>)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">mycli[<span class="number">0</span>] = <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以快速简写，且遍历和数组一样</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mycli := <span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速定义赋值</span></span><br><span class="line">mycli := []<span class="keyword">string</span>&#123;</span><br><span class="line">  <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>slice可以从现有数组中创建</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从数组的0到3截取创建slice，左闭右开</span></span><br><span class="line">myarr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">mysli := myarr[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 且可以忽略开始或者结束</span></span><br><span class="line">myslic := myarr[<span class="number">0</span>:]</span><br><span class="line">myslid := myarr[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改数组会导致slice变化</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myarr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">mysli := myarr[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">myarr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">fmt.Println(mysli)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以使用slice的时候，还是推荐make单独给slice一个数组</p>
<p>slice 有append方法可以在尾部添加数据，前面说过slice是基于数组的，如果底层的数组空间不足，append会生成新的数组，将原来值拷贝过去，这时append给一个新的slice无法确定这两个slice是否共享一个底层数组，所以建议append给原来的slice</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安全的调用slice</span></span><br><span class="line">mysli = <span class="built_in">append</span>(mysli,<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 无法确定是否属于同一数组</span></span><br><span class="line">mycli2 := <span class="built_in">append</span>(mycli,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：虽然slice初始化的时候不确定数组是个nil，但是其他方法调用的时候不用判断是否为nil，默认为nill的slice是个空slice，比如以下就是合法的操作</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sc []<span class="keyword">string</span></span><br><span class="line">sc = <span class="built_in">append</span>(sc,<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个读取文件内的文本转为float型数组的例子：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> arr, err := readFloatFromFile(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(arr)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFloatFromFile</span><span class="params">(filePath <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> numbers []<span class="keyword">float64</span></span><br><span class="line"> file, err := os.Open(filePath)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> scanner := bufio.NewScanner(file)</span><br><span class="line"> <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">  txt := strings.TrimSpace(scanner.Text())</span><br><span class="line">  number, err := strconv.ParseFloat(txt, <span class="number">64</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="comment">// 出错返回数组和错误信息</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  numbers = <span class="built_in">append</span>(numbers, number)</span><br><span class="line"> &#125;</span><br><span class="line"> err = file.Close()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> scanner.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 无错 返回数组和空</span></span><br><span class="line"> <span class="keyword">return</span> numbers, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>slice 传入可变函数需要添加<code>...</code></p>
<p>slice 排序</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sort.Strings(mySli)</span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>Map几乎可以用任意类型作为key（但是必须是可以使用<code>==</code>来比较的类型）</p>
<p>Map定义：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span></span><br><span class="line">myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>快速定义：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myMap[<span class="string">&quot;first&quot;</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>map字面量（快速赋值）：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1.2</span>,<span class="string">&quot;b&quot;</span>:<span class="number">1.3</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>map[something]</code> 如果从未定义过，也可以获取结果是0，想要区分一个key是否被赋值过如下：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map访问可以多带一个返回参数，是否接收都可以用于判断是否赋值过</span></span><br><span class="line"><span class="comment">// myMap[&quot;tzq&quot;] # 这是直接访问</span></span><br><span class="line">value,ok := myMap[<span class="string">&quot;tzq&quot;</span>]</span><br><span class="line"><span class="comment">// ok 为true表示赋值过</span></span><br><span class="line"><span class="comment">// 若只想知道是否赋值过</span></span><br><span class="line">_,ok := myMap[<span class="string">&quot;tzq&quot;</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从myMap中删除key为name的值</span></span><br><span class="line"><span class="built_in">delete</span>(myMap,<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>map打印的时候是乱序打印的，可以将key塞到一个slice，然后排序slice打印</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> grades := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>&#123;</span><br><span class="line">  <span class="string">&quot;tr&quot;</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="string">&quot;tzq&quot;</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="string">&quot;sxy&quot;</span>:<span class="number">90</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> mySlic []<span class="keyword">string</span></span><br><span class="line"> <span class="comment">// 可以不写_</span></span><br><span class="line"> <span class="keyword">for</span> k := <span class="keyword">range</span> grades&#123;</span><br><span class="line">  mySlic = <span class="built_in">append</span>(mySlic,k)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 不返回值</span></span><br><span class="line"> sort.Strings(mySlic)</span><br><span class="line"> <span class="keyword">for</span> _,name := <span class="keyword">range</span> mySlic&#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%5s || %5.2f\n&quot;</span>,name,grades[name])</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个使用map的例子，统计选票</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;reading&quot;</span>)</span><br><span class="line"> names,err := readStringFromFile(<span class="string">&quot;./names&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 统计名字出现次数</span></span><br><span class="line"> res := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> _,name := <span class="keyword">range</span> names&#123;</span><br><span class="line">  res[name]++</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(res) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readStringFromFile</span><span class="params">(path <span class="keyword">string</span>)</span><span class="params">([]<span class="keyword">string</span>,error)</span></span>&#123;</span><br><span class="line"> res := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"> file,err := os.Open(path)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"> scanner := bufio.NewScanner(file)</span><br><span class="line"> <span class="keyword">for</span> scanner.Scan()&#123;</span><br><span class="line">  res = <span class="built_in">append</span>(res,strings.TrimSpace(scanner.Text())) </span><br><span class="line"> &#125;</span><br><span class="line"> err = file.Close()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> scanner.Err()!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> res,<span class="literal">nil</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体-structs（和C很像）"><a href="#结构体-structs（和C很像）" class="headerlink" title="结构体 structs（和C很像）"></a>结构体 structs（和C很像）</h3><blockquote>
<p>单独的结构体定义变量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单独定义一个结构体（类似对象）</span></span><br><span class="line"><span class="keyword">var</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line"> name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">person.name = <span class="string">&quot;tr&quot;</span></span><br><span class="line">fmt.Println(person.name)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自定义数据类型 配合结构体(类似实现java的类)</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age <span class="keyword">int</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> tr Person</span><br><span class="line"> tr.name = <span class="string">&quot;te&quot;</span></span><br><span class="line"> tr.age = <span class="number">24</span></span><br><span class="line"> fmt.Println(tr)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结构体类型可以作为方法出入参，但是要记住go永远是值拷贝，传递的结构体，方法内修改不会影响方法外的结构体，所以建议所有对原始数据修改的方法，都用指针。且如果结构体很大，也用指针，不然拷贝很久消耗内存和更多cpu</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age <span class="keyword">int</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//var person struct&#123;</span></span><br><span class="line"> <span class="comment">// name string</span></span><br><span class="line"> <span class="comment">// age int</span></span><br><span class="line"> <span class="comment">//&#125;</span></span><br><span class="line"> <span class="comment">//person.name = &quot;tr&quot;</span></span><br><span class="line"> <span class="comment">//person.age = 24</span></span><br><span class="line"> <span class="comment">//fmt.Println(person)</span></span><br><span class="line"> <span class="keyword">var</span> tr Person</span><br><span class="line"> tr.name = <span class="string">&quot;te&quot;</span></span><br><span class="line"> tr.age = <span class="number">24</span></span><br><span class="line"> tr = changeName(tr)</span><br><span class="line"> fmt.Println(tr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeName</span><span class="params">(person Person)</span><span class="title">Person</span></span>&#123;</span><br><span class="line"> person.name = <span class="string">&quot;changed&quot;</span></span><br><span class="line"> <span class="keyword">return</span> person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>指针访问结构体</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pointer *Person = &amp;tr</span><br><span class="line"><span class="comment">// 访问指针的内容</span></span><br><span class="line">fmt.Println((*pointer).name) <span class="comment">// (*pointer)这样的写法很冗杂</span></span><br><span class="line">fmt.Println(pointer.name) <span class="comment">// 简化形式</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>go里面，只有大写开头的结构体才可以被其他包使用！<b>并且，结构体内的字段也要大写开头，才能访问！</b></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Package MyStru</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他包内容调用</span></span><br><span class="line"><span class="keyword">import</span> MyStru</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> p MyStru.Person </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样通过<code>包名.类型</code>的方式有些啰嗦，go提供了结构体字面量可以同时创建和初始化字段</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不必所有的字段都要赋值</span></span><br><span class="line">p := MyStru.Person&#123;Name:<span class="string">&quot;tr&quot;</span>,Age:<span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结构体的嵌套</p>
</blockquote>
<p><img src="/images/pasted-179.png" alt="upload successful"></p>
<blockquote>
<p>匿名变量（结构体链式调用简写），有时候如上图emp.Addr.City看起来很冗杂，go提供了匿名变量：只保留变量类型，去掉名字<br>访问的时候可以去掉名字作为内置变量访问，也可以通过类型名访问</p>
</blockquote>
<p><img src="/images/pasted-180.png" alt="upload successful"></p>
<h2 id="Go的高级特性"><a href="#Go的高级特性" class="headerlink" title="Go的高级特性"></a>Go的高级特性</h2><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><blockquote>
<p>上一节讲了<code>type</code>，自定义类型基于结构体，现在可以试试基于任何其他类型并且定义方法</p>
<p>为什么要用这个，这里提供书上的一个场景：<br>一加仑=3.78升，如果一个程序定义了油耗是10:<code>var fuel float64 = 10</code>，那么他是10升还是10加仑，所以这时候我们可以将<code>float64</code>转为自定义类型，用可阅读的英语代替</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Liter <span class="keyword">float64</span> <span class="comment">// 定义升</span></span><br><span class="line"><span class="keyword">type</span> Gallon <span class="keyword">float64</span> <span class="comment">// 定义加仑</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> carFuel Liter <span class="comment">// 这里明显可以得知是升</span></span><br><span class="line">    <span class="keyword">var</span> busFuel Gallon <span class="comment">// 同理</span></span><br><span class="line">    carFuel = Liter(<span class="number">10</span>) <span class="comment">// 10升油</span></span><br><span class="line">    </span><br><span class="line">    motorCycle := Gallon(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    carFuel = Gallon(<span class="number">10</span>) <span class="comment">// 这里会编译错误，因为一开始声明的类型不一样，即使这些类型底层都是float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但有时我们会想要混用转换这两种类型，go提供了两种自定义类型（基于同一种类型）互相转化的解决方案</p>
<p>定义自己的类型和对应操作符（+ - * / == &gt; &lt;），一般go是不允许不同类型加减乘除的，需要自定义操作符，这里我们希望<code>Liter</code>和<code>Gallon</code>单位混合运算<br>PS:这里定义每个类型的对应方法的时候，方法指的就是方法(Function),函数(Method)指的是不属于类型的那些方法，比起函数，方法要多加一个入参(写在方法名左边)，其他和函数没有区别</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一旦MyType的方法定义了，任何MyType的value都可以调用</span></span><br><span class="line"><span class="comment">// 一般自定义的入参取名单个开头字母小写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyType)</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value := MyType(<span class="string">&quot;some thing&quot;</span>)</span><br><span class="line">value.sayHi() <span class="comment">// 这里value就是第一个入参</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyType <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不加sayHi左边的就是一个普通的方法而已</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t MyType)</span><span class="title">sayHi</span><span class="params">(name <span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line"> fmt.Println(name,t)</span><br><span class="line"> <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// a := &quot;test&quot;</span></span><br><span class="line"> <span class="comment">// 这里是无法调出 a.sayHi的</span></span><br><span class="line"> value := MyType(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line"> value.sayHi(<span class="string">&quot;hello from &quot;</span>)</span><br><span class="line"> <span class="comment">// 结果是 hello from tr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>哪些类型可以被自定义方法？ 在同一包下自定义的类型可以，int等系统类型不行</p>
<p>方法的第一入参可以接收指针，场景：需要给自己的基于int的类型加个Double倍增的方法，但是不使用指针无法修改，不过不用担心，对于首要入参，go会自动的在需要的时候转为指针，如下</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Number <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n如果不是指针类型 无法实现*2效果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Number)</span> <span class="title">DoubleNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line"> (*n) *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> val := Number(<span class="number">12</span>)</span><br><span class="line"> val.DoubleNumber() <span class="comment">// 调用的时候go自动传入了地址</span></span><br><span class="line"> fmt.Println(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这时候我们就可以解决第一个场景的问题了：给升和加仑转为对方的转换方法</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Liter <span class="keyword">float64</span> <span class="comment">// 定义升</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l liter)</span> <span class="title">toGallon</span><span class="params">()</span><span class="title">Gallon</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Gallon(l* <span class="number">0.264</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="封装和嵌入"><a href="#封装和嵌入" class="headerlink" title="封装和嵌入"></a>封装和嵌入</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><blockquote>
<p>其实go的封装很类似java的一个实体类，对于go来说，一个struct内部的方法，如果可以不经过校验随意输入参数，那么代码很容易出错，需要给一个setter方法，让输入的参数经过校验</p>
<p>其实真的很像java的实体类，我们需要定义一个对象，对象再调用setter方法设置值，在go中我们得通过上节的自定义类型方法，例子如下</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义日期结构体</span></span><br><span class="line"><span class="keyword">type</span> Date <span class="keyword">struct</span>&#123;</span><br><span class="line"> Year <span class="keyword">int</span></span><br><span class="line"> Month <span class="keyword">int</span></span><br><span class="line"> Day <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类型方法 如果不用指针 结果不会改变</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span><span class="title">SetYear</span><span class="params">(year <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"> d.Year = year</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d Date</span><br><span class="line"> <span class="comment">// 显然直接修改结构体内的值不安全，万一设置负的呢</span></span><br><span class="line"> <span class="comment">//d.Year = -1</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 我们想要调用d.setYear 但是让类型调用方法我们需要自定义类型方法</span></span><br><span class="line"> d.SetYear(<span class="number">1997</span>)</span><br><span class="line"> fmt.Println(d)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上这个例子结构体内的域变量还是可以被访问到，其实这时候只要将结构体移到其他包内，且域内变量都小写不开放即可。这样我们就只能通过开放的<code>Setxxx</code>方法去修改不开放的<code>域内值</code></p>
</blockquote>
<h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><blockquote>
<p>Get方法实际上和java的作用也一样，建议类型首参用指针且方法名不用<code>GetYear</code>而是<code>Year</code>，如下</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span><span class="title">Year</span><span class="params">()</span><span class="title">int</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> d.year</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在其他语言中，封装是通过<code>class</code>实现的，而go是通过<code>package</code>实现的</p>
</blockquote>
<h4 id="完整的GetSet例子"><a href="#完整的GetSet例子" class="headerlink" title="完整的GetSet例子"></a>完整的GetSet例子</h4><blockquote>
<p>date目录下</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义日期结构体,全都是小写为了防止被其他包读取</span></span><br><span class="line"><span class="keyword">type</span> Date <span class="keyword">struct</span> &#123;</span><br><span class="line"> year  <span class="keyword">int</span></span><br><span class="line"> month <span class="keyword">int</span></span><br><span class="line"> day   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Set方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">SetYear</span><span class="params">(year <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> year &lt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">&quot;Year can not be negative&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> d.year = year</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">SetMonth</span><span class="params">(month <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> month &lt; <span class="number">1</span> || month &gt; <span class="number">12</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">&quot;Month must between 1-12&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> d.month = month</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">SetDay</span><span class="params">(day <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> day &gt; <span class="number">31</span> || day &lt; <span class="number">1</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">&quot;Day must between 1-31&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> d.day = day</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get方法,最好还用指针不然拷贝数据浪费内存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">Year</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> d.year</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">Month</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> d.month</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Date)</span> <span class="title">Day</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> d.day</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用日期包的主文件</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;date&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> myDate date.Date</span><br><span class="line"> myDate.SetYear(<span class="number">1997</span>)</span><br><span class="line"> myDate.SetMonth(<span class="number">11</span>)</span><br><span class="line"> myDate.SetDay(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"> fmt.Printf(<span class="string">&quot;%v || %v || %v&quot;</span>,myDate.Year(),myDate.Month(),myDate.Day())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="嵌入"><a href="#嵌入" class="headerlink" title="嵌入"></a>嵌入</h4><blockquote>
<p>一个结构体可以嵌套另一个结构体，但是访问的时候可以将子结构体的内容当做自己的属性访问（这些内容包括方法和属性）</p>
<p>不过需要外部结构体定义的子结构体是匿名的，即只有类型</p>
<p>当然子结构体内部不暴露的（小写开头）的变量是不会嵌入/或者说弹出给外部结构体的</p>
</blockquote>
<h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口 Interface"></a>接口 Interface</h3><blockquote>
<p>go的接口指的永远是变量的接口，因为go没有类的概念，一个自定义类型可以基于任何类型，可以实现方法。那么接口就是约定这个自定义类型需要包含的方法</p>
</blockquote>
<h4 id="接口实现和对应类型实现"><a href="#接口实现和对应类型实现" class="headerlink" title="接口实现和对应类型实现"></a>接口实现和对应类型实现</h4><blockquote>
<p>和java的接口概念一样，约定我需要哪些方法，具体怎么来的不关心，不过go里面，接口必须和类型结合使用，类型可以有多个方法，但是必须有符合接口的方法才满足</p>
<p><code>You don’t care whether you have a Pen or a Pencil, you just need something with a Draw method</code></p>
<p>定义接口示例</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span>&#123;</span><br><span class="line"> sayHi()</span><br><span class="line">    getSomething(<span class="keyword">float64</span>)</span><br><span class="line">    returnSomething()<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义满足接口的类型</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给这个类型定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyType)</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyType)</span> <span class="title">getSomething</span><span class="params">(f <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyType)</span> <span class="title">returnSomething</span><span class="params">()</span><span class="title">string</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以有其他方法</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里定义了接口和类型，需要注意的是不同于<code>Java</code>的<code>implement</code>go是自动的，不需要手动声明，如下使用</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义变量类型为接口</span></span><br><span class="line">  <span class="keyword">var</span> value MyInterface</span><br><span class="line">  <span class="comment">// 因为MyType定义的方法是符合接口的，所以这么做合法</span></span><br><span class="line">  value = MyType(<span class="number">5</span>)</span><br><span class="line">  value.sayHi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个接口类型不确定内容到底是什么，可能是int，可能是其他，取决于自定义类型的基础</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Whistle <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> Horn <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Whistle)</span> <span class="title">MakeSound</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;whistle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Horn)</span> <span class="title">MakeSound</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;whistle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NoiseMaker <span class="keyword">interface</span>&#123;</span><br><span class="line"> MakeSound()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> toy NoisMaker</span><br><span class="line">    toy = Whistle(<span class="string">&quot;toy&quot;</span>)</span><br><span class="line">    toy.MakeSound()</span><br><span class="line">    toy = Horn(<span class="string">&quot;toy&quot;</span>)</span><br><span class="line">    toy.MakeSound()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接口变量也可以作为入参，总结一下，go的接口实现方式是基于自定义类型的，一个自定义类型，包含了数据，和类型可以调用的方法，这就相当于Java的类</p>
<p>当生成了自定义类型的变量，就相当于java内的对象，可以作为参数传递，如果这个变量的方法满足接口，那么入参类型为接口变量即可</p>
<p>需要注意的是：如果实现类型方法的时候，首参是指针，那么在给一个接口变量赋值的时候，只能赋值类型变量的指针，下面是错误的示例和修正代码</p>
</blockquote>
<p><img src="/images/pasted-181.png" alt="upload successful"></p>
<p><img src="/images/pasted-182.png" alt="upload successful"></p>
<h4 id="接口类型转为具体类型"><a href="#接口类型转为具体类型" class="headerlink" title="接口类型转为具体类型"></a>接口类型转为具体类型</h4><blockquote>
<p>如同java的接口一样，当使用接口的时候，那么只能使用接口定义的方法，假如实现接口的具体类有更多方法，需要转为具体实现类</p>
<p>go也是同理，假如一个接口变量定义了并且赋值了一个实现接口的接口自定义类型，如果需要将接口变量转为自定义类型变量，只需要<code>.(具体自定义类型)</code>即可</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> noiseMaker NoiseMaker = Robot(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> robot Robot = noiseMaker.(Robot)</span><br><span class="line"><span class="comment">// 更推荐用下面这种带判断是否转换成功的</span></span><br><span class="line">robot,ok := noiseMaker.(Robot)</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Error接口"><a href="#Error接口" class="headerlink" title="Error接口"></a>Error接口</h4><blockquote>
<p>我们之前常用error类型，但是实际上error只是个接口，只要我们实现了<code>Error()string</code>的自定义类型都可以视为error的实现</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> ComputerError <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型实现Error()string 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c ComputerError)</span><span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;a computerError occured&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">// 我们自定义的ComputerError符合接口</span></span><br><span class="line"> <span class="keyword">var</span> err error = ComputerError(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"> err.Error()</span><br><span class="line"> fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>error接口是小写开头，那么我们为啥可以调用，毕竟小写开头都是私有不暴露的，这是因为error是作为<code>universe block</code>存在的，不论在哪个包都可以调用到。</p>
<p>有些接口是定义在方法下的，有些是在包下的，所以他们有限制，必须大写才能暴露，且使用需要引入，但是<code>error</code>和一些其他预定于的是在”所有包下的”</p>
</blockquote>
<h4 id="String接口"><a href="#String接口" class="headerlink" title="String接口"></a>String接口</h4><blockquote>
<p>对于<code>fmt.Println</code>或者其他方法来说，这些print方法会去寻找入参的变量是否有<code>String()string</code>方法，如果有，会去调用这个方法</p>
<p>即，fmt存在<code>Stringer</code>接口，输入的任何变量其实是作为<code>Stringer</code>接口变量存在的:<code>fmt.Println(myVariable)</code>，<code>myVariable</code>会作为接口变量存在，当然如果不满足接口方法那就不是了</p>
<p>可以<code>go doc fmt Println</code>查看具体接口定义</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型实现string方法满足Stringer接口</span></span><br><span class="line"><span class="keyword">type</span> CoffeePot <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c CoffeePot)</span><span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">string</span>(c) + <span class="string">&quot;coffee&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> coffee := CoffeePot(<span class="string">&quot;100&quot;</span>)</span><br><span class="line"> fmt.Println(coffee)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><blockquote>
<p>一个接口定义了以后，只要任何变量满足这个接口内的方法，那么变量就可以被传入或者赋值</p>
<p>那么假如接口内无任何方法定义，则可以接收任何变量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单独命名一个空接口</span></span><br><span class="line"><span class="keyword">type</span> emptInterface <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 任何值都可以被传入 &#123;&#125;表示接收的接口变量无方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AcceptThing</span><span class="params">(thing <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是问题是空接口那么也没有方法可被调用，所以这时候要转换空接口为具体变量<br>了解这个再看fmt包的Println就明白了<code>func Println(a ...any) (n int, err error)</code> 这么定义表明可以接收若干个空接口即任何参数<br>随后转换这些参数</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AcceptThing</span><span class="params">(thing <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">  whistle,ok :=thing.(Whistle)</span><br><span class="line">  <span class="keyword">if</span> ok&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h3><blockquote>
<p>利用接口，自定义类型，结构体，封装等概念完成一个自定义链表，以及基于链表的栈</p>
<p>代码实现</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;list&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;********&quot;</span>)</span><br><span class="line"> <span class="comment">// 测试节点 节点元素可以是任何类型</span></span><br><span class="line"> <span class="keyword">var</span> n list.Node</span><br><span class="line"> ele := list.StringEle(<span class="string">&quot;13.1&quot;</span>)</span><br><span class="line"> n.SetEle(ele) </span><br><span class="line"> n.SetEle(<span class="number">13</span>)</span><br><span class="line"> n.PrintList()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 测试链表</span></span><br><span class="line"> fmt.Println(<span class="string">&quot;*************&quot;</span>)</span><br><span class="line"> <span class="comment">// 生成的新节点不能用指针 除非malloc手动分配内存</span></span><br><span class="line"> <span class="keyword">var</span> newStartNode list.Node</span><br><span class="line"> newStartNode.SetEle(<span class="number">11</span>)</span><br><span class="line"> <span class="keyword">var</span> myList list.List</span><br><span class="line"> myList = &amp;newStartNode</span><br><span class="line"> myList.AppendNode(<span class="number">22</span>)</span><br><span class="line"> myList.InsertNode(<span class="number">33</span>,<span class="number">1</span>)</span><br><span class="line"> myList,_ = myList.DeleteNodeByIndex(<span class="number">1</span>)</span><br><span class="line"> err := myList.UpdateNodeByIndex(<span class="number">100</span>,<span class="number">3</span>)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> myList.PrintList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>链表实现</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> list</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author tr</span></span><br><span class="line"><span class="comment"> * @content 实现链式链表</span></span><br><span class="line"><span class="comment"> * @date 2022-4-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*************** 定义链式链表的基础节点***************</span></span><br><span class="line"><span class="comment">// 自定义错误类型(不能用指针！！！)</span></span><br><span class="line"><span class="keyword">type</span> nodeErr <span class="keyword">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n nodeErr)</span> <span class="title">Error</span><span class="params">()</span><span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="comment">// 需要类型转换</span></span><br><span class="line"> <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;node error %s:\n&quot;</span>,<span class="keyword">string</span>(n))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义节点元素的基础类型</span></span><br><span class="line"><span class="keyword">type</span> IntEle <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> StringEle <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> FloatEle <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span>&#123;</span><br><span class="line"> <span class="comment">// 节点元素，可以是任何类型</span></span><br><span class="line"> ele <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"> <span class="comment">// 节点的下一个指针 初始化的时候默认为nil</span></span><br><span class="line"> next *Node</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封闭私有元素，开放set,get</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">SetEle</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line"> n.ele = ele</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">SetNext</span><span class="params">(next *Node)</span></span>&#123;</span><br><span class="line"> n.next = next</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">Ele</span><span class="params">()</span><span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line"> <span class="keyword">return</span> n.ele</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">Next</span><span class="params">()</span>*<span class="title">Node</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> n.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//************************* 定义链式链表***************</span></span><br><span class="line"><span class="comment">// 定义一个链表的接口</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">interface</span>&#123;</span><br><span class="line"> <span class="comment">// 清楚元素</span></span><br><span class="line"> Clear()</span><br><span class="line"> <span class="comment">// 链表长度</span></span><br><span class="line"> GetLength()<span class="keyword">int</span></span><br><span class="line"> <span class="comment">// 插入节点</span></span><br><span class="line"> InsertNode(<span class="keyword">interface</span>&#123;&#125;,<span class="keyword">int</span>)(*Node,error)</span><br><span class="line"> <span class="comment">// 尾部插入节点</span></span><br><span class="line"> AppendNode(<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"> <span class="comment">// 删除节点-通过节点位置且返回头结点</span></span><br><span class="line"> DeleteNodeByIndex(<span class="keyword">int</span>)(*Node,error)</span><br><span class="line"> <span class="comment">// 删除节点-通过节点元素且返回被删除元素</span></span><br><span class="line"> <span class="comment">//DeleteNodeByEle(interface&#123;&#125;)(interface&#123;&#125;,error)</span></span><br><span class="line"> <span class="comment">// 更新节点-通过index</span></span><br><span class="line"> UpdateNodeByIndex(<span class="keyword">interface</span>&#123;&#125;,<span class="keyword">int</span>)error</span><br><span class="line"> <span class="comment">// 打印链表</span></span><br><span class="line"> PrintList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现链表接口 如果实现的时候首参数用了 * 赋值要用 &amp; 注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">Clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"> n.next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现打印，因为元素类型不同,可以转为自定义的元素类型或者原始元素类型，通过转换分辨节点类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doPrint</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line"> _,ok = ele.(IntEle)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;int element %d\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> _,ok = ele.(StringEle)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;string element %s\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> _,ok = ele.(FloatEle)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;float element %f\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> _,ok = ele.(<span class="keyword">int</span>)</span><br><span class="line"> <span class="keyword">if</span> ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;original int element %d\n&quot;</span>,ele)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(<span class="string">&quot;unknown type&quot;</span>,ele)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">PrintList</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> n!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="comment">// fmt.Println(n.ele) 这样打印显示不出类型转换</span></span><br><span class="line">  ele := n.Ele()</span><br><span class="line">  doPrint(ele)</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">GetLength</span><span class="params">()</span><span class="title">int</span></span>&#123;</span><br><span class="line"> <span class="comment">// 计数器</span></span><br><span class="line"> counter := <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> n!=<span class="literal">nil</span>&#123;</span><br><span class="line">  counter++</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点 从0开始计数，0表示在第一个，1表示在第一个节点后...</span></span><br><span class="line"><span class="comment">// 且只有为0的时候需要返回新的头部节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">InsertNode</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;,index <span class="keyword">int</span>)</span><span class="params">(*Node,error)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 若大于链表长度 返回错误</span></span><br><span class="line"> <span class="keyword">if</span> index&gt;n.GetLength()&#123;</span><br><span class="line">  <span class="keyword">return</span> n,nodeErr(<span class="string">&quot;index out of bounds&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 若等于 调用append</span></span><br><span class="line"> <span class="keyword">if</span> index == n.GetLength()&#123;</span><br><span class="line">  n.AppendNode(ele)</span><br><span class="line">  <span class="keyword">return</span> n,<span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 若为0 成为头部</span></span><br><span class="line"> <span class="keyword">if</span> index == <span class="number">0</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newHead Node</span><br><span class="line">  newHead.SetEle(ele)</span><br><span class="line">  newHead.SetNext(n)</span><br><span class="line">  <span class="keyword">return</span> &amp;newHead,<span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 其他情况下要做处理</span></span><br><span class="line"> <span class="keyword">for</span> ;index&gt;<span class="number">1</span>;index--&#123;</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> newN Node</span><br><span class="line"> newN.SetEle(ele)</span><br><span class="line"> newN.SetNext(n.Next())</span><br><span class="line"> n.SetNext(&amp;newN) </span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> n,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">AppendNode</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125; )</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> newN Node</span><br><span class="line"> newN.SetEle(ele)</span><br><span class="line"> n.SetNext(&amp;newN)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除从1开始计数 如果删除第一个需要返回新的头结点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(n *Node)</span><span class="title">DeleteNodeByIndex</span><span class="params">(index <span class="keyword">int</span>)</span><span class="params">(*Node,error)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> index&gt;n.GetLength()||index&lt;<span class="number">1</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>,nodeErr(<span class="string">&quot;index out of bounds in deleting&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> index == <span class="number">1</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n.Next(),<span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> ;index&gt;<span class="number">2</span>;index--&#123;</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> n.SetNext(n.Next().Next())</span><br><span class="line"> <span class="keyword">return</span> n,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span><span class="title">UpdateNodeByIndex</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;,index <span class="keyword">int</span>)</span><span class="title">error</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> index&gt;n.GetLength()||index&lt;<span class="number">1</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nodeErr(<span class="string">&quot;index out of bounds in updating&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> ;index&gt;<span class="number">1</span>;index--&#123;</span><br><span class="line">  n = n.Next()</span><br><span class="line"> &#125;</span><br><span class="line"> n.SetEle(ele) </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Yolo+Deepsort 动态追踪</title>
    <url>/2023/02/03/Yolo-Deepsort-%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="动态追踪算法"><a href="#动态追踪算法" class="headerlink" title="动态追踪算法"></a>动态追踪算法</h1><p>算法地址：<a href="https://github.com/mikel-brostrom/Yolov7_StrongSORT_OSNet%E3%80%82">https://github.com/mikel-brostrom/Yolov7_StrongSORT_OSNet。</a></p>
<p><code>pip install -r requirements.txt</code></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote>
<p>项目下载好后，根据github的使用文档，可以在项目目录下执行：<code>python track.py --source test.mp4 --strong-sort-weights osnet_x0_25_market1501.pt</code> </p>
<p>如果执行 <code>python track.py --source test.mp4 </code> 项目会自动去google网盘下载osnet模型，所以可以提前下载StrongSort模型<a href="https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO">模型下载区</a>，然后用<code>--strong-sort-weights</code>指定即可</p>
<p>这里 source 可以是视频文件、摄像头 ID 或者网络视频(rtsp、http、https 都支持)</p>
</blockquote>
<h2 id="Yolo-模型"><a href="#Yolo-模型" class="headerlink" title="Yolo 模型"></a>Yolo 模型</h2><blockquote>
<p>这个项目使用的Yolo算法，所以在里面的Yolo目录中可以像往常一样使用yolo算法生成自己的训练模型，最后在追踪算法内指定YOLO模型即可<code>--yolo-weights yolov7.pt --img 640</code></p>
</blockquote>
<h2 id="StrongSort模型"><a href="#StrongSort模型" class="headerlink" title="StrongSort模型"></a>StrongSort模型</h2><p>模型可以到 <a href="https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO">https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO</a> 下载，这里的模型后缀是 pth，可以直接重命名为 pt</p>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><blockquote>
<p>打开track.py</p>
<p>从109行开始加载数据流，dataset为要识别的视频流</p>
<p>148行开始便利dataset视频流，将每一帧作为输入，im,im0s,im0都是视频的一帧，赋值给了curr_frames, prev_frames，当前帧和上一帧</p>
<p>162行pred = model(im)，pred为帧图片识别结果</p>
<p>198行将当前帧图片和上一帧图片作为入参输入到strongSort内</p>
</blockquote>
<h2 id="利用算法"><a href="#利用算法" class="headerlink" title="利用算法"></a>利用算法</h2><blockquote>
<p>算法在：track.py 中，算法执行可以选择<code> --show-vid</code> 从而开启一个识别视频流，同时后台会实时的打印识别到的物体</p>
<p>算法所有的入参可以在 track.py 第 287行中看到</p>
<p>算法在第248行打印识别结果，可以在这里将识别结果发送到kafka或者写入redis操作，从而配合其他系统使用</p>
<p>算法在171行开始处理图形识别</p>
</blockquote>
<p><img src="/images/pasted-197.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>Yolo视觉识别</title>
    <url>/2023/02/03/Yolo%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="Yolo算法"><a href="#Yolo算法" class="headerlink" title="Yolo算法"></a>Yolo算法</h1><blockquote>
<p>Yolo是一个非常棒的视觉识别算法，项目地址：<a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a></p>
<p>个人地址：<code>/home/tr/Documents/JupyterNotebook/YOLOv5</code></p>
<p>在myTrain.ipynb中写了使用训练的demo</p>
</blockquote>
<p><img src="/images/pasted-191.png" alt="upload successful"></p>
<h2 id="文件目录介绍"><a href="#文件目录介绍" class="headerlink" title="文件目录介绍"></a>文件目录介绍</h2><p><img src="/images/pasted-192.png" alt="upload successful"></p>
<ol>
<li><p>data目录：存放训练数据集，数据标记，训练配置等（yaml文件）</p>
</li>
<li><p>model 模型算法核心（不用关注）</p>
</li>
<li><p>runs 每执行一次detect，或者训练都会在目录下生成新的结果目录</p>
</li>
<li><p>weights 存放模型结果</p>
</li>
</ol>
<h2 id="标记图片工具-生成训练工具"><a href="#标记图片工具-生成训练工具" class="headerlink" title="标记图片工具-生成训练工具"></a>标记图片工具-生成训练工具</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull heartexlabs/label-studio:latest\n</span><br><span class="line">docker run -it -p 6002:8080 -v ~/Documents/LabelStudio/mydata:/label-studio/data heartexlabs/label-studio:latest label-studio --log-level DEBUG</span><br></pre></td></tr></table></figure>

<p>docker 拉取完毕后访问6002端口即可，注册账户，上传图片进行标记，具体使用方法很简单，标记完毕后导出数据格式为yolo</p>
<p><img src="/images/pasted-193.png" alt="upload successful"></p>
<h2 id="编写训练配置"><a href="#编写训练配置" class="headerlink" title="编写训练配置"></a>编写训练配置</h2><blockquote>
<p>在label-studio中标记好导出的数据有两个目录，images和labels，labels内每个txt文件对应各自的图片文件，第一列为物品类别，后面分别是方框的xy坐标</p>
<p>需要注意的是，第一列的类别标签一会要作为配置文件内的类别，不能弄混</p>
<p>假设导出的数据目录为：tr03(内有images和labels目录)，放入YOLOV5/datasets内，创建文件：YOLOV5/yolov5/data/tr03.yaml，内容如下</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">../datasets/tr03</span>  <span class="comment"># dataset root dir</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">images/</span>  <span class="comment"># train images (relative to &#x27;path&#x27;) 128 images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">images/</span>  <span class="comment"># val images (relative to &#x27;path&#x27;) 128 images</span></span><br><span class="line"><span class="attr">test:</span>  <span class="comment"># test images (optional)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Classes</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">0:</span> <span class="string">TR</span></span><br><span class="line">  <span class="attr">1:</span> <span class="string">person</span></span><br><span class="line">  <span class="attr">2:</span> <span class="string">chair</span></span><br></pre></td></tr></table></figure>

<h2 id="Yolo算法的训练"><a href="#Yolo算法的训练" class="headerlink" title="Yolo算法的训练"></a>Yolo算法的训练</h2><blockquote>
<p>Yolo已经存在了一些训练好的模型，我们再次训练的时候，可以基于已有的模型，也可以自己从头训练</p>
<p><code>!python train.py --img 640 --batch 16 --epochs 600 --data tr03.yaml --weights ./weights/yolov5s.pt </code> 这个命令就是基于 weights目录下的yolov5s.pt模型训练，训练600次</p>
</blockquote>
<p><img src="/images/pasted-194.png" alt="upload successful"></p>
<blockquote>
<p>执行完毕以后，会在runs目录下生成最新结果，我们的模型文件也在其中</p>
</blockquote>
<p><img src="/images/pasted-195.png" alt="upload successful"></p>
<h2 id="Yolo算法的使用"><a href="#Yolo算法的使用" class="headerlink" title="Yolo算法的使用"></a>Yolo算法的使用</h2><blockquote>
<p>有了模型文件后可以利用模型识别各种图片</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOLOv5 PyTorch HUB Inference (DetectionModels only)</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># model = torch.hub.load(&#x27;ultralytics/yolov5&#x27;, &#x27;yolov5s.pt&#x27;)  # yolov5n - yolov5x6 or custom</span></span><br><span class="line">model = torch.hub.load(<span class="string">&#x27;./&#x27;</span>,<span class="string">&#x27;custom&#x27;</span>, <span class="string">&#x27;./runs/train/exp8/weights/best.pt&#x27;</span>, source=<span class="string">&#x27;local&#x27;</span>)  <span class="comment"># yolov5n - yolov5x6 or custom</span></span><br><span class="line"><span class="comment"># model = torch.hub.load(&#x27;./&#x27;,&#x27;custom&#x27;, &#x27;./weights/yolov5s.pt&#x27;, source=&#x27;local&#x27;)  # yolov5n - yolov5x6 or custom</span></span><br><span class="line">im = <span class="string">&#x27;../datasets/tr03/images/test.jpg&#x27;</span>  <span class="comment"># file, Path, PIL.Image, OpenCV, nparray, list</span></span><br><span class="line">results = model(im)  <span class="comment"># inference</span></span><br><span class="line">results.<span class="built_in">print</span>()  <span class="comment"># or .show(), .save(), .crop(), .pandas(), etc.</span></span><br><span class="line"></span><br><span class="line">model(<span class="string">&#x27;../datasets/tr02/images/train01/01.jpg&#x27;</span>).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-196.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Lang Pro</title>
    <url>/2022/04/19/Go-Lang-Pro/</url>
    <content><![CDATA[<h1 id="GO-Lang-Pro"><a href="#GO-Lang-Pro" class="headerlink" title="GO Lang Pro"></a>GO Lang Pro</h1><span id="more"></span>


<h1 id="延迟执行-defer-虽迟但到"><a href="#延迟执行-defer-虽迟但到" class="headerlink" title="延迟执行 defer (虽迟但到)"></a>延迟执行 defer (虽迟但到)</h1><blockquote>
<p>之前的代码处理错误都是简单的打印<code>log.Fatal()</code>，但是有些情况是必须要处理错误问题的，比如读取文件出错需要关闭文件流等</p>
<p>这时候就需要我们延迟方法返回执行完错误处理再返回</p>
<p>go提供了<code>defer</code>关键字，在普通方法或者函数调用前加上go会推迟执行，但是必定执行，即使方法调用了return，被<code>defer</code>修饰的语句还是执行</p>
<p>如下代码，即使return了返回错误还是会执行defer修饰的语句，输出<code>GoodBye</code></p>
<p>注意！ <code>defer</code>只能修饰方法或者函数调用</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Socialize()	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Socialize</span><span class="params">()</span><span class="title">error</span></span>&#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;GoodBye&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;I don&#x27;t want to talk&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="错误恢复以及处理"><a href="#错误恢复以及处理" class="headerlink" title="错误恢复以及处理"></a>错误恢复以及处理</h1><blockquote>
<p>这里以递归为例</p>
<p>GO的递归没给什么特别的关键字或者语法糖，和其他语言一样用就行了</p>
</blockquote>
<h2 id="打印目录树"><a href="#打印目录树" class="headerlink" title="打印目录树"></a>打印目录树</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	PrintFireTree(<span class="string">&quot;/home/tr/go/src&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintFireTree</span><span class="params">(dirPath <span class="keyword">string</span>)</span><span class="title">error</span></span>&#123;</span><br><span class="line">	files,err := ioutil.ReadDir(dirPath)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _,file := <span class="keyword">range</span> files&#123;</span><br><span class="line">		<span class="keyword">if</span> !file.IsDir()&#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;  &quot;</span>+file.Name())</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 可以直接用+拼接 也可以用path/filepath的join方法</span></span><br><span class="line">			fmt.Println(<span class="string">&quot;printing dir:&quot;</span>,dirPath+<span class="string">&quot;/&quot;</span>+file.Name())</span><br><span class="line">			err :=PrintFireTree(dirPath+<span class="string">&quot;/&quot;</span>+file.Name())</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理和恢复"><a href="#错误处理和恢复" class="headerlink" title="错误处理和恢复"></a>错误处理和恢复</h2><blockquote>
<p>就如同上面那个递归一样，方法返回了error信息，每次调用都需要处理error信息，这样比较复杂，我们可以用更简洁的方式：<code>panic</code>和<code>recover</code></p>
<p>手动生成一个panic错误 <code>panic(&quot;program going down&quot;)</code></p>
<p>如同其他语言一样，go在出错的时候也提供了一个<code>stack trace</code>用于回溯出错的所有点</p>
<p><code>panic()</code> 只能用于程序bug的时候，不能因为用户输入错误数据终止程序</p>
<p><code>panic()</code>执行的时候会停止程序，输出错误栈，但是如果用户调用了<code>recover()</code>，那么<code>panic()</code>就只会打印错误消息</p>
<p>要注意的是：一个方法内执行了<code>panic()</code>再执行<code>recover()</code>是无效的，因为recover只能在panic中执行，如果panic执行完了，那么轮不到revocer程序就终止了，所以要将<code>recover()</code>方法放入一个函数，使用<code>defer</code>修饰的函数，如例</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;running&quot;</span>)</span><br><span class="line">	Stop()</span><br><span class="line">	fmt.Println(<span class="string">&quot;running&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 如果发生了panic，执行恢复操作</span></span><br><span class="line">	<span class="keyword">defer</span> DoRec()</span><br><span class="line">	fmt.Println(<span class="string">&quot;paniced&quot;</span>)</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">&quot;stopping program&quot;</span>)</span><br><span class="line">	<span class="comment">// panic发生后的所有方法都不再执行</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;after pannic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoRec</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// fmt.Println(recover()) 可以打印panic的值</span></span><br><span class="line">    <span class="built_in">recover</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样可以改造我们之前的打印目录树的程序，将里面的error去掉，修改为panic，将error丢入panic：<code>panic(err)</code>，随后恢复和报告错误</p>
<p>也同样适用于其他任何程序</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reportPanic</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 若在panic时传入了一个error</span></span><br><span class="line">  errInterface := <span class="built_in">recover</span>()</span><br><span class="line">  <span class="keyword">if</span> errInterface == <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  err,ok = errInterface.(error)</span><br><span class="line">  <span class="keyword">if</span> ok&#123;</span><br><span class="line">  	fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="recover的问题"><a href="#recover的问题" class="headerlink" title="recover的问题"></a>recover的问题</h2><blockquote>
<p>recover 会从panic状态中恢复过来，但是recover会恢复任何panic，这就会导致问题</p>
<p>recover会返回panic的值，那么我们可以判断这个值是不是一个error或者其他我们定义的，如果决定不恢复可以增加一个<code>panic()</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reportPanic</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 若在panic时传入了一个error</span></span><br><span class="line">  errInterface := <span class="built_in">recover</span>()</span><br><span class="line">  <span class="keyword">if</span> errInterface == <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  err,ok = errInterface.(error)</span><br><span class="line">  <span class="keyword">if</span> ok&#123;</span><br><span class="line">  	fmt.Println(err)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 说明传递的不是error类型，不处理就继续panic吧</span></span><br><span class="line">    <span class="built_in">panic</span>(errInterface)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="GO-并发执行"><a href="#GO-并发执行" class="headerlink" title="GO 并发执行"></a>GO 并发执行</h1><blockquote>
<p>GO 并发执行，或许在web应用中最为常见，所以书上举例了web，这里同样</p>
</blockquote>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote>
<p>go的 <code>net/http</code> 库提供了http请求用于发送和请求http报文数据</p>
<p><code>http.Get</code>：发送Get请求</p>
<p><code>http.Response</code>：结构体响应</p>
<p>以下是一个请求多次的程序，顺序执行</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseSize</span><span class="params">(url <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">	response,err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 最后一定要关闭网络连接</span></span><br><span class="line">	<span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">	<span class="comment">// 读取响应数据</span></span><br><span class="line">	body,err := ioutil.ReadAll(response.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// fmt.Println(body) body是一个slice存储了十进制数，需要手动转为其他类型</span></span><br><span class="line">	<span class="comment">// fmt.Println(string(body)) // 这样就输出了一个html文档</span></span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并发-goroutines"><a href="#并发-goroutines" class="headerlink" title="并发 goroutines"></a>并发 goroutines</h2><blockquote>
<p>上面的代码顺序请求，go提供了并发执行的方式，其实类似java的线程</p>
<p>只需要使用<code>go</code>：<code>go myFunction()</code> 只能用于方法调用，作用相当于开启了一个线程</p>
<p>go认为主方法就是一个<code>goroutine</code>，当主方法的<code>goroutine</code>结束，进程就退出了，所以即使有其他的<code>go routine</code>在执行，一旦main的结束了就会退出</p>
<p>所以要等待其他<code>goroutine</code>执行完毕：<code>channel</code></p>
<p>以下代码是修改后的结果，这里暂时不用channel</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	<span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	<span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	<span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">	time.Sleep(<span class="number">2</span>*time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseSize</span><span class="params">(url <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">	response,err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">	body,err := ioutil.ReadAll(response.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这并行执行的时候并不保证谁是优先的，需要用channel控制</p>
<p><code>go &lt;func&gt;</code>不可以配合<code>return</code></p>
</blockquote>
<h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><blockquote>
<p>可以用于<code>goruntine</code>的控制，传递参数</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChannel <span class="keyword">chan</span> <span class="keyword">float64</span></span><br><span class="line">myChannel = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">float64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">myChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">float64</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>赋值：<code>myChannel &lt;- 3.14</code></p>
<p>取值：<code>&lt;-myChannel</code></p>
<p>取值和赋值是同步的一个操作，一次赋值对应一次取值，如果没有一次赋值，执行取值会阻塞直到下次赋值,简单的例子</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">(myChannel <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">  myChannel &lt;- <span class="string">&quot;hi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  myChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">  <span class="keyword">go</span> greeting(myChannel)</span><br><span class="line">  fmt.Println(&lt;-myChannel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>利用channel 完成进程间的同步：当一个线程<code>X</code>生成了一个<code>channel</code>，将他传递给其他线程时，其他线程每次执行赋值操作，都需要<code>X</code>线程运行才能继续执行，如果<code>X</code>此时阻塞，被传递的线程也陷入阻塞态</p>
<p>使用channel 同步的例子</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	size := <span class="built_in">make</span>(<span class="keyword">chan</span> Page)</span><br><span class="line">	<span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://example.com&quot;</span>,size)</span><br><span class="line">	<span class="keyword">go</span> ResponseSize(<span class="string">&quot;https://baidu.com&quot;</span>,size)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 主线程直接执行到这里，但是会在第一个 &lt;-size 这里阻塞,直到size被执行了一次赋值</span></span><br><span class="line">	fmt.Println(&lt;-size)</span><br><span class="line">	fmt.Println(&lt;-size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// channel 可以接收struct类型</span></span><br><span class="line"><span class="keyword">type</span> Page <span class="keyword">struct</span>&#123;</span><br><span class="line">	Url <span class="keyword">string</span></span><br><span class="line">	Size <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseSize</span><span class="params">(url <span class="keyword">string</span>,channel <span class="keyword">chan</span> Page)</span></span>&#123;</span><br><span class="line">	response,err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">	body,err := ioutil.ReadAll(response.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	p := Page&#123;Url:url,Size:<span class="built_in">len</span>(body)&#125;</span><br><span class="line">	channel &lt;- p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h2><blockquote>
<p>目前所有的channel都是<code>unbuffered</code>类型，即子线程send数据给channel后立即阻塞，直到这个channel的内容被取出</p>
<p><code>buffered channel</code>意思是，可以先往channel放一部分数据<br><code>channel := make(chan string,5) // 这个channel可以放五个数据</code>且缓存的数据实际是队列模式，其他线程取数据每次都取最早放入的数据，先进先出</p>
<p>这时候<code>channel &lt;- &quot;a&quot;</code> 不会阻塞子线程，直到执行了5次后channel满了才阻塞，这样就可以用来编写一个生产者消费者</p>
<p>同时为了防止主线程直接结束，主线程需要等子线程传递来消息才结束</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;start test&quot;</span>)</span><br><span class="line">	channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">	<span class="comment">// 表示两个子线程都结束的chan，每个线程结束的时候往里面写一个数据</span></span><br><span class="line">	endChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> producer(channel, endChan)</span><br><span class="line">	<span class="keyword">go</span> consumer(channel, endChan)</span><br><span class="line">	fmt.Println(&lt;-endChan, &lt;-endChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(channel <span class="keyword">chan</span> <span class="keyword">string</span>, endChan <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;producer made product&quot;</span>)</span><br><span class="line">		channel &lt;- fmt.Sprint(<span class="string">&quot;product&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 线程结束，给主线程一个消息 因为endChan容量是2所以两个线程都写了主线程才能读取</span></span><br><span class="line">	endChan &lt;- <span class="string">&quot;producer end&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(channel <span class="keyword">chan</span> <span class="keyword">string</span>, endChan <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		time.Sleep(time.Second * <span class="number">6</span>)</span><br><span class="line">		product := &lt;-channel</span><br><span class="line">		fmt.Println(product, <span class="string">&quot;consumed&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	endChan &lt;- <span class="string">&quot;consumer end&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GO-的自动化测试"><a href="#GO-的自动化测试" class="headerlink" title="GO 的自动化测试"></a>GO 的自动化测试</h1><blockquote>
<p>在给程序新增功能后，需要测试老的以往的功能是否正常，可以使用go提供的自动测试工具</p>
<p>假设有以下代码，用于英语环境下的连续物件<code>... , ... and ..</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	phrases := []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pie&quot;</span>&#125;</span><br><span class="line">	fmt.Println(JoinWithCommas(phrases))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JoinWithCommas</span><span class="params">(phrases []<span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line">	result := strings.Join(phrases[:<span class="built_in">len</span>(phrases)<span class="number">-1</span>],<span class="string">&quot;, &quot;</span>)</span><br><span class="line">	result += <span class="string">&quot; and &quot;</span> + phrases[<span class="built_in">len</span>(phrases)<span class="number">-1</span>]</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在新增功能之前，我们可以开始编写自动测试了，提供一组输入和输出，如果代码的结果不匹配则<code>fail</code></p>
<p>自动文件的命名规则，如果主文件是<code>join.go</code>那么测试文件：<code>join_test.go</code></p>
<p>测试文件不一定要和被测文件一个包，但要是想测的东西是私有的，那么只能在一个包下</p>
<p>测试方法名必须<code>Test</code>开头</p>
<p>执行测试文件：<code>go test ...</code> 被测文件必须包含<code>_test.go</code>否则无法找到</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种是推荐的模板</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTwoElements</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 失败</span></span><br><span class="line">	<span class="comment">//t.Error(&quot;no test yet&quot;)</span></span><br><span class="line">	list := []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line">	want := <span class="string">&quot;apple and orange&quot;</span></span><br><span class="line">	got := JoinWithCommas(list)</span><br><span class="line">	<span class="keyword">if</span> got != want &#123;</span><br><span class="line">		t.Error(errorString(list,got,want))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMoreElements</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">	list := []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pear&quot;</span>&#125;</span><br><span class="line">	want := <span class="string">&quot;apple, orange, and pear&quot;</span></span><br><span class="line">	got := JoinWithCommas(list)</span><br><span class="line">	<span class="keyword">if</span> got != want &#123;</span><br><span class="line">		t.Error(errorString(list,got,want))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为不是Test开头的，所以不会执行测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorString</span><span class="params">(list []<span class="keyword">string</span>,got <span class="keyword">string</span>,want <span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;JoinWithCommas(%#v) = \&quot;%s\&quot;, want \&quot;%s\&quot;&quot;</span>,list,got,want)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是文件结构 <code>go test join</code> 自动去<code>~/go/src</code>下面找<code>join</code>包，执行里面的<code>Test</code>开头的方法</p>
</blockquote>
<p><img src="/images/pasted-183.png" alt="upload successful"></p>
<blockquote>
<p>默认的<code>go test &lt;...&gt;</code>会测试全部，可以添加配置测试部分</p>
<p><code>go test &lt;...&gt; -v</code> : 查看测试详情</p>
<p><code>go test &lt;...&gt; -run Two</code>：测试名字里面带<code>Two</code>的方法</p>
</blockquote>
<h2 id="表格驱动测试"><a href="#表格驱动测试" class="headerlink" title="表格驱动测试"></a>表格驱动测试</h2><blockquote>
<p>测试的很多代码是重复的，我们可以生成一个表格，输入数据和期望数据的表格</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> testData <span class="keyword">struct</span>&#123;</span><br><span class="line">	list []<span class="keyword">string</span></span><br><span class="line">	want <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种是推荐的模板</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJoinWithCommas</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">	testList := []testData&#123;</span><br><span class="line">		&#123;list:[]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>&#125;,want:<span class="string">&quot; and apple&quot;</span>&#125;,</span><br><span class="line">		&#123;list:[]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>&#125;,want:<span class="string">&quot;apple and orange&quot;</span>&#125;,</span><br><span class="line">		&#123;list:[]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pear&quot;</span>&#125;,want:<span class="string">&quot;apple, orange, and pear&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _,test := <span class="keyword">range</span> testList&#123;</span><br><span class="line">		got := JoinWithCommas(test.list)</span><br><span class="line">		<span class="keyword">if</span> got != test.want &#123;</span><br><span class="line">			t.Error(errorString(test.list,got,test.want))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为不是Test开头的，所以不会执行测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorString</span><span class="params">(list []<span class="keyword">string</span>,got <span class="keyword">string</span>,want <span class="keyword">string</span>)</span><span class="title">string</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;JoinWithCommas(%#v) = \&quot;%s\&quot;, want \&quot;%s\&quot;&quot;</span>,list,got,want)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GO-函数传递"><a href="#GO-函数传递" class="headerlink" title="GO 函数传递"></a>GO 函数传递</h1><blockquote>
<p>GO 支持<code>first-class</code>函数，可以用于函数间传递，所谓<code>first-class</code>函数，意思是go的函数是可以被赋值给变量，由变量调用</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	h := sayHi</span><br><span class="line">	h()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hi from tr&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义函数接口 传递函数作为参数，函数作为参数的时候不用预先声明</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	double(sayHi)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hi from tr&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">double</span><span class="params">(hi <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">	hi()</span><br><span class="line">	hi()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数作为参数传递的时候，作为参数的这个函数格式必须符合定义的入参的函数的格式</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line">	<span class="keyword">var</span> s2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line">	s1 = sayHello <span class="comment">// 换过来赋值就是错的</span></span><br><span class="line">	s2 = sayHi</span><br><span class="line">	s1()</span><br><span class="line">	s2(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="GO-的web（请求响应）"><a href="#GO-的web（请求响应）" class="headerlink" title="GO 的web（请求响应）"></a>GO 的web（请求响应）</h1><blockquote>
<p>这章节其实主要讲的是<code>net/http</code>包提供的响应<code>http</code>请求的内容</p>
<p>先简要概述下服务器软件的作用，首先客户端通过url和端口的方式访问物理机，物理机接收tcp或者udp报文（内部是http报文），将报文拆解后交给对应端口的服务器程序，程序收到http报文，可以看到报文头的访问路径<code>/hello</code>，找到对应的处理方法处理请求后封装http报文交给网络的下一次发出</p>
<p>这章能感受到作为后端服务，go比Java强的地方，Java相比太过笨重，从JavaEE到Spring生态，开发web是比较重的任务，go则更轻量快速，运行效率更高</p>
<p>先从一个简单的web应用开始</p>
</blockquote>
<h2 id="simple-web-app"><a href="#simple-web-app" class="headerlink" title="simple web app"></a>simple web app</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// url 对应的处理器 类似java的controller</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(writer http.ResponseWriter,request *http.Request)</span></span>&#123;</span><br><span class="line">	message :=[]<span class="keyword">byte</span>(<span class="string">&quot;Hello from web powered by go!&quot;</span>)</span><br><span class="line">	_,err := writer.Write(message)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>,viewHandler)</span><br><span class="line">    <span class="comment">// nil 是因为已经调用HandleFunc，给了一个处理方法了</span></span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结合html页面"><a href="#结合html页面" class="headerlink" title="结合html页面"></a>结合html页面</h2><blockquote>
<p>用Go来返回html页面，我觉得还是前后端分离更好，单纯用Go的高效性能负责后端请求处理</p>
<p>Go提供了template模板，读取html文件内容，插入我们的动态内容返回给客户端</p>
<p>模板内需要插入的数据用<code>&#123;&#123;&#125;&#125;`来标识，称为一个`action`
>
> `&#123;&#123;.&#125;&#125;</code> 插入任何数据都会显示</p>
<p><code>&#123;&#123;if .&#125;&#125; 内容 &#123;&#123;end&#125;&#125;</code> 只有传递的数据为true才显示内容</p>
<p><code>&#123;&#123;range .&#125;&#125; 内容 &#123;&#123;.&#125;&#125; 其他内容 &#123;&#123;end&#125;&#125;</code> 传递一个slice，会遍历slice显示这段模板内容，将单个数据插入</p>
<p><code>&#123;&#123;.Name&#125;&#125;</code> 传递一个结构体，显示结构体的Name属性</p>
<p>注意：引入的包需要是 <code>html/template</code> 而不是<code>text/template</code>后者会显示任何东西即使是一段js代码</p>
<p>guestbook.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/guestbook&quot;</span>, ViewHandler)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/guestbook/new&quot;</span>, NewHandler)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/guestbook/add&quot;</span>, AddHandler)</span><br><span class="line">	err := http.ListenAndServe(<span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	Check(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Guestbook <span class="keyword">struct</span> &#123;</span><br><span class="line">	SignaureCount <span class="keyword">int</span></span><br><span class="line">	Signatures    []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ViewHandler</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取本地签名文件内容</span></span><br><span class="line">	signatures := GetStrings(<span class="string">&quot;signatures.txt&quot;</span>)</span><br><span class="line">	<span class="comment">// 将签名放入结构体</span></span><br><span class="line">	guestbook := Guestbook&#123;</span><br><span class="line">		SignaureCount: <span class="built_in">len</span>(signatures),</span><br><span class="line">		Signatures:    signatures,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	html, err := template.ParseFiles(<span class="string">&quot;view.html&quot;</span>)</span><br><span class="line">	Check(err)</span><br><span class="line">	<span class="comment">// html.Execute查看doc会发现接收的第一个参数是一个接口，之后会调用接口的write方法</span></span><br><span class="line">	<span class="comment">// 第二个参数是插入模板的数据 这里放入我们的签名结构体</span></span><br><span class="line">	err = html.Execute(writer, guestbook)</span><br><span class="line">	Check(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(writer http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">	htmlTemplate, err := template.ParseFiles(<span class="string">&quot;new.html&quot;</span>)</span><br><span class="line">	Check(err)</span><br><span class="line">	<span class="comment">// 单单返回new.html 不给页面插入参数</span></span><br><span class="line">	err = htmlTemplate.Execute(writer, <span class="literal">nil</span>)</span><br><span class="line">	Check(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddHandler</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 从request获取post数据</span></span><br><span class="line">	signature := request.FormValue(<span class="string">&quot;signature&quot;</span>)</span><br><span class="line">	<span class="comment">// 保存到本地文件 这个表示以只写，追加模式打开文件，若无则创建</span></span><br><span class="line">	<span class="comment">// go doc os O_WRONLY 查看具体信息</span></span><br><span class="line">	options := os.O_WRONLY | os.O_APPEND | os.O_CREATE</span><br><span class="line">	<span class="comment">// 创建文件的时候给个权限</span></span><br><span class="line">	file, err := os.OpenFile(<span class="string">&quot;signatures.txt&quot;</span>, options, os.FileMode(<span class="number">0600</span>))</span><br><span class="line">	Check(err)</span><br><span class="line">	<span class="comment">// write data to file</span></span><br><span class="line">	_, err = fmt.Fprintln(file, signature)</span><br><span class="line">	Check(err)</span><br><span class="line">	err = file.Close()</span><br><span class="line">	Check(err)</span><br><span class="line">	<span class="comment">// 重定向到展示页面 req,resp 参数，重定向的地址，返回的状态码(302 找到)</span></span><br><span class="line">	http.Redirect(writer, request, <span class="string">&quot;/guestbook&quot;</span>, http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStrings</span><span class="params">(fileName <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> lines []<span class="keyword">string</span></span><br><span class="line">	file, err := os.Open(fileName)</span><br><span class="line">	<span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	Check(err)</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	scanner := bufio.NewScanner(file)</span><br><span class="line">	<span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">		lines = <span class="built_in">append</span>(lines, scanner.Text())</span><br><span class="line">	&#125;</span><br><span class="line">	Check(scanner.Err())</span><br><span class="line">	<span class="keyword">return</span> lines</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>两个html页面，一个展示，一个带个form用于新增</p>
<p>view.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Guest Book<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;.SignaureCount&#125;&#125; total signatures</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/guestbook/new&quot;</span>&gt;</span>Add ur new signature<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;range .Signatures&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123;end&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>new.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>add signature<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/guestbook/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;signature&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;signature&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据就存储在本地的文件内：<code>signatures.txt</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tr</span><br><span class="line">oth</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>orika使用</title>
    <url>/2023/01/31/orika%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="orika"><a href="#orika" class="headerlink" title="orika"></a>orika</h1><p> 一、Orika背景介绍
 　　</p>
<p>　　Orika是java Bean映射框架，可以实现从一个对象递归拷贝数据至另一个对象。在开发多层应用程序中非常有用。在这些层之间交换数据时，通常为了适应不同API需要转换一个实例至另一个实例。</p>
<p>　　有很多方法可以实现：硬代码拷贝或Dozer实现bean映射等。总之，需要简化不同层对象之间映射过程。</p>
<p>　   Orika使用字节码生成器创建开销最小的快速映射，比其他基于反射方式实现（如，Dozer）更快。之前使用Bean Copy 性能非常慢，发现在这个领域业界还是有很多新秀的。 Orika 应该就算一个比较好的吧。</p>
<p> 二、优势</p>
<ol>
<li><p>性能<br>　　大概是Dozer的8-10 倍， 这个上面的已经做了描述</p>
</li>
<li><p>内存消耗<br>　　大概是Dozer内存消耗的一半多点。 为什么做到这点的还没想清楚， 估计是因为运行期不需要维护复杂的Mapping 关系。 不需要大量的Mapping 关系查找以及需要的对这些查找优化所消耗的空间。</p>
</li>
<li><p>简单<br>　　Orika的代码短小精悍， 而且可读性非常强， Dozer如果要加减一个功能， 不才完全没有信心， Orika 我还是可以偶尔在Orika里面打几个酱油的。</p>
</li>
</ol>
<p>三、基础使用</p>
<p>Maven项目依赖包：POM文件直接依赖进去即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ma.glasnost.orika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建两个Bean对象，用于复制使用。
　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserVo对象</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//Set GET方法</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// User对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line">使用场景（如果对象中属性太多，普通逻辑处理代码太多）</span><br><span class="line">A对象复制到B对象（对象复制）</span><br><span class="line"><span class="comment">//业务场景，将A对象复制B对象中</span></span><br><span class="line"><span class="comment">//1.普通逻辑处理</span></span><br><span class="line">User A = <span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;1231&quot;</span>);</span><br><span class="line">UserVo B = <span class="keyword">new</span> UserVo().setId(A.getId()).setName(A.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;普通方式将A对象复制B对象中：&quot;</span>+B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A复制到B对象中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">UserVo map = mapperFactory.getMapperFacade().map(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika复制对象:&quot;</span>+map);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">普通方式将A对象复制B对象中：UserVo(id=<span class="number">123</span>, name=<span class="number">1231</span>)</span><br><span class="line"></span><br><span class="line">orika复制对象:UserVo(id=<span class="number">123</span>, name=<span class="number">1231</span>)</span><br></pre></td></tr></table></figure>

<p>2.A集合复制到B集合（集合复制）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.普通逻辑处</span></span><br><span class="line"><span class="comment">//A对象</span></span><br><span class="line">List&lt;User&gt; A = Arrays.asList(<span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line"><span class="comment">//B对象</span></span><br><span class="line">List&lt;UserVo&gt; B = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//将A集合数据复制到B集合中</span></span><br><span class="line">A.forEach(x-&gt;&#123;</span><br><span class="line">B.add( <span class="keyword">new</span> UserVo().setId(x.getId()).setName(x.getName()));</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;将A集合中数据set到B集合中数据打印&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A集合复制到B集合中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">List&lt;UserVo&gt; userVo = mapperFactory.getMapperFacade().mapAsList</span><br><span class="line">mapperFactory.getMapperFacade().mapAsList(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika直接复制对象集合打印结果:&quot;</span>+userVo);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">`将A集合中数据set到B集合中数据打印：[UserVo(id=<span class="number">123</span>, name=张三)]`</span><br><span class="line"></span><br><span class="line">`orika直接复制对象集合打印结果:[UserVo(id=<span class="number">123</span>, name=张三)]`</span><br><span class="line">到此为止您已经算入门了，以上是Orika的基础使用，由此发现如果对象中属性如果<span class="number">20</span>个，那么用普通的逻辑处理需要<span class="number">20</span>个set过去，如果用Orika两行代码搞定。话不多说关键步骤总结一波（关键必须牢记）：</span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.getMapperFacade().map(操作对象)</span><br><span class="line">mapperFactory.getMapperFacade().mapAsList(操作集合对象)</span><br></pre></td></tr></table></figure>

<p>四、高级使用方法</p>
<p> 创建两个Bean对象，用于复制使用。<br>　　　UserVo对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//Set GET方法</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ageOne;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　User对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用场景（对象A与对象B中属性不一致时，如果对象中属性太多，普通逻辑处理代码太多）<br>　　1.A对象复制到B对象，对象中属性不一样时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务场景，将A对象复制B对象中,A对象中的字段与B对象中的字段不一致</span></span><br><span class="line"><span class="comment">//1.普通逻辑处理</span></span><br><span class="line">User A = <span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;张三&quot;</span>).setAge(<span class="number">20</span>);</span><br><span class="line">UserVo B = <span class="keyword">new</span> UserVo().setId(A.getId()).setUserName(A.getName()).setAgeOne(A.getAge());</span><br><span class="line">System.out.println(<span class="string">&quot;普通方式将A对象处理B对象中：&quot;</span>+B);.</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A复制到B对象中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.classMap(User.class, UserVo.class)</span><br><span class="line">.field(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;userName&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;ageOne&quot;</span>)</span><br><span class="line">.byDefault().register();</span><br><span class="line">UserVo userVo = mapperFactory.getMapperFacade().map(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika复制对象:&quot;</span>+userVo);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">`普通方式将A对象处理B对象中：UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)`</span><br><span class="line"></span><br><span class="line">`orika复制对象:UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)`</span><br></pre></td></tr></table></figure>

<p>2.A集合对象复制到B集合对象，对象中属性不一样时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.普通逻辑处里A对象中与B对象字段不一致处理</span></span><br><span class="line"><span class="comment">//A对象</span></span><br><span class="line">List&lt;User&gt; A = Arrays.asList(<span class="keyword">new</span> User().setId(<span class="string">&quot;123&quot;</span>).setName(<span class="string">&quot;张三&quot;</span>).setAge(<span class="number">20</span>));</span><br><span class="line"><span class="comment">//B对象</span></span><br><span class="line">List&lt;UserVo&gt; B = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//将A集合数据复制到B集合中</span></span><br><span class="line">A.forEach(x-&gt;&#123;</span><br><span class="line">B.add(<span class="keyword">new</span> UserVo().setId(x.getId()).setUserName(x.getName()).setAgeOne(x.getAge()));</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;将A集合中数据set到B集合中数据打印&quot;</span>+B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用orika复制工具将A集合复制到B集合中</span></span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.classMap(User.class, UserVo.class)</span><br><span class="line">.field(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;userName&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;ageOne&quot;</span>)</span><br><span class="line">.byDefault().register();</span><br><span class="line">List&lt;UserVo&gt; userVos = mapperFactory.getMapperFacade().mapAsList(A, UserVo.class);</span><br><span class="line">System.out.println(<span class="string">&quot;orika复制对象:&quot;</span>+userVos);</span><br><span class="line">由上得出控制台输出如下：</span><br><span class="line">`将A集合中数据set到B集合中数据打印[UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)]`</span><br><span class="line"></span><br><span class="line">`orika复制对象:[UserVo(id=<span class="number">123</span>, userName=张三, ageOne=<span class="number">20</span>)]`</span><br><span class="line">话不多说关键步骤总结一波（关键必须牢记）：</span><br><span class="line">MapperFactory mapperFactory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">mapperFactory.classMap(User.class, UserVo.class)</span><br><span class="line">.field(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;userName&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;ageOne&quot;</span>)</span><br><span class="line">.byDefault().register();</span><br><span class="line"><span class="comment">//集合复制--使用mapAsList</span></span><br><span class="line">List&lt;UserVo&gt; userVos = mapperFactory.getMapperFacade().mapAsList(A, UserVo.class);</span><br><span class="line"><span class="comment">//对象复制--使用map</span></span><br><span class="line">UserVo userVos = mapperFactory.getMapperFacade().map(A, UserVo.class);</span><br></pre></td></tr></table></figure>

<p>五、总结工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MapperUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认字段工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFactory MAPPER_FACTORY = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认字段实例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFacade MAPPER_FACADE = MAPPER_FACTORY.getMapperFacade();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认字段实例集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MapperFacade&gt; CACHE_MAPPER_FACADE_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射实体（默认字段）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（对象）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E, T&gt; <span class="function">E <span class="title">map</span><span class="params">(Class&lt;E&gt; toClass, T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> MAPPER_FACADE.map(data, toClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射实体（自定义配置）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（对象）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E, T&gt; <span class="function">E <span class="title">map</span><span class="params">(Class&lt;E&gt; toClass, T data, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">MapperFacade mapperFacade = <span class="keyword">this</span>.getMapperFacade(toClass, data.getClass(), configMap);</span><br><span class="line"><span class="keyword">return</span> mapperFacade.map(data, toClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射集合（默认字段）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（集合）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E, T&gt; <span class="function">List&lt;E&gt; <span class="title">mapAsList</span><span class="params">(Class&lt;E&gt; toClass, Collection&lt;T&gt; data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> MAPPER_FACADE.mapAsList(data, toClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 映射集合（自定义配置）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 数据（集合）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* public &lt;E, T&gt; List&lt;E&gt; mapAsList(Class&lt;E&gt; toClass, Collection&lt;T&gt; data, Map&lt;String, String&gt; configMap) &#123;</span></span><br><span class="line"><span class="comment">T t = data.stream().findFirst().orElseThrow(() -&gt; new ResourceNotExistException(&quot;映射集合，数据集合为空&quot;));</span></span><br><span class="line"><span class="comment">MapperFacade mapperFacade = this.getMapperFacade(toClass, t.getClass(), configMap);</span></span><br><span class="line"><span class="comment">return mapperFacade.mapAsList(data, toClass);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取自定义映射</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> toClass 映射类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dataClass 数据映射类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> &lt;E, T&gt; <span class="function">MapperFacade <span class="title">getMapperFacade</span><span class="params">(Class&lt;E&gt; toClass, Class&lt;T&gt; dataClass, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">String mapKey = dataClass.getCanonicalName() + <span class="string">&quot;_&quot;</span> + toClass.getCanonicalName();</span><br><span class="line">MapperFacade mapperFacade = CACHE_MAPPER_FACADE_MAP.get(mapKey);</span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(mapperFacade)) &#123;</span><br><span class="line">MapperFactory factory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">ClassMapBuilder classMapBuilder = factory.classMap(dataClass, toClass);</span><br><span class="line">configMap.forEach(classMapBuilder::field);</span><br><span class="line">classMapBuilder.byDefault().register();</span><br><span class="line">mapperFacade = factory.getMapperFacade();</span><br><span class="line">CACHE_MAPPER_FACADE_MAP.put(mapKey, mapperFacade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mapperFacade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Zookeeper 01</title>
    <url>/2021/03/16/Zookeeper/</url>
    <content><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><blockquote>
<p>应用场景</p>
</blockquote>
<ol>
<li><p>分布式协调组件</p>
<p> 服务组件的数据一致性问题的协调，zk可以通知其他服务修改数据状态</p>
</li>
<li><p>分布式锁</p>
<p> zk可以做到强一致性</p>
</li>
<li><p>无状态化的实现</p>
<p> 登陆组件（系统）冗余部署后，登录信息放在哪个组件都不行，因为下次自动均衡找到的不一定是上个组件，可以将登录状态放入zk</p>
</li>
</ol>
<h2 id="搭建zk服务器"><a href="#搭建zk服务器" class="headerlink" title="搭建zk服务器"></a>搭建zk服务器</h2><blockquote>
<p>安装配置</p>
</blockquote>
<ol>
<li><p>官网下载zk工具</p>
</li>
<li><p>打开进入 bin目录，可以看到zkServer.sh脚本，但是启动是需要zoo.cfg文件的，可以修改conf目录下的zoo_sample.cfg</p>
</li>
<li><p>有了配置文件后 <code>./bin/zkServer.sh start ../conf/zoo.cfg </code>启动即可</p>
<blockquote>
<p>zoo.cfg 文件说明</p>
</blockquote>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> zk的时间单位（毫秒）</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许follower初始化连接到leader最大时长，这里是20s</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许follower与leader数据同步最大时长</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> zk数据存储目录以及日志保存目录（如果没有指明dataLogDir</span></span><br><span class="line">dataDir=/bitnami/zookeeper/data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对客户端提供的端口号</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个客户端和zk的最大并发链接数</span></span><br><span class="line">maxClientCnxns=60</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动清楚任务的时间间隔，单位为小时，0表示不自动清楚</span></span><br><span class="line">autopurge.purgeInterval=0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Metrics Providers</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># https://prometheus.io Metrics Exporter</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="meta">#</span><span class="bash">metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">metricsProvider.exportJvmInfo=<span class="literal">true</span></span></span><br><span class="line">preAllocSize=65536</span><br><span class="line">snapCount=100000</span><br><span class="line">maxCnxns=0</span><br><span class="line">reconfigEnabled=false</span><br><span class="line">quorumListenOnAllIPs=false</span><br><span class="line">4lw.commands.whitelist=srvr, mntr</span><br><span class="line">maxSessionTimeout=40000</span><br><span class="line">admin.serverPort=8080</span><br><span class="line">admin.enableServer=true</span><br></pre></td></tr></table></figure>

<h2 id="zk的基本操作"><a href="#zk的基本操作" class="headerlink" title="zk的基本操作"></a>zk的基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkServer.sh start ../conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">zkServer.sh stop ../conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">zkServer.sh status </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端执行命令脚本，相当于命令行了（zk服务器启动情况下可以通过此脚本执行命令）</span></span><br><span class="line">zkCli.sh  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下为进入命令行后的命令</span></span><br><span class="line">ls / #查看zk的数据</span><br><span class="line">help # 查看帮助</span><br><span class="line">create /test1 #创建znode节点</span><br><span class="line">create /test2 abc #将数据放入节点</span><br><span class="line">create -s /test3 #持久序号节点</span><br><span class="line">create -e /test4 #临时节点</span><br><span class="line">create -c /container # 容器节点</span><br><span class="line">set /test4 aa #设置内容</span><br><span class="line">delete /test1 # 删除</span><br><span class="line">get /test2</span><br><span class="line">get -s /test2 # 查看znode的stat信息</span><br><span class="line">ls -R /test1 #递归查询	</span><br><span class="line">deleteall /test1 #删除节点和其子节点</span><br><span class="line">delete /test3 # 普通删除</span><br><span class="line">delete -v 1 /test4 #删除数据版本为1的节点（每次set版本都增加了1，这里用了乐观锁，可以删不成功继续+1删除）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-133.png" alt="upload successful"></p>
<h2 id="zk内部数据模型"><a href="#zk内部数据模型" class="headerlink" title="zk内部数据模型"></a>zk内部数据模型</h2><p>非常类似linux的内部数据结构，每次create都是创建一个node节点，可以给这个node节点内存入数据</p>
<blockquote>
<p>znode内部结构包含四个部分:</p>
</blockquote>
<pre><code>1. data：数据
2. acl：权限
    + c：create的权限
    + w：写
    + r：读
    + d：删除
    + a：管理
3. stat：描述当前znode的元数据
4. child：当前节点的子节点
</code></pre>
<blockquote>
<p>zk中节点znode的类型</p>
</blockquote>
<pre><code>+ 持久节点：会话结束后任然存在
+ 持久序号节点：每次创建的节点自增序号（并发严重情况下，给每个事务分配顺序）
+ 临时节点：会话结束后即可删除，通过这个实现服务注册和发现（客户端和服务器建立的链接就是一个会话，建立链接时，zk服务器会给zk客户端发送一个session id，每次客户端通信时，zk服务器就会自动续约session id，如果超时自动删除session id这个id可以通过get -s 查看到）
+ Container节点：容器节点，如果容器内没有任何子节点，该节点会被定期删除
+ TTL节点：自定义节点到期时间
</code></pre>
<blockquote>
<p>zk的数据持久化</p>
</blockquote>
<ul>
<li>事务日志：每个执行的命令以日志的形式保存在dataLogDir中</li>
<li>数据快照：每隔一定时间把内存的数据备份一次，存在dataDir中</li>
</ul>
<blockquote>
<p>之后恢复可以先回复快照文件数据到内存中，再通过日志文件的数据做增量回复，这样的恢复速度很快</p>
</blockquote>
<h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><ul>
<li><p>注册当前会话的账号密码</p>
<p>  <code>addauth digest tr:0800</code></p>
</li>
<li><p>创建节点并且设置权限</p>
<p>  <code>create /test abcd auth:tr:0800:cdwra</code></p>
<p> 其他会话使用必须执行addauth才能操作</p>
</li>
</ul>
<h2 id="Curator客户端"><a href="#Curator客户端" class="headerlink" title="Curator客户端"></a>Curator客户端</h2><blockquote>
<p>介绍</p>
<ul>
<li>这是网飞开发的专为zk的客户端框架，是对zk支持最好的工具，支持Leader选举，分布式锁等，减少开发者使用zk的底层细节。<br>引入依赖</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.4</span><span class="number">.14</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.12</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.12</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>application.yml配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">curator.retryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">curator.elapsedTimesMs</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">curator.connectString</span>=<span class="string">127.0.0.1:2181</span></span><br><span class="line"><span class="meta">curator.sessionTimeoutMs</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">curator.connectionTimeoutMs</span>=<span class="string">5001</span></span><br></pre></td></tr></table></figure>

<p>配置文件WarpperZK.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.client.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;curator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperZK</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> elapsedTimesMs;</span><br><span class="line">    <span class="keyword">private</span> String connectString;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeoutMs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connectionTimeoutMs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CuratorConfig.class 配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zq.client.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.RetryNTimes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WrapperZK wrapperZk;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;start&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">curatorFramework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CuratorFrameworkFactory.newClient(</span><br><span class="line">                wrapperZk.getConnectString(), wrapperZk.getSessionTimeoutMs(), wrapperZk.getConnectionTimeoutMs(),</span><br><span class="line">                <span class="keyword">new</span> RetryNTimes(wrapperZk.getRetryCount(), wrapperZk.getElapsedTimesMs()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试类文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * com.zq.client.BootZkClientApplication Tester.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;Authors name&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;3�� 16, 2022&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootZkClientApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method: main(String[] args)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 添加持久节点</span></span><br><span class="line">        String path = curatorFramework.create().forPath(<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加临时序号节点</span></span><br><span class="line"><span class="comment">//        String path1 = curatorFramework.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(&quot;/curator-node&quot;, &quot;some data&quot;.getBytes(StandardCharsets.UTF_8));</span></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;curator create node:%s successfully.&quot;</span>, path));</span><br><span class="line"><span class="comment">//        System.in.read();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = curatorFramework.getData().forPath(<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        curatorFramework.setData().forPath(<span class="string">&quot;/curator-node&quot;</span>, <span class="string">&quot;changed&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateWithParent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        curatorFramework.create().creatingParentsIfNeeded().forPath(<span class="string">&quot;/parent-node/sub&quot;</span>, <span class="string">&quot;tzq&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = curatorFramework.getData().forPath(<span class="string">&quot;/parent-node/sub&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ZK如何实现分布式锁"><a href="#ZK如何实现分布式锁" class="headerlink" title="ZK如何实现分布式锁"></a>ZK如何实现分布式锁</h2><blockquote>
<p>如果两个java服务都是向数据库中写入车票数据，负载均衡每次只分配到一个java服务，当一个服务写时，另一个服务不能写，如何做到两个或多个服务的锁，通过ZK存储锁</p>
</blockquote>
<blockquote>
<p>zk中锁的种类:</p>
<ul>
<li>读锁</li>
<li>写锁</li>
</ul>
</blockquote>
<h3 id="ZK上读锁"><a href="#ZK上读锁" class="headerlink" title="ZK上读锁"></a>ZK上读锁</h3><ol>
<li>创建临时序号节点，节点数据为read，表示读锁</li>
<li>获取zk中序号比自己小的所有节点，判断是不是读锁，若都是读锁，那么上锁成功，反之失败，为最小节点设置监听，阻塞等待，当小于最小节点时同时当前节点再判断</li>
</ol>
<h3 id="ZK上写锁"><a href="#ZK上写锁" class="headerlink" title="ZK上写锁"></a>ZK上写锁</h3><ol>
<li>创建临时序号节点，节点数据为write，表示写锁</li>
<li>获取所有节点并判断自己是否时最小节点，是则上锁成功，反之监听最小节点，最小节点没了才能再次检测</li>
</ol>
<h3 id="羊群效应"><a href="#羊群效应" class="headerlink" title="羊群效应"></a>羊群效应</h3><p>如果100个并发来上写锁，那么99个并发会监听写锁，当第一个节点完成写锁消失后，99个又触发监听事件，对zk压力大，调整为链式监听即可，即不再监听第一个节点，而是监听上一个节点。</p>
<p>这样，100个并发过来，第一个得到写锁，第二个监听第一个，第三个监听第二个，依次。如果第一个结束，第二个监听事件触发可以上写锁，但是第三位不被触发监听因为第二位节点没有删除。</p>
<h2 id="zk的watch机制"><a href="#zk的watch机制" class="headerlink" title="zk的watch机制"></a>zk的watch机制</h2><blockquote>
<p>watch机制类似触发器，当znode改变，即调用了create,delete,setData等方法的时候，会触发对应znode上注册的事件，请求watch的客户端会接收到异步通知</p>
</blockquote>
<h3 id="cli中创建并且监听节点"><a href="#cli中创建并且监听节点" class="headerlink" title="cli中创建并且监听节点"></a>cli中创建并且监听节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">craete /test9</span><br><span class="line">get -w /test9 # 一次性监听节点内容</span><br><span class="line">ls -w /test9 # 一次性监听节点目录（一层目录）</span><br><span class="line">ls -R -w /test9 # 监听所有子目录变化</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这时候其他会话修改数据，这里会通知</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-134.png" alt="upload successful"> </p>
<h3 id="curator-客户端使用watch监听节点"><a href="#curator-客户端使用watch监听节点" class="headerlink" title="curator 客户端使用watch监听节点"></a>curator 客户端使用watch监听节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"> public void testAddListener() throws Exception &#123;</span><br><span class="line">     NodeCache nodeCache = new NodeCache(curatorFramework, &quot;/curator-node&quot;);</span><br><span class="line">     nodeCache.getListenable().addListener(() -&gt; &#123;</span><br><span class="line">         log.info(&quot;&#123;&#125; path nodeChanged:&quot;, &quot;/curator-node&quot;);</span><br><span class="line">         printNodeData();</span><br><span class="line">     &#125;);</span><br><span class="line">     nodeCache.start();</span><br><span class="line">     System.in.read();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void printNodeData() throws Exception &#123;</span><br><span class="line">     byte[] bytes = curatorFramework.getData().forPath(&quot;/curator-node&quot;);</span><br><span class="line">     log.info(&quot;data:&#123;&#125;&quot;, new String(bytes));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Curator-上写锁和读锁"><a href="#Curator-上写锁和读锁" class="headerlink" title="Curator 上写锁和读锁"></a>Curator 上写锁和读锁</h3><p>这段junit代码可以先运行读锁再运行写锁看效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetReadLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 读写锁</span></span><br><span class="line">    InterProcessReadWriteLock interProcessReadWriteLock = <span class="keyword">new</span> InterProcessReadWriteLock(curatorFramework, <span class="string">&quot;/lock1&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取读锁对象</span></span><br><span class="line">    InterProcessMutex interProcessMutex = interProcessReadWriteLock.readLock();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待获取读锁对象&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    interProcessMutex.acquire();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放</span></span><br><span class="line">    interProcessMutex.release();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待释放锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetWriteLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 读写锁</span></span><br><span class="line">    InterProcessReadWriteLock interProcessReadWriteLock = <span class="keyword">new</span> InterProcessReadWriteLock(curatorFramework, <span class="string">&quot;/lock1&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取写锁对象</span></span><br><span class="line">    InterProcessMutex interProcessMutex = interProcessReadWriteLock.writeLock();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待获取写锁对象&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    interProcessMutex.acquire();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放</span></span><br><span class="line">    interProcessMutex.release();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待释放锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ZK集群"><a href="#ZK集群" class="headerlink" title="ZK集群"></a>ZK集群</h2><blockquote>
<p>集群的角色</p>
<ul>
<li>Leader : 处理集群的所有事务请求，只有一个，负责数据读写</li>
<li>Follower : 从，只负责数据读，还能参与Leader选举（Leader挂了的情况）</li>
<li>Observer : 观察者，只负责读，不参与选举</li>
</ul>
</blockquote>
<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>我这里用了docker搭建，没有用dockerCompose，而是bash脚本执行，注意！</p>
<blockquote>
<p>在windows下使用gitbash执行shell脚本，路径是要这么写的！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件</span></span><br><span class="line">for port in $(seq 1 5);</span><br><span class="line">do</span><br><span class="line">mkdir -p /D/DockerV/zkCluster/zkData-$&#123;port&#125;/data</span><br><span class="line">touch /D/DockerV/zkCluster/zkData-$&#123;port&#125;/data/myid</span><br><span class="line">cat &lt;&lt; EOF &gt; /D/DockerV/zkCluster/zkData-$&#123;port&#125;/data/myid</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;port&#125;</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">touch /D/DockerV/zkCluster/zkData-$&#123;port&#125;/zoo.cfg</span><br><span class="line">cat &lt;&lt; EOF &gt; /D/DockerV/zkCluster/zkData-$&#123;port&#125;/zoo.cfg</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/bitnami/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.38.0.11:2001:3001</span><br><span class="line">server.2=172.38.0.12:2001:3001</span><br><span class="line">server.3=172.38.0.13:2001:3001</span><br><span class="line">server.4=172.38.0.14:2001:3001</span><br><span class="line">server.5=172.38.0.15:2001:3001:observer</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量启动容器</span></span><br><span class="line">for port in $(seq 1 5);</span><br><span class="line">do</span><br><span class="line">docker rm -f  zk-$&#123;port&#125;</span><br><span class="line">docker run -p 318$&#123;port&#125;:2181 \</span><br><span class="line">--name zk-$&#123;port&#125; \</span><br><span class="line">-v D:/DockerV/zkCluster/zkData-$&#123;port&#125;/data/://bitnami/zookeeper/data \</span><br><span class="line">-v D:/DockerV/zkCluster/zkData-$&#123;port&#125;/zoo.cfg://opt/bitnami/zookeeper/conf/zoo.cfg -d \</span><br><span class="line">-e  ALLOW_ANONYMOUS_LOGIN=yes \</span><br><span class="line">--net zknet \</span><br><span class="line">--ip 172.38.0.1$&#123;port&#125; \</span><br><span class="line">bitnami/zookeeper </span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>进入集群 <code>docker run -it --rm --network zknet bitnami/zookeeper zkCli.sh -server 192.168.10.28:3181,192.168.10.28:3182,192.168.10.28:3183,192.168.10.28:3184,192.168.10.28:3185</code></p>
</blockquote>
<p><img src="/images/pasted-135.png" alt="upload successful"></p>
<p><img src="/images/pasted-136.png" alt="upload successful"></p>
<blockquote>
<p>集群实质配置</p>
<ul>
<li>其实本质是每台电脑配置好自己的/bitnami/zookeeper/data目录下的myid（里面是id号）</li>
<li>配置/opt/bitnami/zookeeper/conf/zoo.cfg这个cfg文件，最重要的是里面填好通信的其他机器地址和端口</li>
</ul>
</blockquote>
<h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><blockquote>
<p>解决zk的崩溃恢复和主从数据同步问题</p>
</blockquote>
<blockquote>
<p>ZAB协议定义的四种节点状态</p>
<ul>
<li>Looking:选举状态</li>
<li>Following:Follower节点所处的状态</li>
<li>Leading:Leader节点的状态</li>
<li>Observing：。。。</li>
</ul>
</blockquote>
<h3 id="集群上线时Leader选举过程："><a href="#集群上线时Leader选举过程：" class="headerlink" title="集群上线时Leader选举过程："></a>集群上线时Leader选举过程：</h3><p>启动第一台时会looking状态寻找，直到第二台上线，开始选举，选票（myid，zXid事务id，每次事务都自增）第一轮投票，都生成自己的一张选票，然后把选票信息给对方，每台会比较选票（选择zXid最大的），如果事务id相同，取myid最大的，然后投入投票箱。第二轮互换自己投票箱的票，比较后放入投票箱，选出leader</p>
<h3 id="崩溃恢复时的leader选举"><a href="#崩溃恢复时的leader选举" class="headerlink" title="崩溃恢复时的leader选举"></a>崩溃恢复时的leader选举</h3><p>Leader建立完毕后，Leader和Follower是有通信端口的，Leader和Follower存在socket链接，Follower会不间断的读socket数据，Leader会不间断的发，若Leader挂了，socket断开，Follower读不到数据后进入looking状态，其他节点同理。此时Leader出来之前不提供服务！</p>
<h3 id="主从数据同步"><a href="#主从数据同步" class="headerlink" title="主从数据同步"></a>主从数据同步</h3><p>客户端向集群写入数据，可能链接的是从，也可能是主，若客户端链接从节点，从节点会将数据发送给主节点。</p>
<p>主节点将数据写入自己的数据文件，并且返回ACK，然后同步的将数据发给Follower（广播），每个从节点也写入自己的数据文件，完成后返回ack给主节点，Leader收到半数以上的Ack信号后，这时Leader给所有从节点提交commit。从节点收到后将数据写入内存。这样大部分服务器数据都同步了。</p>
<p>半数以上是为了提高集群写数据的性能。但是有可能会有某些服务器数据没有写入到内存。</p>
<h3 id="NIO和BIO应用"><a href="#NIO和BIO应用" class="headerlink" title="NIO和BIO应用"></a>NIO和BIO应用</h3><blockquote>
<p>NIO （多路复用）</p>
<ul>
<li>用于被客户端链接的2181端口<br> 假设同时有4个客户端链接，有读有写，为了性能会使用NIO把所有请求放入一个队列，zk内部处理这些请求</li>
<li>客户端开启watch时也用<br>若有客户端同时监听很多znode节点，当节点变化，客户端会被通知到，NIO模式实现非阻塞状态</li>
</ul>
</blockquote>
<blockquote>
<p>BIO 传统阻塞模型</p>
<ul>
<li>用于Leader选举时的选票交换</li>
</ul>
</blockquote>
<h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>一个系统最多同时满足：一致性（每个节点数据一致），可用性（服务一直可用），分区容错性（遇到节点故障时仍然能够提供服务） 中的两项。</p>
<p>所以现在大部分都采用AP或者AC</p>
<h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><blockquote>
<ul>
<li>基本可用  （双十一切掉评论，退款，注册服务，保留核心功能）</li>
<li>软状态        （没有其他功能的中间状态）</li>
<li>最终一致性 （最终还是能退款的）</li>
</ul>
</blockquote>
<p>回到之前的弊端（zk可能存在某些节点数据未同步），对于未同步数据的服务器，它的事务节点肯定落后于有数据的节点（处理完一次数据，事务id自增），因此zk最求的是顺序一致性，等网络恢复后，落后的节点总会同步到最新的数据，把事务id同步到最新。</p>
]]></content>
      <categories>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>再看操作系统1</title>
    <url>/2022/01/27/%E5%86%8D%E7%9C%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/</url>
    <content><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>操作系统自从毕业后再未接触，当时学的也不是很好，这次重头在学，争取精通os的算法和概念.</p>
<span id="more"></span>

<hr>
<h2 id="什么是OS"><a href="#什么是OS" class="headerlink" title="什么是OS"></a>什么是OS</h2><blockquote>
<p>不同角度</p>
<blockquote>
<p>用户角度</p>
<ul>
<li>控制电脑</li>
<li>管理应用程序</li>
<li>为应用程序提供服务</li>
</ul>
</blockquote>
<blockquote>
<p>计算机</p>
<ul>
<li>管理资源</li>
<li>管理外设，分配资源</li>
</ul>
</blockquote>
<p>架构</p>
<ul>
<li>应用程序之下</li>
<li>硬件之上</li>
</ul>
<p>以LINUX为例，操作系统其实分内核(kernel)和外部应用(shell) 我们更应该关注内核细节</p>
<p>操作系统管理的硬件资源有三大块</p>
<blockquote>
<ul>
<li>CPU （调度）</li>
<li>内存 （物理，虚拟内存管理）</li>
<li>磁盘 （文件系统）</li>
</ul>
</blockquote>
<p>IO （中断处理与设备驱动）</p>
<p>OS的特征：</p>
<blockquote>
<ul>
<li>并发（一段时间内多个程序同时运行，和并行不同，并行是同一时刻同时运行，单核不可能做到）</li>
<li>共享 （将计算机资源共享给其他进程，通过互斥的方法做到”同时“访问）</li>
<li>虚拟 （将计算机硬件虚拟化，内存虚拟化为地址空间，硬盘虚拟化为文件等）</li>
<li>异步 （程序执行不是一贯到底，而是走走停停，OS要保证程序运行结果每次相同）</li>
</ul>
</blockquote>
</blockquote>
<h2 id="操作系统实例"><a href="#操作系统实例" class="headerlink" title="操作系统实例"></a>操作系统实例</h2><blockquote>
<ul>
<li>UNIX家族<ul>
<li>FreeBSD </li>
<li>MacIOS</li>
<li>solaris</li>
<li>….</li>
</ul>
</li>
<li>Linux家族<ul>
<li>redhat</li>
<li>suse</li>
<li>centos</li>
<li>ubuntu</li>
<li>arch</li>
<li>…</li>
</ul>
</li>
<li>windows家族</li>
</ul>
</blockquote>
<h2 id="OS设计的发展"><a href="#OS设计的发展" class="headerlink" title="OS设计的发展"></a>OS设计的发展</h2><blockquote>
<ol>
<li>在一开始的时候，数据都是存储在纸带上，OS只是起到一个监视的作用，单道程序设计</li>
<li>后来CPU速度提升，最好处理过程能够流水线话–批处理阶段</li>
<li>内存进一步扩大后，CPU可以将多个程序加载到内存中使用，这样可以并发重用CPU，这样程序的IO开销减少 – 多道程序设计</li>
<li>CPU造假贵，如何让CPU尽量的忙，当一个程序需要执行等待IO的时候让CPU去执行其他进程，外设读取完后发出中断信号，通知CPU可以切换到原来的进程</li>
<li>以上都是不需要人参与的，为了能够和计算机交互，将CPU的执行时间分片 一片千分之一秒，程序执行一片后控制权给其他进程 – 分时操作</li>
<li>为什么CPU每千分之一秒能被打断，是因为 <strong>时钟</strong> 时钟是个外设设备，每隔一个时间片发出中断信号</li>
<li>网络快速发展后，很多工作可以丢给数据中心做 — 分布式操作系统</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移Archlinux系统</title>
    <url>/2022/10/17/%E8%BF%81%E7%A7%BBArchlinux%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="迁移Archlinux系统到新电脑"><a href="#迁移Archlinux系统到新电脑" class="headerlink" title="迁移Archlinux系统到新电脑"></a>迁移Archlinux系统到新电脑</h1><span id="more"></span>

<h2 id="迁移前的准备"><a href="#迁移前的准备" class="headerlink" title="迁移前的准备"></a>迁移前的准备</h2><blockquote>
<p>下载<code>usbWriter</code>和<code>Archlinux</code>的系统镜像</p>
<p>烧录镜像到usb内</p>
<p>准备容量足够的硬盘或者U盘存储系统所有文件</p>
<p>在被备份的系统上安装多线程压缩工具<code>sudo pacman -S zstd</code></p>
</blockquote>
<h2 id="复制系统文件"><a href="#复制系统文件" class="headerlink" title="复制系统文件"></a>复制系统文件</h2><blockquote>
<p>linux将所有东西都视为文件，设备也是文件，但是不同电脑设备不同，这个需要后期修改</p>
<p>插上容量足够的U盘到现有的linux系统，将<code>/</code>下的所有文件压缩到一个压缩包到U盘下，执行<code>sudo tar --use-compress-program=zstd -cvpf /mnt/usb&lt;你的U盘挂载地址&gt;/arch-backup.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/run/media  --exclude=/media  /</code></p>
<p>这一步比较耗费时间，我的100G空间执行了1个小时左右</p>
</blockquote>
<h2 id="在新电脑划分分区"><a href="#在新电脑划分分区" class="headerlink" title="在新电脑划分分区"></a>在新电脑划分分区</h2><blockquote>
<p>注意：如果是双系统注意不要覆盖windows的分区</p>
<p>关闭<code>secureboot</code>,插入<code>archlinux</code>的系统盘，进入<code>liveCD</code>系统</p>
<p>这时候<code>lsblk</code>或者<code>fdisk -l</code>查看分区信息，对硬盘执行分区操作：<code>fdisk /dev/nvmen1</code>，具体如何分区可以参考安装篇</p>
<p>划分好分区后，开启缓存，挂载主分区到<code>/mnt</code>下，执行<code>mkdir /mnt/boot</code>再把boot分区挂载到<code>/mnt/boot</code>下</p>
</blockquote>
<h2 id="解压系统文件到新电脑"><a href="#解压系统文件到新电脑" class="headerlink" title="解压系统文件到新电脑"></a>解压系统文件到新电脑</h2><blockquote>
<p>这时电脑处在<code>liveCD</code>下，如果没有可用的U盘存储新系统，可以将两台电脑放在一个局域网下，通过<code>iwctl命令连接无线网络</code>，之后可以通过<code>sftp</code>命令，将旧电脑的<code>arch-backup.tgz</code>文件传输到新电脑</p>
<p>若有U盘则直接将<code>arch-backup.tgz</code>文件复制到<code>/</code>目录下，然后执行解压缩命令解压缩到<code>/mnt/</code>目录下：<code>sudo tar -z -c -T0 -18 -v -p -f - arch-backup.zstd -C /mnt</code></p>
<p>执行完毕后创建刚刚排除的文件夹：<code>sudo mkdir -pv /mnt/proc sudo mkdir -pv /mnt/sys sudo mkdir -pv /mnt/run sudo mkdir -pv /mnt/dev</code></p>
</blockquote>
<h2 id="配置新电脑的硬件信息"><a href="#配置新电脑的硬件信息" class="headerlink" title="配置新电脑的硬件信息"></a>配置新电脑的硬件信息</h2><blockquote>
<p>至此新的系统已经复制到了新电脑，但是还没有配置新系统使用的硬件信息（缓存所在分区，系统主分区信息等），执行<code>sudo genfstab -U /mnt/ &gt; /mnt/etc/fstab</code> 可以看到交换区信息等都已写入</p>
<p>配置系统新系统的引导程序使用的硬件地址，使用的引导软件现在还不知道启动的时候去哪个分区里面加载系统，所以要配置主分区的UUID到引导软件的配置里。</p>
<p>配置前首先切换到新系统：<code>arch-chroot /mnt</code></p>
<p>如果和我一样使用<code>reFind</code>，那么只需修改<code>/boot/EFI/refind/refind.conf</code>的配置文件的信息，使用<code>ls -l /dev/disk/by-uuid</code>查看所有分区的UUID信息。</p>
<p>如果是<code>grub</code>引导，执行`grub-install –target=x86_64-efi –efi-directory=/boot/efi –bootloader=ArchLinux –recheck</p>
</blockquote>
<p>update-grub`</p>
<blockquote>
</blockquote>
<h2 id="更新Initramfs配置双系统等"><a href="#更新Initramfs配置双系统等" class="headerlink" title="更新Initramfs配置双系统等"></a>更新Initramfs配置双系统等</h2><blockquote>
<p>执行<code>mkinitcpio -P</code></p>
<p>挂载windows的ESP分区（很小 只有100<br>，里面有个Microsoft目录），把目录的Microsoft目录拷贝到/boot/EFI/下，将<code>Microsoft</code>文件夹拷贝到<code>/boot/EFI</code>下</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
